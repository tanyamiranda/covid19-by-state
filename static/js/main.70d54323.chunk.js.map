{"version":3,"sources":["serviceWorker.js","utilities/data-fields.js","utilities/data-processing.js","redux/chart-config/chart-config.types.js","components/chart-config/chart-config.component.jsx","redux/chart-config/chart-config.actions.js","components/chart-display/chart-display.component.jsx","components/state-history-chart/state-history-chart.component.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","components/mobile-message/mobile-message.component.jsx","components/us-history-chart/us-history-chart.component.jsx","components/dashboard/dashboard.component.jsx","App.js","redux/chart-config/chart-config.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DATE_RANGES","15","30","45","60","CHART_OPTIONS","responsive","title","display","tooltips","mode","intersect","hover","scales","xAxes","scaleLabel","labelString","yAxes","DATA_FIELD_COLORS","US_STATES_DATA","ALL","AK","AL","AR","AS","AZ","CA","CO","CT","DC","DE","FL","GA","GU","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MP","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VA","VI","VT","WA","WI","WV","WY","DATA_FIELD_GROUPS","testing","patient","cumulative","increase","DEFAULT_DATA_FIELD","getDateListFromData","stateData","datesList","map","item","date","filter","value","index","self","indexOf","newDateList","forEach","dateString","String","month","Number","substring","day","push","getChartDataset","fieldNames","fieldDatasets","fieldName","label","fill","backgroundColor","borderColor","data","dayRecord","find","getStatesInfo","stateInfo","stateNames","name","website","covid19Site","twitter","notes","getFormattedDateForFiltering","d","Date","getMonth","getDate","year","getFullYear","length","getFreshData","a","historyData","countryData","fetch","stateInfoRes","ok","json","Error","statusText","historicalDataRes","statesCurrentDataRes","grade","dataQualityGrade","countryDataRes","statesHistoryData","stateInformation","countryHistoryData","ChartConfigTypes","SET_STATE_SELECTION","SET_DATE_RANGE_SELECTION","SET_FIELD_SELECTION","SET_COVID19_DATA","connect","selectedState","chartConfig","selectedDateRange","selectedFields","dispatch","setStateSelection","userSelectedState","type","payload","setDateRangeSelection","userSelectedDateRange","setFieldSelection","userSelectedFields","fieldGroups","Object","keys","dateRangeKeys","stateKeys","handleFieldSelection","event","checkedValue","target","checked","currentSelectedFields","handleGroupSelection","group","id","className","defaultValue","onChange","key","onClick","field","currentLineChart","ChartDisplay","chartType","chartOptions","chartLabels","chartDataSet","chartContainer","useRef","useState","chartInstance","setChartInstance","useEffect","current","options","labels","datasets","destroy","Chart","ref","now","setDate","dateValue","startFromDate","sort","b","dateList","open","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","MobileMessage","getCountryHistoryData","dataRefreshedTimestamp","setCOVID19Data","freshData","loadData","App","INITIAL_STATE","chartConfigReducer","action","toLocaleString","combineReducers","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.70d54323.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const DATE_RANGES = {\r\n    15: \"Last 15 days\",\r\n    30: \"Last 30 days\",\r\n    45: \"Last 45 days\",\r\n    60: \"Last 60 days\"\r\n}\r\n\r\nexport const CHART_OPTIONS = {\r\n    responsive: true,\r\n    title: { display: false},\r\n    tooltips: {mode: 'index', intersect: false},\r\n    hover: {mode: 'nearest', intersect: true},\r\n    scales: {\r\n        xAxes: [{\r\n            display: true,\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Day'\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            display: true,\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Value'\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    '#138E05',\r\n    '#A15B81',\r\n    '#2E16A6',\r\n    '#146AD4',\r\n    '#A9D422',\r\n    '#18F8BB',\r\n    '#AFC044',\r\n    '#3B9793',\r\n    '#822611',\r\n    '#FB2E76',\r\n    '#A5CA71',\r\n    '#983538',\r\n    '#082BD9',\r\n    '#2E136A',\r\n    '#05BB78',\r\n    '#44A4AD',\r\n    '#28FD7E',\r\n    '#387862'\r\n];\r\n\r\nexport const US_STATES_DATA = {\r\n    ALL:\"All States (default)\",\r\n    AK:\"Alaska\",\r\n    AL:\"Alabama\",\r\n    AR:\"Arkansas\",\r\n    AS:\"American Samoa\",\r\n    AZ:\"Arizona\",\r\n    CA:\"California\", \r\n    CO:\"Colorado\", \r\n    CT:\"Connecticut\", \r\n    DC:\"District Of Columbia\",\r\n    DE:\"Delaware\", \r\n    FL:\"Florida\", \r\n    GA:\"Georgia\",\r\n    GU:\"Guam\", \r\n    HI:\"Hawaii\", \r\n    IA:\"Iowa\", \r\n    ID:\"Idaho\", \r\n    IL:\"Illinois\", \r\n    IN:\"Indiana\", \r\n    KS:\"Kansas\", \r\n    KY:\"Kentucky\", \r\n    LA:\"Louisiana\", \r\n    MA:\"Massachusetts\",\r\n    MD:\"Maryland\", \r\n    ME:\"Maine\", \r\n    MI:\"Michigan\",\r\n    MN:\"Minnesota\",\r\n    MO:\"Missouri\", \r\n    MP:\"Northern Mariana Islands\",\r\n    MS:\"Mississippi\", \r\n    MT:\"Montana\", \r\n    NC:\"North Carolina\", \r\n    ND:\"North Dakota\", \r\n    NE:\"Nebraska\", \r\n    NH:\"New Hampshire\", \r\n    NJ:\"New Jersey\", \r\n    NM:\"New Mexico\", \r\n    NV:\"Nevada\", \r\n    NY:\"New York\", \r\n    OH:\"Ohio\", \r\n    OK:\"Oklahoma\", \r\n    OR:\"Oregon\", \r\n    PA:\"Pennsylvania\", \r\n    PR:\"Puerto Rico\", \r\n    RI:\"Rhode Island\",\r\n    SC:\"South Carolina\", \r\n    SD:\"South Dakota\", \r\n    TN:\"Tennessee\", \r\n    TX:\"Texas\", \r\n    UT:\"Utah\", \r\n    VA:\"Virginia\", \r\n    VI:\"US Virgin Islands\", \r\n    VT:\"Vermont\", \r\n    WA:\"Washington\", \r\n    WI:\"Wisconsin\", \r\n    WV:\"West Virginia\", \r\n    WY:\"Wyoming\"\r\n}\r\n\r\n\r\nexport const DATA_FIELD_GROUPS = {\r\n    \r\n    testing:[\r\n        \"positive\",\r\n        \"negative\",\r\n        \"pending\",\r\n        \"totalTestResults\"\r\n    ],\r\n    patient: [\r\n        \"hospitalizedCurrently\",\r\n        \"inIcuCurrently\",\r\n        \"onVentilatorCurrently\",\r\n        \"death\",\r\n        \"recovered\"\r\n    ],\r\n    cumulative: [\r\n        \"hospitalizedCumulative\",\r\n        \"inIcuCumulative\",\r\n        \"onVentilatorCumulative\"\r\n    ],\r\n    increase: [\r\n        \"deathIncrease\",\r\n        \"hospitalizedIncrease\",\r\n        \"negativeIncrease\",\r\n        \"positiveIncrease\",\r\n        \"totalTestResultsIncrease\"\r\n    ]\r\n};\r\n\r\nexport const DATA_FIELD_DISPLAY_NAMES = {\r\n    \r\n    positive: \"Positive Result\",\r\n    negative: \"Negative Result\",\r\n    totalTestResults: \"Total Test Results\",\r\n    pending: \"Pending\",\r\n    death: \"Death\", \r\n    recovered: \"Recovered\",\r\n    hospitalizedCurrently: \"Currently Hospitalized\",\r\n    inIcuCurrently: \"Currently In ICU\",\r\n    onVentilatorCurrently: \"Currently On Ventilator\",\r\n    hospitalizedCumulative: \"Hospitalized Cumulative\",\r\n    inIcuCumulative: \"In ICU Cumulative\",\r\n    onVentilatorCumulative: \"On Ventilator Cumulative\",    \r\n    deathIncrease: \"Death Increases\",\r\n    hospitalizedIncrease: \"Hospitalized Increases\",\r\n    negativeIncrease: \"Negative Increases\",\r\n    positiveIncrease: \"Positive Increases\",\r\n    totalTestResultsIncrease: \"Total Test Results Increases\"\r\n}\r\n\r\nexport const DEFAULT_DATA_FIELD = [\r\n    \"positive\",\r\n    \"negative\",\r\n    \"pending\",\r\n    \"totalTestResults\"\r\n]","import {DATA_FIELD_COLORS} from './data-fields';\r\n\r\nexport const getDateListFromData = (stateData) => {\r\n\r\n    const datesList = stateData.map(item => item.date)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var month = Number(dateString.substring(4,6));\r\n        var day = Number(dateString.substring(6,8));\r\n\r\n        newDateList.push(month + \"/\" + day);\r\n    });\r\n\r\n    return newDateList;\r\n}\r\n\r\nexport const getHistoryByState = (stateHistoryData, state, startFromDate) => {\r\n\r\n    return stateHistoryData\r\n        .filter(stateData => stateData.state === state && stateData.date >= startFromDate )\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n    \r\n}    \r\n\r\nexport const getChartDataset = (stateData, fieldNames) => {\r\n\r\n    const fieldDatasets = [];\r\n\r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        fieldDatasets.push({\r\n            label: fieldName,\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            data: []\r\n        })\r\n    })\r\n\r\n    stateData.forEach(dayRecord => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = fieldDatasets.find((data => data.label === fieldName))    \r\n            fieldData.data.push(!dayRecord[fieldName] ? 0 : dayRecord[fieldName]);\r\n        })\r\n    });\r\n\r\n    return fieldDatasets;\r\n}\r\n\r\n\r\nexport const getStatesInfo = (stateInfo) => {\r\n    \r\n    const stateNames = []; \r\n\r\n    stateInfo.forEach(data => {\r\n        stateNames[data.state] = {\r\n            name: data.name,\r\n            website: data.covid19Site,\r\n            twitter: data.twitter,\r\n            notes: data.notes\r\n        }\r\n    })\r\n    \r\n    return stateNames;\r\n}\r\n\r\n\r\nexport const getFormattedDateForFiltering = (date) => {\r\n    var d = new Date(date);\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n    return year + month + day;\r\n}\r\n\r\nexport const getFreshData = async() => {\r\n    \r\n    //console.log(\"Fetching Data from https://covidtracking.com/...\");\r\n\r\n    let historyData = null;\r\n    let stateInfo = null;\r\n    let countryData = null;\r\n\r\n    try {\r\n\r\n        const stateInfoRes = await fetch('https://covidtracking.com/api/v1/states/info.json');\r\n        if (stateInfoRes.ok) {\r\n            \r\n            const json = await stateInfoRes.json();\r\n            stateInfo = getStatesInfo(json);\r\n        }\r\n        else {\r\n            throw Error(stateInfoRes.statusText);\r\n        }\r\n\r\n        const historicalDataRes = await fetch('https://covidtracking.com/api/v1/states/daily.json');\r\n        if (historicalDataRes.ok) {\r\n            \r\n            const json = await historicalDataRes.json();\r\n            historyData = json;\r\n        }\r\n        else {\r\n            throw Error(historicalDataRes.statusText);\r\n        }\r\n\r\n        const statesCurrentDataRes = await fetch('https://covidtracking.com/api/v1/states/current.json');\r\n        if (statesCurrentDataRes.ok) {\r\n            \r\n            const json = await statesCurrentDataRes.json();\r\n            json.forEach(data => {\r\n                stateInfo[data.state].grade = data.dataQualityGrade\r\n            });\r\n        }\r\n        else {\r\n            throw Error(statesCurrentDataRes.statusText);\r\n        }\r\n\r\n        const countryDataRes = await fetch('https://covidtracking.com/api/v1/us/daily.json');\r\n        if (countryDataRes.ok) {\r\n            \r\n            const json = await countryDataRes.json();\r\n            countryData = json;\r\n        }\r\n        else {\r\n            throw Error(countryDataRes.statusText);\r\n        }\r\n\r\n        return {\r\n            statesHistoryData: historyData,\r\n            stateInformation: stateInfo,\r\n            countryHistoryData: countryData\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const getCountryHistoryData = (countryHistoryData, startFromDate) => {\r\n\r\n    return countryHistoryData\r\n        .filter(data => data.date >= startFromDate )\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n    \r\n}","const ChartConfigTypes = {\r\n    SET_STATE_SELECTION : \"SET_STATE_SELECTION\",\r\n    SET_DATE_RANGE_SELECTION : \"SET_DATE_RANGE_SELECTION\",\r\n    SET_FIELD_SELECTION : \"SET_FIELD_SELECTION\",\r\n\r\n    SET_COVID19_DATA : \"SET_COVID19_DATA\"\r\n\r\n};\r\n\r\nexport default ChartConfigTypes;","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './chart-config.css';\r\n\r\nimport {DATE_RANGES,US_STATES_DATA,DATA_FIELD_GROUPS} from '../../utilities/data-fields';\r\nimport {setDateRangeSelection, setStateSelection, setFieldSelection} from '../../redux/chart-config/chart-config.actions';\r\n\r\nconst ChartConfiguration = ({selectedState, selectedDateRange, selectedFields, setStateSelection, setDateRangeSelection, setFieldSelection}) => {\r\n\r\n    //console.log(\"ChartConfiguration()...\");\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n\r\n    const fieldGroups = Object.keys(DATA_FIELD_GROUPS);\r\n    const dateRangeKeys = Object.keys(DATE_RANGES);\r\n    const stateKeys = Object.keys(US_STATES_DATA);\r\n\r\n    const handleStateSelection = (event) => {\r\n        setStateSelection(event.target.value);\r\n    }\r\n    const handleDateRangeSelection = (event) => {\r\n        setDateRangeSelection(event.target.value);\r\n    }\r\n    const handleFieldSelection = (event) => {\r\n\r\n        const checkedValue = event.target.checked;\r\n        const fieldName = event.target.value;\r\n        let currentSelectedFields = null;\r\n\r\n        if (checkedValue) {\r\n            currentSelectedFields = [...selectedFields];\r\n            currentSelectedFields.push(fieldName);\r\n        }\r\n        else {\r\n            currentSelectedFields = selectedFields.filter(value => value !== fieldName);\r\n        }\r\n\r\n        setFieldSelection(currentSelectedFields);\r\n    }\r\n\r\n    const handleGroupSelection = (event) => {        \r\n        const group = event.target.id;\r\n        setFieldSelection(DATA_FIELD_GROUPS[group]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-configuration\">\r\n            <div className=\"top-section\">\r\n                <div className=\"config-section\">\r\n                    <label className=\"config-field\">State:<br/>\r\n                        <select name=\"stateSelection\" defaultValue={selectedState} onChange={handleStateSelection}>\r\n                            {stateKeys.map ((item) => \r\n                                <option  key={item} value={item} >{US_STATES_DATA[item]}</option>\r\n                            )}\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n                <div className=\"config-section\">\r\n                    <label className=\"config-field\">Date Range:<br/>\r\n                        <select name=\"dateRangeSelection\" defaultValue={selectedDateRange}  onChange={handleDateRangeSelection}>\r\n                            {dateRangeKeys.map ((item) => \r\n                                <option key={item} value={item} >{DATE_RANGES[item]}</option>\r\n                            )}\r\n                        </select>\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            <div className=\"config-section\">\r\n                <div className=\"config-field\">Data Fields:</div>\r\n                <div className=\"field-groups\">\r\n                {\r\n                    \r\n                    fieldGroups.map(group => \r\n                        \r\n                        <div className=\"config-field-group\" key={group}>\r\n                            <div className=\"group site-link\" id={group} onClick={handleGroupSelection}>{group} Data</div>\r\n                            {\r\n                            DATA_FIELD_GROUPS[group].map( field => (\r\n                                <div key={field}>\r\n                                    <label>\r\n                                        <input className=\"field-option\" \r\n                                            type=\"checkbox\" \r\n                                            name=\"fieldSelection\" \r\n                                            onChange={handleFieldSelection} \r\n                                            value={field}\r\n                                            checked = {selectedFields.indexOf(field) === -1 ? false : true}\r\n                                        />\r\n                                        {field}\r\n                                    </label> \r\n                                </div>\r\n                            ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n                </div>\r\n            </div>            \r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange, \r\n    selectedFields: state.chartConfig.selectedFields\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\r\n    setStateSelection: (userSelectedState) => dispatch(setStateSelection(userSelectedState)),\r\n    setDateRangeSelection: (userSelectedDateRange) => dispatch(setDateRangeSelection(userSelectedDateRange)),\r\n    setFieldSelection: (userSelectedFields) => dispatch(setFieldSelection(userSelectedFields))\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChartConfiguration);","import ChartConfigTypes from './chart-config.types';\r\n\r\nexport const setStateSelection = (stateSelection) => ({\r\n    type : ChartConfigTypes.SET_STATE_SELECTION,\r\n    payload: stateSelection\r\n});\r\n\r\nexport const setDateRangeSelection = (dateRangeSelection) => ({\r\n    type : ChartConfigTypes.SET_DATE_RANGE_SELECTION,\r\n    payload: dateRangeSelection\r\n});\r\n\r\nexport const setFieldSelection = (fieldSelection) => ({\r\n    type : ChartConfigTypes.SET_FIELD_SELECTION,\r\n    payload: fieldSelection\r\n});\r\n\r\nexport const setCOVID19Data = (data) => ({\r\n    type : ChartConfigTypes.SET_COVID19_DATA,\r\n    payload: data\r\n});\r\n\r\n\r\n\r\n","\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\n// Necessary to be able to clear previous charts\r\nlet currentLineChart;\r\n\r\nconst ChartDisplay = ({chartType, chartOptions, chartLabels, chartDataSet}) => {\r\n    const chartContainer = useRef(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if (chartContainer && chartContainer.current) {\r\n\r\n            //console.log(\"loading chart...\");\r\n\r\n            const chartConfig = {\r\n                type: chartType,\r\n                options: chartOptions,\r\n                data: {\r\n                    labels: chartLabels,\r\n                    datasets: chartDataSet\r\n                }            \r\n            }\r\n\r\n            // Destroy previous chart if it exists \r\n            if (typeof currentLineChart !== \"undefined\") currentLineChart.destroy();\r\n\r\n            currentLineChart = new Chart(chartContainer.current, chartConfig);\r\n            setChartInstance(currentLineChart);\r\n            \r\n        }\r\n    }, [chartContainer, chartType, chartOptions, chartLabels, chartDataSet]);\r\n    \r\n    return (\r\n        <div>\r\n            <canvas id={!chartInstance ? \"0\" : \"chart-js-display\"} ref={chartContainer} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDisplay;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './state-history-chart.css';\r\n\r\nimport {US_STATES_DATA, CHART_OPTIONS} from '../../utilities/data-fields';\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nimport {\r\n    getHistoryByState, \r\n    getChartDataset, \r\n    getDateListFromData,\r\n    getFormattedDateForFiltering\r\n} from '../../utilities/data-processing';\r\n\r\nconst StateHistoryChart = ({statesHistoryData, stateInformation, selectedState, selectedFields, selectedDateRange}) => {  \r\n        \r\n    if (!statesHistoryData)\r\n        return;\r\n\r\n    //console.log(\"StateHistoryChart...\");\r\n    //console.log(\"statesHistoryData=\",statesHistoryData);\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    var now = new Date();\r\n    now.setDate(now.getDate() - Number(selectedDateRange));\r\n    const dateValue = getFormattedDateForFiltering(now);\r\n\r\n    const stateData = getHistoryByState(statesHistoryData, selectedState, dateValue); \r\n    const chartDataSet = getChartDataset(stateData, selectedFields);\r\n    const dateList = getDateListFromData(stateData);\r\n\r\n    return (\r\n        <div className=\"state-history-chart\">\r\n            <div className=\"chart-header\">Data for {US_STATES_DATA[selectedState]} last {selectedDateRange} days</div>\r\n            <ChartDisplay \r\n            chartType=\"line\"\r\n            chartOptions = {CHART_OPTIONS}\r\n            chartLabels = {dateList} \r\n            chartDataSet = {chartDataSet}\r\n            />      \r\n            <div className=\"chart-footer\"> \r\n                Data Quality Grade for {US_STATES_DATA[selectedState]}: &nbsp;&nbsp;<b>{stateInformation[selectedState].grade} **</b> <br/>\r\n                <span className=\"site-link\" onClick={()=> window.open(stateInformation[selectedState].website)}>{selectedState} COVID19 Website</span>&nbsp;&nbsp;&bull;&nbsp;&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open('https://www.twitter.com/' + stateInformation[selectedState].twitter)}>Twitter</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    statesHistoryData: state.chartConfig.statesHistoryData,\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange, \r\n    selectedFields: state.chartConfig.selectedFields\r\n});\r\n\r\nexport default connect(mapStateToProps)(StateHistoryChart);","import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport {SpinnerContainer, SpinnerOverlay} from './spinner.styles.jsx';\r\n\r\nconst Spinner = () => (\r\n    <SpinnerOverlay>\r\n        <SpinnerContainer/>\r\n    </SpinnerOverlay>\r\n);\r\n\r\nexport default Spinner;\r\n\r\n","import React from 'react'\r\n\r\nimport './mobile-message.css';\r\n\r\nconst MobileMessage = () => (\r\n    <div className=\"mobile-message\">\r\n        <div className=\"message\">Chart is too big for your screen.<br/> Turn your device sideways.</div>        \r\n        <div className=\"phone\">\r\n            <div className=\"phone-screen\"></div>\r\n            <div className=\"phone-button\"></div>\r\n        </div>\r\n    </div>\r\n)\r\nexport default MobileMessage;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './us-history-chart.css';\r\n\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\nimport {CHART_OPTIONS} from '../../utilities/data-fields';\r\nimport { \r\n    getCountryHistoryData,\r\n    getChartDataset, \r\n    getDateListFromData,\r\n    getFormattedDateForFiltering\r\n} from '../../utilities/data-processing';\r\n\r\nconst USHistoryChart = ({countryHistoryData, selectedFields, selectedDateRange}) => {  \r\n        \r\n    if (!countryHistoryData)\r\n        return;\r\n\r\n    //console.log(\"USHistoryChart()...\");\r\n    //console.log(\"countryHistoryData=\",countryHistoryData);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    var now = new Date();\r\n    now.setDate(now.getDate() - Number(selectedDateRange));\r\n    const dateValue = getFormattedDateForFiltering(now);\r\n\r\n    const countryData = getCountryHistoryData(countryHistoryData, dateValue); \r\n    const chartDataSet = getChartDataset(countryData, selectedFields);\r\n    const dateList = getDateListFromData(countryData);\r\n\r\n    return (\r\n        <div className=\"us-history-chart\">\r\n            <div className=\"chart-header\">Data for All United States last {selectedDateRange} days</div>\r\n            <ChartDisplay \r\n                chartType=\"line\"\r\n                chartOptions = {CHART_OPTIONS}\r\n                chartLabels = {dateList} \r\n                chartDataSet = {chartDataSet}\r\n            />\r\n        </div>      \r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    countryHistoryData: state.chartConfig.countryHistoryData,\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange, \r\n    selectedFields: state.chartConfig.selectedFields\r\n});\r\n\r\nexport default connect(mapStateToProps)(USHistoryChart);","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport \"./dashboard.css\";\r\n\r\nimport {getFreshData} from '../../utilities/data-processing';\r\nimport {setCOVID19Data} from '../../redux/chart-config/chart-config.actions';\r\nimport ChartConfiguration from '../chart-config/chart-config.component';\r\nimport StateHistoryChart from '../state-history-chart/state-history-chart.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport MobileMessage from '../mobile-message/mobile-message.component';\r\nimport USHistoryChart from '../us-history-chart/us-history-chart.component';\r\n\r\nconst Covid19UsDashboard =({setCOVID19Data, dataRefreshedTimestamp, selectedState, selectedDateRange,selectedFields}) => {  \r\n\r\n    useEffect(() => {\r\n\r\n        //console.log(\"useEffect()...\");\r\n        async function loadData() {\r\n            try {   \r\n                if (!dataRefreshedTimestamp) {\r\n                    //console.log(\"retrievingData()...\");\r\n                    const freshData = await getFreshData();\r\n\r\n                    const data = {\r\n                        statesHistoryData: freshData.statesHistoryData,\r\n                        stateInformation: freshData.stateInformation,\r\n                        countryHistoryData: freshData.countryHistoryData\r\n                    };\r\n                    setCOVID19Data(data);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        loadData();\r\n\r\n    },[setCOVID19Data,dataRefreshedTimestamp]);\r\n    \r\n    //console.log(\"dataRefreshedTimestamp=\",dataRefreshedTimestamp);\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    return (   \r\n\r\n        <div className=\"state-data-history\">\r\n            <div className=\"page-title\">Covid19 Data Charts for U.S. States</div>\r\n                <div className=\"page-layout\">\r\n                    <MobileMessage />\r\n                    <ChartConfiguration />\r\n                    <div className=\"chart-container\">\r\n                        { !dataRefreshedTimestamp ? ( \r\n                            <Spinner />\r\n                        ) : (\r\n                            selectedState === \"ALL\" ? \r\n                            (   \r\n                                <USHistoryChart />\r\n                            ) : (      \r\n                                <StateHistoryChart />\r\n                            )\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            <div className=\"page-footer\">\r\n                <b>** Data Quality Grade determined by The COVID Tracking Project </b><br/>\r\n                Not All States Report All Data<br/>\r\n                Historical Data Refreshed daily at 4:00 PM EST<br/>\r\n                ~ ~ ~<br/>\r\n                This is a visual representation of the data collected by The COVID Tracking Project<br/>\r\n                For more info, visit <span className=\"site-link\" onClick={()=> window.open(\"https://covidtracking.com/\")}>https://covidtracking.com/</span><br/>\r\n                For field definitions, visit <span className=\"site-link\" onClick={()=> window.open(\"https://covidtracking.com/api\")}>https://covidtracking.com/api</span><br/>\r\n                ~ ~ ~<br/>\r\n                Site built by Tanya Miranda<br/>tanya.miranda@gmail.com\r\n            </div>\r\n        </div>\r\n    \r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    dataRefreshedTimestamp: state.chartConfig.dataRefreshedTimestamp,\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange, \r\n    selectedFields: state.chartConfig.selectedFields\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCOVID19Data: (data) => dispatch(setCOVID19Data(data))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Covid19UsDashboard);","import React from 'react';\n\nimport Covid19UsDashboard from './components/dashboard/dashboard.component';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Covid19UsDashboard/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import ChartConfigTypes from './chart-config.types';\r\nimport {DEFAULT_DATA_FIELD} from '../../utilities/data-fields';\r\n\r\nconst INITIAL_STATE = {\r\n    statesHistoryData: null,\r\n    stateInformation: null,\r\n    countryHistoryData: null,\r\n    dataRefreshedTimestamp: null,\r\n    selectedState: null,\r\n    selectedDateRange: null,   \r\n    selectedFields: []    \r\n};\r\n\r\nconst chartConfigReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ChartConfigTypes.SET_COVID19_DATA: \r\n            return {\r\n                selectedState: \"ALL\",\r\n                selectedDateRange: \"30\",   \r\n                selectedFields: DEFAULT_DATA_FIELD,    \r\n                statesHistoryData: action.payload.statesHistoryData,\r\n                stateInformation: action.payload.stateInformation,\r\n                countryHistoryData: action.payload.countryHistoryData,\r\n                dataRefreshedTimestamp: (new Date()).toLocaleString()\r\n            }\r\n        case ChartConfigTypes.SET_STATE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedState: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_FIELD_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedFields: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_DATE_RANGE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedDateRange: action.payload\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n        \r\n    }\r\n}\r\n\r\nexport default chartConfigReducer;","import {combineReducers} from 'redux';\r\n\r\nimport chartConfigReducer from './chart-config/chart-config.reducer';\r\n\r\nexport default combineReducers({\r\n    chartConfig: chartConfigReducer\r\n});\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewareObjects = [];\r\n\r\n//Only use logger in development environement\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewareObjects.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewareObjects));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}