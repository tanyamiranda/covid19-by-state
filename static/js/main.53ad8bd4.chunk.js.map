{"version":3,"sources":["components/state-data/state-data.component.jsx","components/utilities/data-fields.js","components/dropdown/dropdown.component.jsx","components/utilities/data-processing.js","App.js","serviceWorker.js","index.js"],"names":["currentLineChart","DATA_FIELD_VALUES","DATA_FIELD_COLORS","CHART_OPTIONS","type","responsive","title","display","tooltips","mode","intersect","hover","scales","xAxes","scaleLabel","labelString","yAxes","STATES","ShortDropDown","fieldName","optionList","labelsList","defaultSelected","onChangeEvent","useState","listDisplaySize","setListDisplaySize","resetDisplayList","className","name","onChange","defaultValue","size","onMouseDown","length","onBlur","map","item","index","onClick","key","value","StateData","chartRef","React","createRef","defaultFields","state","selectedState","selectedDateRange","selectedFields","statesHistoryData","dataRefreshedTimestamp","date","d","Date","month","getMonth","day","getDate","year","getFullYear","this","now","setDate","Number","startFromDate","dateValue","formatDate","fields","Object","keys","filter","id","stateData","sort","a","b","chartDataSet","fieldNames","fieldDatasets","forEach","push","label","fill","backgroundColor","borderColor","data","dayRecord","find","getChartDataset","dateList","datesList","self","indexOf","newDateList","dateString","String","substring","getDateListFromData","destroy","stateChartRef","current","getContext","Chart","labels","datasets","options","console","log","formatted_date","toLocaleString","fetch","response","ok","json","setState","Error","statusText","loadChart","event","target","updatedSelectedFields","isChecked","checked","dateRangeListAndLabels","handleStateSelection","bind","handleDateRangeSelection","field","e","handleFieldSelection","ref","window","open","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sOAgBIA,E,4GChBSC,G,MAAoB,CAE7B,WACA,WACA,mBACA,UAEA,wBACA,iBACA,wBACA,QAEA,yBACA,kBACA,yBACA,YACA,eAEA,gBACA,uBACA,mBACA,mBACA,6BAGSC,EAAoB,CAC7B,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGSC,EAAgB,CACzBC,KAAK,OACLC,YAAY,EACZC,MAAO,CAAEC,SAAS,GAClBC,SAAU,CAACC,KAAM,QAASC,WAAW,GACrCC,MAAO,CAACF,KAAM,UAAWC,WAAW,GACpCE,OAAQ,CACJC,MAAO,CAAC,CACJN,SAAS,EACTO,WAAY,CACRP,SAAS,EACTQ,YAAa,SAGrBC,MAAO,CAAC,CACJT,SAAS,EACTO,WAAY,CACRP,SAAS,EACTQ,YAAa,aAchBE,EAAS,CAClB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,M,OC7FWC,G,MArCO,SAAC,GAAyE,IAAxEC,EAAuE,EAAvEA,UAAWC,EAA4D,EAA5DA,WAAYC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,cAAmB,EAE7CC,mBAAS,GAFoC,mBAEpFC,EAFoF,KAEnEC,EAFmE,KAYrFC,EAAmB,WACrBD,EAAmB,IAGvB,OAEI,4BAAQE,UAAU,kBAAkBC,KAAMV,EACtCW,SAAWP,EACXQ,aAAcT,EACdU,KAAMP,EACNQ,YAlBkB,WAElBb,EAAWc,OAAS,GACpBR,EAAmBN,EAAWc,QAE9BR,EAAmB,KAcnBS,OAAQR,GAGJP,EAAWgB,KAAK,SAACC,EAAMC,GAAP,OACR,4BAAQV,UAAU,yBAAyBW,QA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","file":"static/js/main.53ad8bd4.chunk.js","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\nimport \"./state-data.css\";\r\n\r\nimport {CHART_OPTIONS, DATA_FIELD_VALUES, STATES} from '../utilities/data-fields';\r\n\r\nimport ShortDropDown from '../dropdown/dropdown.component';\r\n\r\nimport {\r\n    getHistoryByState, \r\n    getChartDataset, \r\n    getDateListFromData\r\n} from '../utilities/data-processing';\r\n\r\n// Necessary to be able to refresh charts\r\n// based on user input.\r\nlet currentLineChart;\r\n\r\nclass StateData extends React.Component {  \r\n\r\n    chartRef = React.createRef();\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        const defaultFields = [];\r\n        defaultFields[\"hospitalizedCurrently\"] = true;\r\n        defaultFields[\"inIcuCurrently\"] = true;\r\n        defaultFields[\"onVentilatorCurrently\"] = true;\r\n        defaultFields[\"death\"] = true;\r\n        \r\n        this.state = {\r\n            selectedState:\"NJ\",\r\n            selectedDateRange:\"30\",\r\n            selectedFields: defaultFields,\r\n            statesHistoryData: null,\r\n            dataRefreshedTimestamp: \"\"\r\n        }\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date);\r\n        let month = '' + (d.getMonth() + 1);\r\n        let day = '' + d.getDate();\r\n        let year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n        return year + month + day;\r\n    }\r\n    \r\n    loadChart() {\r\n\r\n        const {statesHistoryData, selectedState, selectedFields, selectedDateRange} = this.state;\r\n\r\n        var now = new Date();\r\n        now.setDate(now.getDate() - Number(selectedDateRange));\r\n        const dateValue = this.formatDate(now);\r\n        \r\n        //Filter out only fields that the user selected\r\n        const identifiers = Object.keys(selectedFields)\r\n        const fields = identifiers.filter(function(id) {\r\n            return selectedFields[id]\r\n        })\r\n\r\n        const stateData = getHistoryByState(statesHistoryData, selectedState, dateValue); \r\n        const chartDataSet = getChartDataset(stateData, fields);\r\n        const dateList = getDateListFromData(stateData);\r\n        \r\n        // Destroy previous chart if it exists \r\n        if (typeof currentLineChart !== \"undefined\") currentLineChart.destroy();\r\n\r\n        const stateChartRef = this.chartRef.current.getContext(\"2d\");\r\n\r\n        currentLineChart = new Chart(stateChartRef, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: dateList,\r\n                datasets: chartDataSet\r\n            },\r\n            options: CHART_OPTIONS\r\n        });\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        // Load blank chart as placeholder.\r\n\r\n        console.log(\"Fetching Data from https://covidtracking.com/api/v1/states/daily.json.\");\r\n\r\n        const now = new Date();\r\n        const formatted_date = now.toLocaleString();\r\n\r\n        try {\r\n            const response = await fetch('https://covidtracking.com/api/v1/states/daily.json');\r\n            if (response.ok) {\r\n                \r\n                const json = await response.json();\r\n                this.setState({statesHistoryData: json});\r\n                this.setState({dataRefreshedTimestamp: formatted_date});\r\n            }\r\n            else {\r\n                throw Error(response.statusText);\r\n            }\r\n \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.loadChart();\r\n    }\r\n\r\n    handleStateSelection(event) {\r\n        this.setState({selectedState: event.target.value})\r\n    }\r\n\r\n    handleDateRangeSelection(event) {\r\n        this.setState({selectedDateRange: event.target.value})\r\n    }\r\n\r\n    handleFieldSelection(event) {\r\n        \r\n        const updatedSelectedFields = this.state.selectedFields;\r\n        const fieldName = event.target.value;\r\n        const isChecked = event.target.checked;\r\n        updatedSelectedFields[fieldName] = isChecked;\r\n        this.setState({ selectedFields: updatedSelectedFields}); \r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.loadChart();\r\n    }\r\n\r\n    render () {\r\n\r\n        const dateRangeListAndLabels = [];\r\n        dateRangeListAndLabels[\"15\"]= \"Last 15 days\"\r\n        dateRangeListAndLabels[\"30\"]= \"Last 30 days\"\r\n        dateRangeListAndLabels[\"45\"]= \"Last 45 days\";\r\n        dateRangeListAndLabels[\"60\"]= \"Last 60 days\";\r\n\r\n        return (\r\n            <div className=\"state-data-history\">\r\n                <div className=\"page-header\">\r\n                    <div className=\"page-title\">\r\n                        <h2>Covid19 Data Charts for U.S. States</h2>\r\n                    </div>\r\n                </div>\r\n                <div className=\"page-layout\">\r\n                    <div className=\"chart-configuration\">\r\n                        <form>\r\n                            <div className=\"config-field\">Data Loaded:</div>\r\n                            <div>{this.state.dataRefreshedTimestamp}</div>\r\n                            <br/>\r\n                            <div className=\"config-field\">State:</div>\r\n                            <ShortDropDown \r\n                                fieldName=\"states-list\" \r\n                                optionList={STATES} \r\n                                defaultSelected={this.state.selectedState} \r\n                                onChangeEvent={this.handleStateSelection.bind(this)} \r\n                            />\r\n                            <br/><br/>\r\n                            <div className=\"config-field\" >Date Range:</div>\r\n                            <ShortDropDown \r\n                                fieldName=\"date-range-list\" \r\n                                optionList={Object.keys(dateRangeListAndLabels)} \r\n                                labelsList={dateRangeListAndLabels}\r\n                                defaultSelected={this.state.selectedDateRange} \r\n                                onChangeEvent={this.handleDateRangeSelection.bind(this)} />\r\n                            <br/><br/>\r\n                            <div className=\"config-field\">Data Fields:</div>\r\n                            {\r\n                                DATA_FIELD_VALUES.map( field => \r\n                                    <div className=\"field-option\" key={field}>\r\n                                        <input type=\"checkbox\" name=\"field-selection\" \r\n                                            onChange={e => this.handleFieldSelection(e)} \r\n                                            value={field}\r\n                                            checked = {!this.state.selectedFields[field] ? false : true}\r\n                                        />\r\n                                        <label>{field}</label> \r\n                                    </div>\r\n                                )\r\n                            }\r\n                            \r\n                        </form>\r\n                        \r\n                    </div>\r\n                    <div className=\"chart-container\">\r\n                        <div className=\"chart-title\">Data for {this.state.selectedState} last {this.state.selectedDateRange} days</div>\r\n                        <canvas id=\"myChart\" ref={this.chartRef} />\r\n                        <p><b>** Not All States Report All Data</b></p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"page-footer\">\r\n                    <p>This is a visual representation of the data collected by The COVID Tracking Project</p>\r\n                    <p>For more info, visit <span className=\"site-link\" onClick={()=> window.open(\"https://covidtracking.com/\")}>https://covidtracking.com/</span></p>\r\n                    <p>For field definitions, visit <span className=\"site-link\" onClick={()=> window.open(\"https://covidtracking.com/api\")}>https://covidtracking.com/api</span></p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StateData;","export const DATA_FIELD_VALUES = [\r\n    \r\n    \"positive\",\r\n    \"negative\",\r\n    \"totalTestResults\",\r\n    \"pending\",\r\n\r\n    \"hospitalizedCurrently\",\r\n    \"inIcuCurrently\",\r\n    \"onVentilatorCurrently\",\r\n    \"death\",\r\n    \r\n    \"hospitalizedCumulative\",\r\n    \"inIcuCumulative\",\r\n    \"onVentilatorCumulative\",    \r\n    \"recovered\",\r\n    \"hospitalized\",\r\n    \r\n    \"deathIncrease\",\r\n    \"hospitalizedIncrease\",\r\n    \"negativeIncrease\",\r\n    \"positiveIncrease\",\r\n    \"totalTestResultsIncrease\"\r\n]\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    '#138E05',\r\n    '#A15B81',\r\n    '#2E16A6',\r\n    '#146AD4',\r\n    '#A9D422',\r\n    '#18F8BB',\r\n    '#AFC044',\r\n    '#3B9793',\r\n    '#822611',\r\n    '#FB2E76',\r\n    '#A5CA71',\r\n    '#983538',\r\n    '#082BD9',\r\n    '#2E136A',\r\n    '#05BB78',\r\n    '#44A4AD',\r\n    '#28FD7E',\r\n    '#387862'\r\n];\r\n\r\nexport const CHART_OPTIONS = {\r\n    type:\"line\",\r\n    responsive: true,\r\n    title: { display: false},\r\n    tooltips: {mode: 'index', intersect: false},\r\n    hover: {mode: 'nearest', intersect: true},\r\n    scales: {\r\n        xAxes: [{\r\n            display: true,\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Day'\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            display: true,\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Value'\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nexport const DEFAULTS_FIELDS = [\r\n\r\n    \"hospitalizedCurrently\",\r\n    \"inIcuCurrently\",\r\n    \"onVentilatorCurrently\",\r\n    \"death\"\r\n]\r\n\r\nexport const STATES = [\r\n    \"AK\",\r\n    \"AL\",\r\n    \"AR\",\r\n    \"AS\",\r\n    \"AZ\",\r\n    \"CA\",\r\n    \"CO\",\r\n    \"CT\",\r\n    \"DC\",\r\n    \"DE\",\r\n    \"FL\",\r\n    \"GA\",\r\n    \"GU\",\r\n    \"HI\",\r\n    \"IA\",\r\n    \"ID\",\r\n    \"IL\",\r\n    \"IN\",\r\n    \"KS\",\r\n    \"KY\",\r\n    \"LA\",\r\n    \"MA\",\r\n    \"MD\",\r\n    \"ME\",\r\n    \"MI\",\r\n    \"MN\",\r\n    \"MO\",\r\n    \"MP\",\r\n    \"MS\",\r\n    \"MT\",\r\n    \"NC\",\r\n    \"ND\",\r\n    \"NE\",\r\n    \"NH\",\r\n    \"NJ\",\r\n    \"NM\",\r\n    \"NV\",\r\n    \"NY\",\r\n    \"OH\",\r\n    \"OK\",\r\n    \"OR\",\r\n    \"PA\",\r\n    \"PR\",\r\n    \"RI\",\r\n    \"SC\",\r\n    \"SD\",\r\n    \"TN\",\r\n    \"TX\",\r\n    \"UT\",\r\n    \"VA\",\r\n    \"VI\",\r\n    \"VT\",\r\n    \"WA\",\r\n    \"WI\",\r\n    \"WV\",\r\n    \"WY\"\r\n]","import React, {useState} from 'react';\r\n\r\nimport './dropdown.css';\r\n\r\nconst ShortDropDown = ({fieldName, optionList, labelsList, defaultSelected, onChangeEvent}) => {\r\n\r\n    const [listDisplaySize, setListDisplaySize] = useState(1);\r\n    \r\n    const displayLargerList = () => {\r\n\r\n        if (optionList.length < 10)\r\n            setListDisplaySize(optionList.length)\r\n        else\r\n            setListDisplaySize(10);\r\n    }\r\n\r\n    const resetDisplayList = () => {\r\n        setListDisplaySize(0);\r\n    }\r\n    \r\n    return (\r\n\r\n        <select className=\"short-drop-down\" name={fieldName} \r\n            onChange ={onChangeEvent} \r\n            defaultValue={defaultSelected} \r\n            size={listDisplaySize} \r\n            onMouseDown={displayLargerList}\r\n            onBlur={resetDisplayList}\r\n        >\r\n            {\r\n                optionList.map ((item, index) => \r\n                        <option className=\"short-drop-down-option\" onClick={resetDisplayList} key={item} value={item} >\r\n                            {!labelsList ? item : labelsList[item] }\r\n                        </option>\r\n                )\r\n            }\r\n        </select>\r\n    )\r\n\r\n}\r\n\r\nexport default ShortDropDown;","//import STATE_HISTORY_DATA from './state-history-data.json';\r\n\r\nimport {DATA_FIELD_COLORS} from './data-fields';\r\n\r\nexport const getDateListFromData = (stateData) => {\r\n\r\n    const datesList = stateData.map(item => item.date)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var month = Number(dateString.substring(4,6));\r\n        var day = Number(dateString.substring(6,8));\r\n\r\n        newDateList.push(month + \"/\" + day);\r\n    });\r\n\r\n    return newDateList;\r\n}\r\n\r\nexport const getHistoryByState = (stateHistoryData, state, startFromDate) => {\r\n\r\n    return stateHistoryData\r\n        .filter(stateData => stateData.state === state && stateData.date >= startFromDate )\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n    \r\n}    \r\n\r\n\r\nexport const getChartDataset = (stateData, fieldNames) => {\r\n\r\n    const fieldDatasets = [];\r\n\r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        fieldDatasets.push({\r\n            label: fieldName,\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            data: []\r\n        })\r\n    })\r\n\r\n    stateData.forEach(dayRecord => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = fieldDatasets.find((data => data.label === fieldName))    \r\n            fieldData.data.push(!dayRecord[fieldName] ? 0 : dayRecord[fieldName]);\r\n        })\r\n    });\r\n\r\n    return fieldDatasets;\r\n}\r\n","import React from 'react';\n\nimport StateData from './components/state-data/state-data.component';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <StateData/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}