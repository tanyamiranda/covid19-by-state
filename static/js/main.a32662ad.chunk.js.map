{"version":3,"sources":["serviceWorker.js","utilities/data-fields.js","utilities/population-estimates.js","utilities/data-processing.js","redux/chart-config/chart-config.types.js","components/config-section/config-section.component.jsx","components/chart-config/chart-config.component.jsx","redux/chart-config/chart-config.actions.js","components/chart-display/chart-display.component.jsx","components/chart-container/chart-container.component.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","components/overall-stats/overall-stats.component.jsx","components/dashboard/dashboard.component.jsx","App.js","redux/chart-config/chart-config.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DATE_RANGES","15","30","45","60","CHART_OPTIONS","responsive","aspectRatio","maintainAspectRatio","title","display","tooltips","mode","intersect","hover","legend","position","labels","boxWidth","boxHeight","elements","point","radius","layout","padding","left","right","top","bottom","scales","xAxes","ticks","callback","dataLabel","index","scaleLabel","yAxes","DATA_FIELD_COLORS","US_STATES_DATA","USA","AK","AL","AR","AZ","CA","CO","CT","DC","DE","FL","GA","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VA","VT","WA","WI","WV","WY","DATA_FIELD_GROUPS","increase","hospital","testing","DEFAULT_DATA_FIELD","STATE_POPULATION","getStatesInfo","stateInfo","stateNames","forEach","data","name","website","covid19Site","twitter","notes","getFormattedDateForFiltering","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","getFreshData","a","historyData","countryData","fetch","stateInfoRes","ok","json","Error","statusText","historicalDataRes","statesCurrentDataRes","dataQualityGrade","totalDeath","death","totalPositive","positive","totalTestResults","population","POPULATION_ESTIMATES","undefined","estimatedPopulation","countryCurrentDataRes","countryDataRes","statesHistoryData","stateInformation","countryHistoryData","ChartConfigTypes","SET_STATE_SELECTION","SET_DATE_RANGE_SELECTION","SET_FIELD_SELECTION","SET_COVID19_DATA","ConfigSection","fieldName","fieldDefaultValue","fieldClickEvent","fieldDataMap","keys","Object","className","defaultValue","onChange","map","item","key","value","connect","selectedState","chartConfig","selectedDateRange","dispatch","setStateSelection","userSelectedState","type","payload","setDateRangeSelection","userSelectedDateRange","setFieldSelection","userSelectedFields","fieldGroupsMap","groupName","event","target","currentLineChart","ChartDisplay","chartType","chartOptions","chartLabels","chartDataSet","chartContainer","useRef","useState","chartInstance","setChartInstance","useEffect","current","options","datasets","destroy","Chart","id","ref","selectedFields","now","yesterday","setDate","Number","startDate","endDate","dataSet","filter","sort","b","getCountryHistoryData","stateHistoryData","stateData","getHistoryByState","fieldNames","fieldDatasets","push","label","fill","backgroundColor","borderColor","borderWidth","dayRecord","find","getChartDataset","dateList","datesList","self","indexOf","newDateList","dateString","String","substring","getDateListFromData","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","getPercentage","partialNum","totalNum","toFixed","percentPositive","percentTested","percentDeath","onClick","open","Intl","NumberFormat","useGrouping","format","dataRefreshedTimestamp","setCOVID19Data","freshData","loadData","App","INITIAL_STATE","chartConfigReducer","action","toLocaleString","combineReducers","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a32662ad.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const DATE_RANGES = {\r\n    15: \"Last 15 days\",\r\n    30: \"Last 30 days\",\r\n    45: \"Last 45 days\",\r\n    60: \"Last 60 days\"\r\n}\r\n\r\nexport const CHART_OPTIONS = {\r\n    responsive: true,\r\n    aspectRatio: 1,\r\n    maintainAspectRatio: false,\r\n    title: { display: false},\r\n    tooltips: {mode: 'index', intersect: false},\r\n    hover: {mode: 'nearest', intersect: true},\r\n    legend: {position:'top', labels: {boxWidth:5, boxHeight:1}},\r\n    elements: {\r\n        point:{\r\n            radius: 0\r\n        }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0\r\n        }},\r\n    scales: {\r\n        xAxes: [{\r\n            display: true,\r\n            ticks: {\r\n                callback: function(dataLabel, index) {\r\n                    // Hide the label of every 2nd dataset. return null to hide the grid line too\r\n                    return index % 2 === 0 ? dataLabel : '';\r\n                }\r\n            },\r\n            scaleLabel: {\r\n                display: true\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            display: true,\r\n            padding:0,\r\n            scaleLabel: {\r\n                display: false\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    '#138E05',\r\n    '#A15B81',\r\n    '#2E16A6',\r\n    '#146AD4',\r\n    '#A9D422',\r\n    '#18F8BB',\r\n    '#AFC044',\r\n    '#3B9793',\r\n    '#822611',\r\n    '#FB2E76',\r\n    '#A5CA71',\r\n    '#983538',\r\n    '#082BD9',\r\n    '#2E136A',\r\n    '#05BB78',\r\n    '#44A4AD',\r\n    '#28FD7E',\r\n    '#387862'\r\n];\r\n\r\nexport const USA_IDENTIFIER = \"USA\";\r\n\r\nexport const US_STATES_DATA = {\r\n    USA:\"United States\",\r\n    AK:\"Alaska\",\r\n    AL:\"Alabama\",\r\n    AR:\"Arkansas\",\r\n    AZ:\"Arizona\",\r\n    CA:\"California\", \r\n    CO:\"Colorado\", \r\n    CT:\"Connecticut\", \r\n    DC:\"District Of Columbia\",\r\n    DE:\"Delaware\", \r\n    FL:\"Florida\", \r\n    GA:\"Georgia\",\r\n    HI:\"Hawaii\", \r\n    IA:\"Iowa\", \r\n    ID:\"Idaho\", \r\n    IL:\"Illinois\", \r\n    IN:\"Indiana\", \r\n    KS:\"Kansas\", \r\n    KY:\"Kentucky\", \r\n    LA:\"Louisiana\", \r\n    MA:\"Massachusetts\",\r\n    MD:\"Maryland\", \r\n    ME:\"Maine\", \r\n    MI:\"Michigan\",\r\n    MN:\"Minnesota\",\r\n    MO:\"Missouri\", \r\n    MS:\"Mississippi\", \r\n    MT:\"Montana\", \r\n    NC:\"North Carolina\", \r\n    ND:\"North Dakota\", \r\n    NE:\"Nebraska\", \r\n    NH:\"New Hampshire\", \r\n    NJ:\"New Jersey\", \r\n    NM:\"New Mexico\", \r\n    NV:\"Nevada\", \r\n    NY:\"New York\", \r\n    OH:\"Ohio\", \r\n    OK:\"Oklahoma\", \r\n    OR:\"Oregon\", \r\n    PA:\"Pennsylvania\", \r\n    PR:\"Puerto Rico\", \r\n    RI:\"Rhode Island\",\r\n    SC:\"South Carolina\", \r\n    SD:\"South Dakota\", \r\n    TN:\"Tennessee\", \r\n    TX:\"Texas\", \r\n    UT:\"Utah\", \r\n    VA:\"Virginia\",\r\n    VT:\"Vermont\", \r\n    WA:\"Washington\", \r\n    WI:\"Wisconsin\", \r\n    WV:\"West Virginia\", \r\n    WY:\"Wyoming\"\r\n}\r\n\r\n\r\nexport const DATA_FIELD_GROUPS = {\r\n    \r\n    increase: [\r\n        \"deathIncrease\",\r\n        \"hospitalizedIncrease\",\r\n        \"positiveIncrease\"\r\n    ],\r\n    hospital: [\r\n        \"hospitalizedCurrently\",\r\n        \"inIcuCurrently\",\r\n        \"onVentilatorCurrently\"\r\n    ],\r\n    testing:[\r\n        \"positive\",\r\n        \"negative\",\r\n        \"pending\",\r\n        \"totalTestResults\"\r\n    ]\r\n};\r\n\r\nexport const DEFAULT_DATA_FIELD = [\r\n    \"deathIncrease\",\r\n    \"hospitalizedIncrease\",\r\n    \"positiveIncrease\"\r\n]\r\n\r\nexport const  STATE_INFO_JSON_FIELDS = [\r\n    \"dataQualityGrade\",\r\n    \"positive\",\r\n    \"death\"\r\n]","/* \r\nThis is census estimates for July 2019. \r\nStripped from http://www2.census.gov/programs-surveys/popest/datasets/2010-2019/national/totals/nst-est2019-alldata.csv\r\n\r\nSince this data does not change, no need to fetch it every time.\r\n*/\r\n\r\nconst STATE_POPULATION = [];\r\n\r\nSTATE_POPULATION[\"USA\"] = 328239523;\r\nSTATE_POPULATION[\"Northeast Region\"] = 55982803;\r\nSTATE_POPULATION[\"Midwest Region\"] = 68329004;\r\nSTATE_POPULATION[\"South Region\"] = 125580448;\r\nSTATE_POPULATION[\"West Region\"] = 78347268;\r\nSTATE_POPULATION[\"Alabama\"] = 4903185;\r\nSTATE_POPULATION[\"Alaska\"] = 731545;\r\nSTATE_POPULATION[\"Arizona\"] = 7278717;\r\nSTATE_POPULATION[\"Arkansas\"] = 3017804;\r\nSTATE_POPULATION[\"California\"] = 39512223;\r\nSTATE_POPULATION[\"Colorado\"] = 5758736;\r\nSTATE_POPULATION[\"Connecticut\"] = 3565287;\r\nSTATE_POPULATION[\"Delaware\"] = 973764;\r\nSTATE_POPULATION[\"District of Columbia\"] = 705749;\r\nSTATE_POPULATION[\"Florida\"] = 21477737;\r\nSTATE_POPULATION[\"Georgia\"] = 10617423;\r\nSTATE_POPULATION[\"Hawaii\"] = 1415872;\r\nSTATE_POPULATION[\"Idaho\"] = 1787065;\r\nSTATE_POPULATION[\"Illinois\"] = 12671821;\r\nSTATE_POPULATION[\"Indiana\"] = 6732219;\r\nSTATE_POPULATION[\"Iowa\"] = 3155070;\r\nSTATE_POPULATION[\"Kansas\"] = 2913314;\r\nSTATE_POPULATION[\"Kentucky\"] = 4467673;\r\nSTATE_POPULATION[\"Louisiana\"] = 4648794;\r\nSTATE_POPULATION[\"Maine\"] = 1344212;\r\nSTATE_POPULATION[\"Maryland\"] = 6045680;\r\nSTATE_POPULATION[\"Massachusetts\"] = 6892503;\r\nSTATE_POPULATION[\"Michigan\"] = 9986857;\r\nSTATE_POPULATION[\"Minnesota\"] = 5639632;\r\nSTATE_POPULATION[\"Mississippi\"] = 2976149;\r\nSTATE_POPULATION[\"Missouri\"] = 6137428;\r\nSTATE_POPULATION[\"Montana\"] = 1068778;\r\nSTATE_POPULATION[\"Nebraska\"] = 1934408;\r\nSTATE_POPULATION[\"Nevada\"] = 3080156;\r\nSTATE_POPULATION[\"New Hampshire\"] = 1359711;\r\nSTATE_POPULATION[\"New Jersey\"] = 8882190;\r\nSTATE_POPULATION[\"New Mexico\"] = 2096829;\r\nSTATE_POPULATION[\"New York\"] = 19453561;\r\nSTATE_POPULATION[\"North Carolina\"] = 10488084;\r\nSTATE_POPULATION[\"North Dakota\"] = 762062;\r\nSTATE_POPULATION[\"Ohio\"] = 11689100;\r\nSTATE_POPULATION[\"Oklahoma\"] = 3956971;\r\nSTATE_POPULATION[\"Oregon\"] = 4217737;\r\nSTATE_POPULATION[\"Pennsylvania\"] = 12801989;\r\nSTATE_POPULATION[\"Rhode Island\"] = 1059361;\r\nSTATE_POPULATION[\"South Carolina\"] = 5148714;\r\nSTATE_POPULATION[\"South Dakota\"] = 884659;\r\nSTATE_POPULATION[\"Tennessee\"] = 6829174;\r\nSTATE_POPULATION[\"Texas\"] = 28995881;\r\nSTATE_POPULATION[\"Utah\"] = 3205958;\r\nSTATE_POPULATION[\"Vermont\"] = 623989;\r\nSTATE_POPULATION[\"Virginia\"] = 8535519;\r\nSTATE_POPULATION[\"Washington\"] = 7614893;\r\nSTATE_POPULATION[\"West Virginia\"] = 1792147;\r\nSTATE_POPULATION[\"Wisconsin\"] = 5822434;\r\nSTATE_POPULATION[\"Wyoming\"] = 578759;\r\nSTATE_POPULATION[\"Puerto Rico\"] = 3193694;\r\nSTATE_POPULATION[\"District Of Columbia\"] = 705749; \r\n\r\nexport default STATE_POPULATION;","import {DATA_FIELD_COLORS,USA_IDENTIFIER} from './data-fields';\r\nimport POPULATION_ESTIMATES from './population-estimates';\r\n\r\nexport const getDateListFromData = (stateData) => {\r\n\r\n    const datesList = stateData.map(item => item.date)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var month = Number(dateString.substring(4,6));\r\n        var day = Number(dateString.substring(6,8));\r\n\r\n        newDateList.push(month + \"/\" + day);\r\n    });\r\n\r\n    return newDateList;\r\n}\r\n\r\nexport const getHistoryByState = (stateHistoryData, state, startDate, endDate) => {\r\n    \r\n    return stateHistoryData\r\n        .filter(stateData => stateData.state === state && stateData.date >= startDate && stateData.date <= endDate)\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n    \r\n}    \r\n\r\nexport const getChartDataset = (stateData, fieldNames) => {\r\n\r\n    const fieldDatasets = [];\r\n\r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        fieldDatasets.push({\r\n            label: fieldName,\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            borderWidth: 1,\r\n            data: []\r\n        })\r\n    })\r\n\r\n    stateData.forEach(dayRecord => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = fieldDatasets.find((data => data.label === fieldName))    \r\n            fieldData.data.push(!dayRecord[fieldName] ? 0 : dayRecord[fieldName]);\r\n        })\r\n    });\r\n\r\n    return fieldDatasets;\r\n}\r\n\r\n\r\nexport const getStatesInfo = (stateInfo) => {\r\n    \r\n    const stateNames = []; \r\n\r\n    stateInfo.forEach(data => {\r\n        stateNames[data.state] = {\r\n            name: data.name,\r\n            website: data.covid19Site,\r\n            twitter: data.twitter,\r\n            notes: data.notes\r\n        }\r\n    })\r\n    \r\n    return stateNames;\r\n}\r\n\r\n\r\nexport const getFormattedDateForFiltering = (date) => {\r\n    var d = new Date(date);\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n    return year + month + day;\r\n}\r\n\r\nexport const getFreshData = async() => {\r\n    \r\n    //console.log(\"Fetching Data from https://covidtracking.com/...\");\r\n\r\n    let historyData = null;\r\n    let stateInfo = null;\r\n    let countryData = null;\r\n\r\n    try {\r\n\r\n        const stateInfoRes = await fetch('https://covidtracking.com/api/v1/states/info.json');\r\n        if (stateInfoRes.ok) {\r\n            \r\n            const json = await stateInfoRes.json();\r\n            stateInfo = getStatesInfo(json);\r\n        }\r\n        else {\r\n            throw Error(stateInfoRes.statusText);\r\n        }\r\n\r\n        const historicalDataRes = await fetch('https://covidtracking.com/api/v1/states/daily.json');\r\n        if (historicalDataRes.ok) {\r\n            \r\n            const json = await historicalDataRes.json();\r\n            historyData = json;\r\n        }\r\n        else {\r\n            throw Error(historicalDataRes.statusText);\r\n        }\r\n\r\n        const statesCurrentDataRes = await fetch('https://covidtracking.com/api/v1/states/current.json');\r\n        if (statesCurrentDataRes.ok) {\r\n            \r\n            const json = await statesCurrentDataRes.json();\r\n            json.forEach(data => {\r\n                stateInfo[data.state].dataQualityGrade = data.dataQualityGrade;\r\n                stateInfo[data.state].totalDeath = data.death;\r\n                stateInfo[data.state].totalPositive = data.positive;\r\n                stateInfo[data.state].totalTestResults = data.totalTestResults;\r\n\r\n                let population = POPULATION_ESTIMATES[stateInfo[data.state].name];\r\n                if (population === undefined)\r\n                    population=-1;\r\n\r\n                stateInfo[data.state].estimatedPopulation = population;\r\n            });\r\n        }\r\n        else {\r\n            throw Error(statesCurrentDataRes.statusText);\r\n        }\r\n\r\n\r\n        const countryCurrentDataRes = await fetch('https://covidtracking.com/api/v1/us/current.json');\r\n        if (countryCurrentDataRes.ok) {\r\n            \r\n            const json = await countryCurrentDataRes.json();\r\n            \r\n            json.forEach(data => {    \r\n                stateInfo[USA_IDENTIFIER] = {\r\n                    estimatedPopulation: POPULATION_ESTIMATES[USA_IDENTIFIER],\r\n                    totalPositive: data.positive,\r\n                    totalDeath: data.death,\r\n                    totalTestResults: data.totalTestResults,\r\n                    name: \"United States\",\r\n                    dataQualityGrade: \"N/A\",\r\n                    twitter:\"https://twitter.com/CDCgov\",\r\n                    website:\"https://www.cdc.gov/coronavirus/2019-ncov/index.html\"\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            throw Error(countryCurrentDataRes.statusText);\r\n        }\r\n\r\n        const countryDataRes = await fetch('https://covidtracking.com/api/v1/us/daily.json');\r\n        if (countryDataRes.ok) {\r\n            \r\n            const json = await countryDataRes.json();\r\n            countryData = json;\r\n        }\r\n        else {\r\n            throw Error(countryDataRes.statusText);\r\n        }\r\n\r\n        return {\r\n            statesHistoryData: historyData,\r\n            stateInformation: stateInfo,\r\n            countryHistoryData: countryData\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const getCountryHistoryData = (countryHistoryData, startDate, endDate) => {\r\n\r\n    return countryHistoryData\r\n        .filter(data => data.date >= startDate && data.date <= endDate )\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n    \r\n}\r\n\r\n","const ChartConfigTypes = {\r\n    SET_STATE_SELECTION : \"SET_STATE_SELECTION\",\r\n    SET_DATE_RANGE_SELECTION : \"SET_DATE_RANGE_SELECTION\",\r\n    SET_FIELD_SELECTION : \"SET_FIELD_SELECTION\",\r\n\r\n    SET_COVID19_DATA : \"SET_COVID19_DATA\"\r\n\r\n};\r\n\r\nexport default ChartConfigTypes;","import React from 'react';\r\n\r\nimport './config-section.css';\r\n\r\nconst ConfigSection = ({fieldName, fieldDefaultValue, fieldClickEvent, fieldDataMap}) => {\r\n\r\n    const keys = Object.keys(fieldDataMap);\r\n\r\n    return (\r\n        <span className=\"config-section\">\r\n            <select name={fieldName} defaultValue={fieldDefaultValue}  onChange={fieldClickEvent}>\r\n                {keys.map ((item) => \r\n                    <option key={item} value={item} >{fieldDataMap[item]}</option>\r\n                )}\r\n            </select>\r\n        </span>\r\n    )\r\n\r\n}\r\n\r\nexport default ConfigSection;","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './chart-config.css';\r\nimport ConfigSection from '../config-section/config-section.component';\r\nimport {DATE_RANGES,US_STATES_DATA,DATA_FIELD_GROUPS} from '../../utilities/data-fields';\r\nimport {setDateRangeSelection, setStateSelection, setFieldSelection} from '../../redux/chart-config/chart-config.actions';\r\n\r\nconst ChartConfiguration = ({selectedState, selectedDateRange, setStateSelection, setDateRangeSelection, setFieldSelection}) => {\r\n\r\n    //console.log(\"ChartConfiguration()...\");\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n\r\n    const fieldGroupsMap = {};\r\n    const fieldGroups = Object.keys(DATA_FIELD_GROUPS);\r\n    fieldGroups.forEach(groupName => {\r\n        fieldGroupsMap[groupName] = groupName + \" data set\";\r\n    });\r\n\r\n    const handleStateSelection = (event) => {\r\n        setStateSelection(event.target.value);\r\n    }\r\n    const handleDateRangeSelection = (event) => {\r\n        setDateRangeSelection(event.target.value);\r\n    }\r\n    const handleGroupSelection = (event) => {  \r\n        setFieldSelection(DATA_FIELD_GROUPS[event.target.value]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-configuration dashboard-component\">\r\n            <div className=\"top-section\">\r\n                <ConfigSection \r\n                    fieldName=\"stateSelection\"\r\n                    fieldDefaultValue = {selectedState}\r\n                    fieldClickEvent= {handleStateSelection}\r\n                    fieldDataMap={US_STATES_DATA}\r\n                />\r\n                <ConfigSection \r\n                    fieldName=\"dateRangeSelection\"\r\n                    fieldDefaultValue = {selectedDateRange}\r\n                    fieldClickEvent= {handleDateRangeSelection}\r\n                    fieldDataMap={DATE_RANGES}\r\n                />\r\n                <ConfigSection \r\n                    fieldName=\"datasetSelection\"\r\n                    fieldDefaultValue = \"\"\r\n                    fieldClickEvent= {handleGroupSelection}\r\n                    fieldDataMap={fieldGroupsMap}\r\n                />\r\n            </div>            \r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setStateSelection: (userSelectedState) => dispatch(setStateSelection(userSelectedState)),\r\n    setDateRangeSelection: (userSelectedDateRange) => dispatch(setDateRangeSelection(userSelectedDateRange)),\r\n    setFieldSelection: (userSelectedFields) => dispatch(setFieldSelection(userSelectedFields))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChartConfiguration);","import ChartConfigTypes from './chart-config.types';\r\n\r\nexport const setStateSelection = (stateSelection) => ({\r\n    type : ChartConfigTypes.SET_STATE_SELECTION,\r\n    payload: stateSelection\r\n});\r\n\r\nexport const setDateRangeSelection = (dateRangeSelection) => ({\r\n    type : ChartConfigTypes.SET_DATE_RANGE_SELECTION,\r\n    payload: dateRangeSelection\r\n});\r\n\r\nexport const setFieldSelection = (fieldSelection) => ({\r\n    type : ChartConfigTypes.SET_FIELD_SELECTION,\r\n    payload: fieldSelection\r\n});\r\n\r\nexport const setCOVID19Data = (data) => ({\r\n    type : ChartConfigTypes.SET_COVID19_DATA,\r\n    payload: data\r\n});\r\n\r\n\r\n\r\n","\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nimport './chart-display.css';\r\n\r\n// Necessary to be able to clear previous charts\r\nlet currentLineChart;\r\n\r\nconst ChartDisplay = ({chartType, chartOptions, chartLabels, chartDataSet}) => {\r\n    const chartContainer = useRef(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if (chartContainer && chartContainer.current) {\r\n\r\n            //console.log(\"loading chart...\");\r\n\r\n            const chartConfig = {\r\n                type: chartType,\r\n                options: chartOptions,\r\n                data: {\r\n                    labels: chartLabels,\r\n                    datasets: chartDataSet\r\n                }            \r\n            }\r\n\r\n            // Destroy previous chart if it exists \r\n            if (typeof currentLineChart !== \"undefined\") currentLineChart.destroy();\r\n\r\n            currentLineChart = new Chart(chartContainer.current, chartConfig);\r\n            setChartInstance(currentLineChart);\r\n            \r\n        }\r\n    }, [chartContainer, chartType, chartOptions, chartLabels, chartDataSet]);\r\n    \r\n    return (\r\n        <div className=\"chart-display\">\r\n            <canvas id={!chartInstance ? \"0\" : \"chart-js-display\"} ref={chartContainer} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDisplay;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './chart-container.css';\r\n\r\nimport {US_STATES_DATA, CHART_OPTIONS, USA_IDENTIFIER} from '../../utilities/data-fields';\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nimport {\r\n    getHistoryByState, \r\n    getChartDataset, \r\n    getDateListFromData,\r\n    getFormattedDateForFiltering,\r\n    getCountryHistoryData\r\n} from '../../utilities/data-processing';\r\n\r\nconst ChartContainer = ({countryHistoryData, statesHistoryData, selectedState, selectedFields, selectedDateRange}) => {  \r\n        \r\n    if (!statesHistoryData)\r\n        return;\r\n\r\n    //console.log(\"StateHistoryChart...\");\r\n    //console.log(\"stateInformation=\",stateInformation);\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    const now = new Date();\r\n    const yesterday = new Date();\r\n    now.setDate(now.getDate() - Number(selectedDateRange));\r\n    yesterday.setDate(yesterday.getDate() - 1);\r\n    const startDate = getFormattedDateForFiltering(now);\r\n    const endDate = getFormattedDateForFiltering(yesterday);\r\n\r\n    let dataSet = null;\r\n\r\n    if (selectedState === USA_IDENTIFIER) \r\n        dataSet = getCountryHistoryData(countryHistoryData, startDate, endDate);\r\n    else\r\n        dataSet = getHistoryByState(statesHistoryData, selectedState, startDate, endDate); \r\n\r\n    //const stateData = getHistoryByState(statesHistoryData, selectedState, startDate, endDate); \r\n    const chartDataSet = getChartDataset(dataSet, selectedFields);\r\n    const dateList = getDateListFromData(dataSet);\r\n\r\n    return (\r\n        <div className=\"chart-container dashboard-component\">\r\n            <div className=\"chart-header\">Data for {US_STATES_DATA[selectedState]} last {selectedDateRange} days</div>\r\n            <ChartDisplay \r\n            chartType=\"line\"\r\n            chartOptions = {CHART_OPTIONS}\r\n            chartLabels = {dateList} \r\n            chartDataSet = {chartDataSet}\r\n            />                  \r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    countryHistoryData: state.chartConfig.countryHistoryData,\r\n    statesHistoryData: state.chartConfig.statesHistoryData,\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange, \r\n    selectedFields: state.chartConfig.selectedFields\r\n});\r\n\r\nexport default connect(mapStateToProps)(ChartContainer);","import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport {SpinnerContainer, SpinnerOverlay} from './spinner.styles.jsx';\r\n\r\nconst Spinner = () => (\r\n    <SpinnerOverlay>\r\n        <SpinnerContainer/>\r\n    </SpinnerOverlay>\r\n);\r\n\r\nexport default Spinner;\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './overall-stats.css';\r\n\r\nimport {USA_IDENTIFIER} from '../../utilities/data-fields';\r\n\r\nconst OverallStats = ({selectedState, stateInformation}) => {\r\n\r\n    const getPercentage = (partialNum, totalNum) => {\r\n        var percent = ((partialNum / totalNum) * 100).toFixed(2);\r\n        return percent + \"%\";\r\n    }\r\n\r\n    let stateInfo = stateInformation[selectedState];\r\n        \r\n    const percentPositive =  getPercentage(stateInfo.totalPositive,stateInfo.estimatedPopulation);\r\n    const percentTested =  getPercentage(stateInfo.totalTestResults,stateInfo.estimatedPopulation);\r\n    const percentDeath =  getPercentage(stateInfo.totalDeath,stateInfo.estimatedPopulation);\r\n    \r\n    return (\r\n        <div className=\"overall-stats dashboard-component\">\r\n            <div className=\"stats-title\">{stateInfo.name} Overview</div>\r\n            <div className=\"links\"> \r\n                <span className=\"site-link\" onClick={()=> window.open(stateInfo.website)}>COVID19 Website</span>&nbsp;&nbsp;&bull;&nbsp;&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open('https://www.twitter.com/' + stateInfo.twitter)}>Twitter</span>\r\n            </div>\r\n            <div>Estimated Population : <span className=\"estimate\">{Intl.NumberFormat('en-US', {useGrouping: true}).format(stateInfo.estimatedPopulation)}</span></div>\r\n            <div className=\"totals-data\">\r\n                <div className=\"data-group\">\r\n                    <div>Total Tested:</div>\r\n                    <div className=\"data-number\">{Intl.NumberFormat('en-US', {useGrouping: true}).format(stateInfo.totalTestResults)}</div>\r\n                    <div className=\"data-number percent\">{percentTested} ++</div>\r\n                </div>\r\n                <div className=\"data-group\">\r\n                    <div>Total Positive:</div>\r\n                    <div className=\"data-number\">{Intl.NumberFormat('en-US', {useGrouping: true}).format(stateInfo.totalPositive)}</div>\r\n                    <div className=\"data-number percent\">{percentPositive} ++</div>\r\n                </div>\r\n                <div className=\"data-group\">\r\n                    <div>Total Deaths:</div>\r\n                    <div className=\"data-number\">{Intl.NumberFormat('en-US', {useGrouping: true}).format(stateInfo.totalDeath)}</div>\r\n                    <div className=\"data-number percent\">{percentDeath} ++</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"estimate\">++ % of estimated population</div>\r\n\r\n            { selectedState === USA_IDENTIFIER ? null : (\r\n            <div className=\"state-grade\"> \r\n                <span>Data Quality Grade for {stateInfo.name}:  </span><span><b>{stateInfo.dataQualityGrade} **</b></span>\r\n            </div>\r\n            )}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation\r\n});\r\n\r\nexport default connect(mapStateToProps)(OverallStats);","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport \"./dashboard.css\";\r\n\r\nimport {getFreshData} from '../../utilities/data-processing';\r\nimport {setCOVID19Data} from '../../redux/chart-config/chart-config.actions';\r\nimport ChartConfiguration from '../chart-config/chart-config.component';\r\nimport ChartContainer from '../chart-container/chart-container.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport OverallStats from '../overall-stats/overall-stats.component';\r\n\r\nconst Covid19UsDashboard =({setCOVID19Data, dataRefreshedTimestamp, selectedState, selectedDateRange,selectedFields}) => {  \r\n\r\n    useEffect(() => {\r\n\r\n        //console.log(\"useEffect()...\");\r\n        async function loadData() {\r\n            try {   \r\n                if (!dataRefreshedTimestamp) {\r\n                    //console.log(\"retrievingData()...\");\r\n                    const freshData = await getFreshData();\r\n\r\n                    const data = {\r\n                        statesHistoryData: freshData.statesHistoryData,\r\n                        stateInformation: freshData.stateInformation,\r\n                        countryHistoryData: freshData.countryHistoryData\r\n                    };\r\n                    setCOVID19Data(data);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        loadData();\r\n\r\n    },[setCOVID19Data,dataRefreshedTimestamp]);\r\n    \r\n    //console.log(\"dataRefreshedTimestamp=\",dataRefreshedTimestamp);\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    return (   \r\n\r\n        <div className=\"dashboard\">\r\n            <div className=\"page-title\">Covid19 Data Charts for U.S. States</div>\r\n            { !dataRefreshedTimestamp ? ( \r\n                <Spinner />\r\n            ) : (\r\n                <div className=\"page-layout\">\r\n                    <ChartConfiguration />\r\n                    <ChartContainer />\r\n                    <OverallStats/>\r\n                </div>\r\n            )}\r\n            <div className=\"page-footer\">\r\n                <b>**</b> Data Quality Grade for each state is determined by The COVID Tracking Project<br/>\r\n                ~ ~ ~<br/>\r\n                Data collected by <span className=\"footer-site-link\" onClick={()=> window.open(\"https://covidtracking.com/\")}>The COVID Tracking Project</span><br/>\r\n                ~ ~ ~<br/>\r\n                Population Estimates obtained from <span className=\"footer-site-link\" onClick={()=> window.open(\"https://www.census.gov/programs-surveys/popest.html\")}>U.S. Census Bureau</span><br/>\r\n                ~ ~ ~<br/>\r\n                Site built by Tanya Miranda<br/>tanya.miranda@gmail.com\r\n            </div>\r\n        </div>\r\n    \r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    dataRefreshedTimestamp: state.chartConfig.dataRefreshedTimestamp,\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange, \r\n    selectedFields: state.chartConfig.selectedFields\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCOVID19Data: (data) => dispatch(setCOVID19Data(data))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Covid19UsDashboard);","import React from 'react';\n\nimport Covid19UsDashboard from './components/dashboard/dashboard.component';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Covid19UsDashboard/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import ChartConfigTypes from './chart-config.types';\r\nimport {DEFAULT_DATA_FIELD, USA_IDENTIFIER} from '../../utilities/data-fields';\r\n\r\nconst INITIAL_STATE = {\r\n    statesHistoryData: null,\r\n    stateInformation: null,\r\n    countryHistoryData: null,\r\n    dataRefreshedTimestamp: null,\r\n    selectedState: null,\r\n    selectedDateRange: null,   \r\n    selectedFields: []    \r\n};\r\n\r\nconst chartConfigReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ChartConfigTypes.SET_COVID19_DATA: \r\n            return {\r\n                selectedState: USA_IDENTIFIER,\r\n                selectedDateRange: \"60\",   \r\n                selectedFields: DEFAULT_DATA_FIELD,    \r\n                statesHistoryData: action.payload.statesHistoryData,\r\n                stateInformation: action.payload.stateInformation,\r\n                countryHistoryData: action.payload.countryHistoryData,\r\n                dataRefreshedTimestamp: (new Date()).toLocaleString()\r\n            }\r\n        case ChartConfigTypes.SET_STATE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedState: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_FIELD_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedFields: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_DATE_RANGE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedDateRange: action.payload\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n        \r\n    }\r\n}\r\n\r\nexport default chartConfigReducer;","import {combineReducers} from 'redux';\r\n\r\nimport chartConfigReducer from './chart-config/chart-config.reducer';\r\n\r\nexport default combineReducers({\r\n    chartConfig: chartConfigReducer\r\n});\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewareObjects = [];\r\n\r\n//Only use logger in development environement\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewareObjects.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewareObjects));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}