{"version":3,"sources":["components/chart-display/chart-display.component.jsx","components/utilities/data-fields.js","components/dropdown/dropdown.component.jsx","components/chart-config/chart-config.component.jsx","components/utilities/data-processing.js","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","components/mobile-message/mobile-message.component.jsx","components/state-data/state-data.component.jsx","App.js","serviceWorker.js","index.js"],"names":["currentLineChart","DATE_RANGES","15","30","45","60","DATA_FIELD_COLORS","DEFAULT_SELECTED_DATA_FIELDS","US_STATES_DATA","AK","AL","AR","AS","AZ","CA","CO","CT","DC","DE","FL","GA","GU","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MP","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VA","VI","VT","WA","WI","WV","WY","DATA_FIELD_GROUPS","testing","patient","cumulative","increase","ShortDropDown","fieldName","optionList","labelsList","defaultSelected","onChangeEvent","useState","listDisplaySize","setListDisplaySize","resetDisplayList","className","name","onChange","defaultValue","size","onMouseDown","length","onBlur","map","item","index","onClick","key","value","ChartConfiguration","selectedState","selectedDateRange","selectedFields","stateSelectionHandler","dateSelectionHander","fieldSelectionHandler","fieldGroups","Object","keys","group","field","type","checked","getStatesInfo","stateInfo","stateNames","forEach","data","state","website","covid19Site","twitter","notes","getFreshData","a","historyData","fetch","stateInfoRes","ok","json","Error","statusText","historicalDataRes","statesCurrentDataRes","grade","dataQualityGrade","statesHistoryData","stateInformation","console","log","CHART_OPTIONS","responsive","title","display","tooltips","mode","intersect","hover","scales","xAxes","scaleLabel","labelString","yAxes","ChartDisplay","chartRef","React","createRef","this","props","now","Date","setDate","getDate","Number","startFromDate","dateValue","date","d","month","getMonth","day","year","getFullYear","getFormattedDateForFiltering","fields","filter","id","stateData","sort","b","chartDataSet","fieldNames","fieldDatasets","push","label","fill","backgroundColor","borderColor","dayRecord","find","getChartDataset","dateList","datesList","self","indexOf","newDateList","dateString","String","substring","getDateListFromData","destroy","stateChartRef","current","getContext","Chart","labels","datasets","options","loadChart","ref","Component","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","MobileMessage","StateData","dataRefreshedTimestamp","formatted_date","toLocaleString","freshData","setState","event","target","updatedSelectedFields","handleStateSelection","bind","handleDateRangeSelection","handleFieldSelection","window","open","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1f41b223.chunk.js","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\nimport './chart-display.css';\r\n\r\nimport {\r\n    getHistoryByState, \r\n    getChartDataset, \r\n    getDateListFromData,\r\n    getFormattedDateForFiltering\r\n} from '../utilities/data-processing';\r\n\r\nconst CHART_OPTIONS = {\r\n    responsive: true,\r\n    title: { display: false},\r\n    tooltips: {mode: 'index', intersect: false},\r\n    hover: {mode: 'nearest', intersect: true},\r\n    scales: {\r\n        xAxes: [{\r\n            display: true,\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Day'\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            display: true,\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Value'\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\n// Necessary to be able to refresh charts\r\nlet currentLineChart;\r\n\r\nclass ChartDisplay extends React.Component {  \r\n\r\n    chartRef = React.createRef();\r\n    \r\n    loadChart() {\r\n\r\n        const {statesHistoryData, selectedState, selectedFields, selectedDateRange} = this.props;\r\n\r\n        if (!statesHistoryData)\r\n            return;\r\n\r\n        //console.log(\"loadChart()...\");\r\n        //console.log(\"statesHistoryData=\",statesHistoryData);\r\n        //console.log(\"selectedState=\",selectedState);\r\n        //console.log(\"selectedFields=\",selectedFields);\r\n        //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n        var now = new Date();\r\n        now.setDate(now.getDate() - Number(selectedDateRange));\r\n        const dateValue = getFormattedDateForFiltering(now);\r\n        \r\n        //Filter out only fields that the user selected\r\n        const identifiers = Object.keys(selectedFields)\r\n        const fields = identifiers.filter(function(id) {\r\n            return selectedFields[id]\r\n        })\r\n\r\n        const stateData = getHistoryByState(statesHistoryData, selectedState, dateValue); \r\n        const chartDataSet = getChartDataset(stateData, fields);\r\n        const dateList = getDateListFromData(stateData);\r\n        \r\n        // Destroy previous chart if it exists \r\n        if (typeof currentLineChart !== \"undefined\") currentLineChart.destroy();\r\n\r\n        const stateChartRef = this.chartRef.current.getContext(\"2d\");\r\n\r\n        currentLineChart = new Chart(stateChartRef, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: dateList,\r\n                datasets: chartDataSet\r\n            },\r\n            options: CHART_OPTIONS\r\n        });\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.loadChart();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.loadChart();\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"chart-display\">    \r\n                <div className=\"chart\">\r\n                    <canvas id=\"myChart\" ref={this.chartRef} />                        \r\n                </div>\r\n            </div>            \r\n        )\r\n    }\r\n};\r\n\r\nexport default ChartDisplay;","export const DATA_FIELD_VALUES = [\r\n    \r\n    \"positive\",\r\n    \"negative\",\r\n    \"pending\",\r\n    \"totalTestResults\",\r\n\r\n    \"hospitalizedCurrently\",\r\n    \"inIcuCurrently\",\r\n    \"onVentilatorCurrently\",\r\n    \"death\",\r\n    \"recovered\",\r\n    \r\n    \"hospitalizedCumulative\",\r\n    \"inIcuCumulative\",\r\n    \"onVentilatorCumulative\",    \r\n    \r\n    \"deathIncrease\",\r\n    \"hospitalizedIncrease\",\r\n    \"negativeIncrease\",\r\n    \"positiveIncrease\",\r\n    \"totalTestResultsIncrease\"\r\n]\r\n\r\nexport const DATE_RANGES = {\r\n    15: \"Last 15 days\",\r\n    30: \"Last 30 days\",\r\n    45: \"Last 45 days\",\r\n    60: \"Last 60 days\"\r\n}\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    '#138E05',\r\n    '#A15B81',\r\n    '#2E16A6',\r\n    '#146AD4',\r\n    '#A9D422',\r\n    '#18F8BB',\r\n    '#AFC044',\r\n    '#3B9793',\r\n    '#822611',\r\n    '#FB2E76',\r\n    '#A5CA71',\r\n    '#983538',\r\n    '#082BD9',\r\n    '#2E136A',\r\n    '#05BB78',\r\n    '#44A4AD',\r\n    '#28FD7E',\r\n    '#387862'\r\n];\r\n\r\nexport const DEFAULT_SELECTED_DATA_FIELDS = {\r\n\r\n    \"hospitalizedCurrently\": true,\r\n    \"inIcuCurrently\": true,\r\n    \"onVentilatorCurrently\" : true,\r\n    \"death\": true\r\n}\r\n\r\nexport const US_STATES_DATA = {\r\n    AK:\"Alaska\",\r\n    AL:\"Alabama\",\r\n    AR:\"Arkansas\",\r\n    AS:\"American Samoa\",\r\n    AZ:\"Arizona\",\r\n    CA:\"California\", \r\n    CO:\"Colorado\", \r\n    CT:\"Connecticut\", \r\n    DC:\"District Of Columbia\",\r\n    DE:\"Delaware\", \r\n    FL:\"Florida\", \r\n    GA:\"Georgia\",\r\n    GU:\"Guam\", \r\n    HI:\"Hawaii\", \r\n    IA:\"Iowa\", \r\n    ID:\"Idaho\", \r\n    IL:\"Illinois\", \r\n    IN:\"Indiana\", \r\n    KS:\"Kansas\", \r\n    KY:\"Kentucky\", \r\n    LA:\"Louisiana\", \r\n    MA:\"Massachusetts\",\r\n    MD:\"Maryland\", \r\n    ME:\"Maine\", \r\n    MI:\"Michigan\",\r\n    MN:\"Minnesota\",\r\n    MO:\"Missouri\", \r\n    MP:\"Northern Mariana Islands\",\r\n    MS:\"Mississippi\", \r\n    MT:\"Montana\", \r\n    NC:\"North Carolina\", \r\n    ND:\"North Dakota\", \r\n    NE:\"Nebraska\", \r\n    NH:\"New Hampshire\", \r\n    NJ:\"New Jersey\", \r\n    NM:\"New Mexico\", \r\n    NV:\"Nevada\", \r\n    NY:\"New York\", \r\n    OH:\"Ohio\", \r\n    OK:\"Oklahoma\", \r\n    OR:\"Oregon\", \r\n    PA:\"Pennsylvania\", \r\n    PR:\"Puerto Rico\", \r\n    RI:\"Rhode Island\",\r\n    SC:\"South Carolina\", \r\n    SD:\"South Dakota\", \r\n    TN:\"Tennessee\", \r\n    TX:\"Texas\", \r\n    UT:\"Utah\", \r\n    VA:\"Virginia\", \r\n    VI:\"US Virgin Islands\", \r\n    VT:\"Vermont\", \r\n    WA:\"Washington\", \r\n    WI:\"Wisconsin\", \r\n    WV:\"West Virginia\", \r\n    WY:\"Wyoming\"\r\n}\r\n\r\n\r\nexport const DATA_FIELD_GROUPS = {\r\n    \r\n    testing:[\r\n        \"positive\",\r\n        \"negative\",\r\n        \"pending\",\r\n        \"totalTestResults\"\r\n    ],\r\n    patient: [\r\n        \"hospitalizedCurrently\",\r\n        \"inIcuCurrently\",\r\n        \"onVentilatorCurrently\",\r\n        \"death\",\r\n        \"recovered\"\r\n    ],\r\n    cumulative: [\r\n        \"hospitalizedCumulative\",\r\n        \"inIcuCumulative\",\r\n        \"onVentilatorCumulative\"\r\n    ],\r\n    increase: [\r\n        \"deathIncrease\",\r\n        \"hospitalizedIncrease\",\r\n        \"negativeIncrease\",\r\n        \"positiveIncrease\",\r\n        \"totalTestResultsIncrease\"\r\n    ]\r\n};\r\n\r\nexport const DATA_FIELDS = {\r\n    \r\n    positive: \"Positive Result\",\r\n    negative: \"Negative Result\",\r\n    totalTestResults: \"Total Test Results\",\r\n    pending: \"Pending\",\r\n    death: \"Death\", \r\n    recovered: \"Recovered\",\r\n    hospitalizedCurrently: \"Currently Hospitalized\",\r\n    inIcuCurrently: \"Currently In ICU\",\r\n    onVentilatorCurrently: \"Currently On Ventilator\",\r\n    hospitalizedCumulative: \"Hospitalized Cumulative\",\r\n    inIcuCumulative: \"In ICU Cumulative\",\r\n    onVentilatorCumulative: \"On Ventilator Cumulative\",    \r\n    deathIncrease: \"Death Increases\",\r\n    hospitalizedIncrease: \"Hospitalized Increases\",\r\n    negativeIncrease: \"Negative Increases\",\r\n    positiveIncrease: \"Positive Increases\",\r\n    totalTestResultsIncrease: \"Total Test Results Increases\"\r\n}","import React, {useState} from 'react';\r\n\r\nimport './dropdown.css';\r\n\r\nconst ShortDropDown = ({fieldName, optionList, labelsList, defaultSelected, onChangeEvent}) => {\r\n\r\n    const [listDisplaySize, setListDisplaySize] = useState(1);\r\n    \r\n    const displayLargerList = () => {\r\n\r\n        if (optionList.length < 10)\r\n            setListDisplaySize(optionList.length)\r\n        else\r\n            setListDisplaySize(10);\r\n    }\r\n\r\n    const resetDisplayList = () => {\r\n        setListDisplaySize(0);\r\n    }\r\n    \r\n    return (\r\n\r\n        <select className=\"short-drop-down\" name={fieldName} \r\n            onChange ={onChangeEvent} \r\n            defaultValue={defaultSelected} \r\n            size={listDisplaySize} \r\n            onMouseDown={displayLargerList}\r\n            onBlur={resetDisplayList}\r\n        >\r\n            {\r\n                optionList.map ((item, index) => \r\n                        <option className=\"short-drop-down-option\" onClick={resetDisplayList} key={item} value={item} >\r\n                            {!labelsList ? item : labelsList[item] }\r\n                        </option>\r\n                )\r\n            }\r\n        </select>\r\n    )\r\n\r\n}\r\n\r\nexport default ShortDropDown;","import React from 'react'\r\n\r\nimport './chart-config.css';\r\n\r\nimport ShortDropDown from '../dropdown/dropdown.component';\r\nimport {\r\n    DATE_RANGES, \r\n    US_STATES_DATA,\r\n    DATA_FIELD_GROUPS  \r\n} from '../utilities/data-fields';\r\n\r\n\r\nconst ChartConfiguration = ({selectedState, selectedDateRange, selectedFields, stateSelectionHandler, dateSelectionHander, fieldSelectionHandler}) => {\r\n\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    const fieldGroups = Object.keys(DATA_FIELD_GROUPS);\r\n\r\n    return (\r\n        <div className=\"chart-configuration\">\r\n            <div className=\"top-section\">\r\n                <div className=\"config-section\">\r\n                    <div className=\"config-field\">State:</div>\r\n                    <ShortDropDown \r\n                        fieldName=\"states-list\" \r\n                        optionList={Object.keys(US_STATES_DATA)}\r\n                        labelsList={US_STATES_DATA} \r\n                        defaultSelected={selectedState} \r\n                        onChangeEvent={stateSelectionHandler} \r\n                    />\r\n                </div>\r\n                <div className=\"config-section\">\r\n                    <div className=\"config-field\" >Date Range:</div>\r\n                    <ShortDropDown \r\n                        fieldName=\"date-range-list\" \r\n                        optionList={Object.keys(DATE_RANGES)} \r\n                        labelsList={DATE_RANGES}\r\n                        defaultSelected={selectedDateRange} \r\n                        onChangeEvent={dateSelectionHander} />\r\n                </div>\r\n            </div>\r\n            <div className=\"config-section\">\r\n                <div className=\"config-field\">Data Fields:</div>\r\n                <div className=\"field-groups\">\r\n                {\r\n                    \r\n                    fieldGroups.map(group => \r\n                        \r\n                        <div className=\"config-field-group\" key={group}>\r\n                            <div className=\"group\">{group} Data</div>\r\n                            {\r\n                            DATA_FIELD_GROUPS[group].map( field => (\r\n                                <div key={field}>\r\n                                    <input className=\"field-option\" type=\"checkbox\" name=\"field-selection\" \r\n                                        onChange={fieldSelectionHandler} \r\n                                        value={field}\r\n                                        checked = {!selectedFields[field] ? false : true}\r\n                                    />\r\n                                    <label name=\"field-selection\">{field}</label> \r\n                                </div>\r\n                            ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n                </div>\r\n            </div>            \r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default ChartConfiguration;","import {DATA_FIELD_COLORS} from './data-fields';\r\n\r\nexport const getDateListFromData = (stateData) => {\r\n\r\n    const datesList = stateData.map(item => item.date)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var month = Number(dateString.substring(4,6));\r\n        var day = Number(dateString.substring(6,8));\r\n\r\n        newDateList.push(month + \"/\" + day);\r\n    });\r\n\r\n    return newDateList;\r\n}\r\n\r\nexport const getHistoryByState = (stateHistoryData, state, startFromDate) => {\r\n\r\n    return stateHistoryData\r\n        .filter(stateData => stateData.state === state && stateData.date >= startFromDate )\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n    \r\n}    \r\n\r\nexport const getChartDataset = (stateData, fieldNames) => {\r\n\r\n    const fieldDatasets = [];\r\n\r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        fieldDatasets.push({\r\n            label: fieldName,\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            data: []\r\n        })\r\n    })\r\n\r\n    stateData.forEach(dayRecord => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = fieldDatasets.find((data => data.label === fieldName))    \r\n            fieldData.data.push(!dayRecord[fieldName] ? 0 : dayRecord[fieldName]);\r\n        })\r\n    });\r\n\r\n    return fieldDatasets;\r\n}\r\n\r\n\r\nexport const getStatesInfo = (stateInfo) => {\r\n    \r\n    const stateNames = []; \r\n\r\n    stateInfo.forEach(data => {\r\n        stateNames[data.state] = {\r\n            name: data.name,\r\n            website: data.covid19Site,\r\n            twitter: data.twitter,\r\n            notes: data.notes\r\n        }\r\n    })\r\n    \r\n    return stateNames;\r\n}\r\n\r\n\r\nexport const getFormattedDateForFiltering = (date) => {\r\n    var d = new Date(date);\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n    return year + month + day;\r\n}\r\n\r\nexport const getFreshData = async() => {\r\n    \r\n    //console.log(\"Fetching Data from https://covidtracking.com/...\");\r\n\r\n    let historyData = null;\r\n    let stateInfo = null;\r\n\r\n    try {\r\n\r\n        const stateInfoRes = await fetch('https://covidtracking.com/api/v1/states/info.json');\r\n        if (stateInfoRes.ok) {\r\n            \r\n            const json = await stateInfoRes.json();\r\n            stateInfo = getStatesInfo(json);\r\n        }\r\n        else {\r\n            throw Error(stateInfoRes.statusText);\r\n        }\r\n\r\n        const historicalDataRes = await fetch('https://covidtracking.com/api/v1/states/daily.json');\r\n        if (historicalDataRes.ok) {\r\n            \r\n            const json = await historicalDataRes.json();\r\n            historyData = json;\r\n        }\r\n        else {\r\n            throw Error(historicalDataRes.statusText);\r\n        }\r\n\r\n        const statesCurrentDataRes = await fetch('https://covidtracking.com/api/v1/states/current.json');\r\n        if (statesCurrentDataRes.ok) {\r\n            \r\n            const json = await statesCurrentDataRes.json();\r\n            json.forEach(data => {\r\n                stateInfo[data.state].grade = data.dataQualityGrade\r\n            });\r\n        }\r\n        else {\r\n            throw Error(statesCurrentDataRes.statusText);\r\n        }\r\n\r\n        return {\r\n            statesHistoryData: historyData,\r\n            stateInformation: stateInfo\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}","import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport {SpinnerContainer, SpinnerOverlay} from './spinner.styles.jsx';\r\n\r\nconst Spinner = () => (\r\n    <SpinnerOverlay>\r\n        <SpinnerContainer/>\r\n    </SpinnerOverlay>\r\n);\r\n\r\nexport default Spinner;\r\n\r\n","import React from 'react'\r\n\r\nimport './mobile-message.css';\r\n\r\nconst MobileMessage = () => (\r\n    <div className=\"mobile-message\">\r\n        <div className=\"message\">Chart is too big for your screen.<br/> Turn your device sideways.</div>        \r\n        <div className=\"phone\">\r\n            <div className=\"phone-screen\"></div>\r\n            <div className=\"phone-button\"></div>\r\n        </div>\r\n    </div>\r\n)\r\nexport default MobileMessage;","import React from 'react';\r\n\r\nimport \"./state-data.css\";\r\n\r\nimport {DEFAULT_SELECTED_DATA_FIELDS } from '../utilities/data-fields';\r\nimport ChartConfiguration from '../chart-config/chart-config.component';\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\nimport {getFreshData} from '../utilities/data-processing';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport MobileMessage from '../mobile-message/mobile-message.component';\r\n\r\nclass StateData extends React.Component {  \r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.state = {\r\n            selectedState:\"NJ\",\r\n            selectedDateRange:\"30\",\r\n            selectedFields: DEFAULT_SELECTED_DATA_FIELDS,\r\n            statesHistoryData: null,\r\n            stateInformation: null,\r\n            dataRefreshedTimestamp: \"\"\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        try {\r\n            const now = new Date();\r\n            const formatted_date = now.toLocaleString();\r\n\r\n            const freshData = await getFreshData();\r\n\r\n            await this.setState({\r\n                statesHistoryData: freshData.statesHistoryData,\r\n                stateInformation: freshData.stateInformation,\r\n                dataRefreshedTimestamp: formatted_date\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    handleStateSelection(event) {\r\n        this.setState({selectedState: event.target.value})\r\n    }\r\n\r\n    handleDateRangeSelection(event) {\r\n        this.setState({selectedDateRange: event.target.value})\r\n    }\r\n\r\n    handleFieldSelection(event) {\r\n        const updatedSelectedFields = this.state.selectedFields;\r\n        updatedSelectedFields[event.target.value] = event.target.checked;\r\n        this.setState({ selectedFields: updatedSelectedFields}); \r\n    }\r\n\r\n    render () {\r\n\r\n        const{   \r\n            statesHistoryData,\r\n            selectedState,\r\n            selectedDateRange,\r\n            selectedFields,\r\n            stateInformation,\r\n            dataRefreshedTimestamp\r\n        }  = this.state;\r\n\r\n        return (\r\n\r\n            <div className=\"state-data-history\">\r\n                <div className=\"page-title\">Covid19 Data Charts for U.S. States</div>\r\n                { !dataRefreshedTimestamp ? ( \r\n                    <Spinner />\r\n                ) : (\r\n\r\n                    <div className=\"page-layout\">\r\n                        <MobileMessage />\r\n                        <div className=\"chart-config-container\">\r\n                            <ChartConfiguration \r\n                                selectedState= {selectedState}\r\n                                selectedDateRange= {selectedDateRange}\r\n                                selectedFields={selectedFields}\r\n                                stateSelectionHandler={this.handleStateSelection.bind(this)} \r\n                                dateSelectionHander={this.handleDateRangeSelection.bind(this)}\r\n                                fieldSelectionHandler={this.handleFieldSelection.bind(this)}\r\n                            />\r\n                        </div> \r\n                        <div className=\"chart-container\">\r\n                            <div className=\"chart-header\">\r\n                                Data for {stateInformation[selectedState].name} last {selectedDateRange} days\r\n                            </div>\r\n                            \r\n                            <ChartDisplay\r\n                                selectedState= {selectedState}\r\n                                selectedDateRange= {selectedDateRange}\r\n                                selectedFields={selectedFields}\r\n                                statesHistoryData={statesHistoryData}\r\n                            />\r\n\r\n                            <div className=\"chart-footer\"> \r\n                                Data Quality Grade for {stateInformation[selectedState].name}: &nbsp;&nbsp;<b>{stateInformation[selectedState].grade} **</b> <br/>\r\n                                <span className=\"site-link\" onClick={()=> window.open(stateInformation[selectedState].website)}>{selectedState} COVID19 Website</span>&nbsp;&nbsp;&bull;&nbsp;&nbsp;\r\n                                <span className=\"site-link\" onClick={()=> window.open('https://www.twitter.com/' + stateInformation[selectedState].twitter)}>Twitter</span>                                   \r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className=\"page-footer\">\r\n                    <b>** Data Quality Grade determined by The COVID Tracking Project </b><br/>\r\n                    Not All States Report All Data<br/>\r\n                    Historical Data Refreshed daily at 4:00 PM EST<br/>\r\n                    ~ ~ ~<br/>\r\n                    This is a visual representation of the data collected by The COVID Tracking Project<br/>\r\n                    For more info, visit <span className=\"site-link\" onClick={()=> window.open(\"https://covidtracking.com/\")}>https://covidtracking.com/</span><br/>\r\n                    For field definitions, visit <span className=\"site-link\" onClick={()=> window.open(\"https://covidtracking.com/api\")}>https://covidtracking.com/api</span><br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default StateData;","import React from 'react';\n\nimport StateData from './components/state-data/state-data.component';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <StateData/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}