{"version":3,"sources":["components/spinner/spinning-blue-circle.gif","serviceWorker.js","components/chart-display/chart-display.component.jsx","utilities/data-fields.js","utilities/states-data.js","utilities/formatting.js","components/chart-footer/chart-footer.component.jsx","components/cdc-chart/cdc-chart.component.jsx","redux/chart-config/chart-config.types.js","components/chart-config/chart-config.component.jsx","redux/chart-config/chart-config.actions.js","components/spinner/spinner.component.jsx","components/data-totals/data-totals.component.jsx","utilities/data-fetching.js","utilities/data-sources.js","utilities/chart-options.js","utilities/chart-data-processing.js","components/dashboard/dashboard.component.jsx","App.js","redux/chart-config/chart-config.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","currentLineChart","ChartDisplay","chartType","chartOptions","chartLabels","chartDataSet","chartId","isTallChart","chartContainer","useRef","useState","chartInstance","setChartInstance","useEffect","current","chartConfig","type","options","data","labels","datasets","destroy","Chart","className","id","ref","YEAR_KEYS","YEARS","DATA_FIELD_COLORS","DATA_FIELD_DISPLAY_NAMES","new_case","new_death","inpatient_beds_covid","icu_beds_covid","CHART_IDENTIFIER","CDC_FIELDS_FOR_CHART","DEATHS_BY_AGE","VAX_FIRST_DOSE","VAX_COMPLETE_DOSE","EXCESS_DEATHS","EXCESS_DEATHS_PCT","HOSPITAL_DATA","CASES_DEATHS","AGE_GROUP_SUMMARY","CDC_AGE_GROUP_VALUES","STATIC_STATE_DATA","name","population","extra","getStateCodes","output","forEach","rec","push","getStateData","stateCode","find","getDisplayNumber","num","Intl","NumberFormat","useGrouping","format","getPercentage","partialNum","totalNum","percent","toFixed","getFormattedDateForFiltering","dateValue","date","Date","month","getMonth","day","getDate","year","getFullYear","length","Number","formatISODate","formatDateListForChart","dateList","newDateList","Set","map","item","substr","dateString","substring","fullDate","ChartFooter","dataSource","onClick","open","url","label","comment","connect","chartObjects","displaySummary","isFullWidthChart","dataFetchedSuccessfully","isDataLoaded","isDataAvailable","stateData","selectedState","errorMessage","chartTitle","selectedYear","key","dataTotal","ChartConfigTypes","SET_STATE_SELECTION","SET_DATE_RANGE_SELECTION","SET_FIELD_SELECTION","SET_COVID19_DATA","SET_STATE_HISTORY_DATA","SET_YEAR_SELECTION","dispatch","setStateSelection","userSelectedState","payload","setYearSelection","userSelectedYear","statesKeys","defaultValue","onChange","event","target","value","Spinner","src","SpinnerImage","alt","stateInformation","cdcTotalsByJurisdiction","Array","isArray","stateInfo","jurisdictionData","percentDeath","percentHospitalization","percentICU","percentDeathOfPositive","total_deaths","inpatient_beds","icu_beds","total_cases","CDC_QUERY_ACCESS_TOKEN","getFreshData","a","fetchJsonData","dataHistoryByState","dataHistoryUSA","cdcHistoryByJurisdiction","concat","dataCasesDeathsTotals","getTotalsForEachState","dataHospitalByState","dataHospitalUSA","dataHospitalNYCOnly","cdcHospitalDataByJurisdiction","lastDate","reduce","prev","nycLastDate","dataHospitalTotals","filter","getTotalsByJurisdiction","deathsByAgeGroups","cdcVaxByAgeGroup","cdcExcessDeathsByAgeGroups","dataRefreshTimestamp","cdcExcessDeathsByAgeGroup","cdcDeathsByAgeGroup","json","fetch","response","ok","Error","statusText","dataCasesDeathsByState","totalsByState","casesDeathsData","hospitalData","stateHistoryData","totals","record","stateTotal","newStateTotal","DATASOURCES","getDataSource","getTimeSeriesChartOptions","displayMonthFormat","displayPercentageValue","displayNegativeValues","responsive","aspectRatio","maintainAspectRatio","title","display","tooltips","mode","intersect","bodyAlign","position","bodySpacing","callbacks","tooltipItem","datasetIndex","index","parseFloat","parseInt","toLocaleString","interaction","axis","legend","boxWidth","fontSize","usePointStyle","padding","elements","point","radius","scales","xAxes","gridLines","time","minUnit","tooltipFormat","scaleLabel","yAxes","ticks","min","undefined","callback","formatYAxisDisplay","CHART_OPTIONS_FOR_AGE_GROUPS","footerFontStyle","titleMarginBottom","footerMarginTop","footer","covidDeaths","allDeaths","hover","stacked","labelText","getCDCHistoryDataBySelection","monthsSelected","search","monthsBack","lenth","dateRange","getDateRangeValues","startDate","endDate","getCDCDataSetByDateRange","getCDCDataSetByYear","sort","b","replaceAll","setMonth","setDate","getChartObjectForDeathsByAgeGroup","filteredData","chartObject","getChartObjectForDataGroupedByAge","getChartObjectForVaxFirstByAgeGroup","getChartObjectForVaxCompleteByAgeGroup","getChartObjectForExcessDeathsAgeGroup","getChartObjectForExcessDeathsAgeGroupPercentage","getChartObjectForDeathsAndCases","getChartObjectForData","getChartObjectForHospitalData","dataSourceId","getChartObjectDeathsByAgeGroupSummary","dataSet","ageGroupData","summary","ageGroupRec","covid_19_deaths","ageGroupSum","age_group","sum_covid_19_deaths","sum_total_deaths","age_group_sum","getDeathsByAgeGroupSummary","backgroundColor","ageGroupNameList","newList","newGroupName","toLowerCase","replace","shrinkAgeGroupNameList","ageGroupsInData","fieldName","ageGroupId","dataValues","chartRec","borderColor","borderWidth","fill","chartDateList","fieldNames","row","fieldData","setCOVID19Data","freshData","loadData","App","INITIAL_STATE","selectedFields","chartConfigReducer","action","combineReducers","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2ed84e2e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinning-blue-circle.cbcc3646.gif\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from 'chart.js';\r\nimport './chart-display.css';\r\n\r\n// Necessary to be able to clear previous charts\r\nlet currentLineChart = [];\r\n\r\nconst ChartDisplay = ({chartType, chartOptions, chartLabels, chartDataSet, chartId, isTallChart}) => {\r\n    const chartContainer = useRef(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if (chartContainer && chartContainer.current) {\r\n            const chartConfig = {\r\n                type: chartType,\r\n                options: chartOptions,\r\n                data: {\r\n                    labels: chartLabels,\r\n                    datasets: chartDataSet\r\n                }            \r\n            }\r\n\r\n            // Destroy previous chart if it exists \r\n            if (typeof currentLineChart[chartId] !== \"undefined\") currentLineChart[chartId].destroy();\r\n\r\n            currentLineChart[chartId] = new Chart(chartContainer.current, chartConfig);\r\n            setChartInstance(currentLineChart);\r\n            \r\n        }\r\n    }, [chartContainer, chartType, chartOptions, chartLabels, chartDataSet, chartId]);\r\n    \r\n    return (\r\n        <div className={\"chart-display\" + (isTallChart ? \" tall-chart-display\" : \"\") }>\r\n            <canvas id={!chartInstance ? \"0\" : chartId } ref={chartContainer} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDisplay;\r\n","export const YEARS_DEFAULT = \"months-6\";\r\nexport const USA_IDENTIFIER = \"USA\";\r\nexport const NYC_IDENTIFIER = \"NYC\";\r\n\r\n/*\r\n This is needed to maintain descending year order.\r\n Using Object.keys() to get keys from YEARS sorts\r\n the years in ascending order.\r\n*/\r\nexport const YEAR_KEYS = [\r\n    \"months-6\",\r\n    \"months-9\",\r\n    \"months-12\",\r\n    \"2021\", \r\n    \"2020\",\r\n    \"0\"\r\n];\r\n\r\nexport const YEARS = {\r\n    \"months-6\": \"Last 6 months\",\r\n    \"months-9\": \"Last 9 months\",\r\n    \"months-12\": \"Last 12 months\",\r\n    \"2021\": \"All 2021\",\r\n    \"2020\": \"All 2020\",\r\n    \"0\": \"All Time\",\r\n}\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    'green',\r\n    'red',\r\n    'blue',\r\n    'orange',\r\n    'pink',\r\n    'lime',\r\n    'black',\r\n    'cyan',\r\n    'purple',\r\n    'brown',\r\n    'voilet',\r\n    'chartreuse',\r\n    'CadetBlue',\r\n    'darkgreen',\r\n    'DarkGoldenRod',\r\n    'darkslategray',\r\n    'crimson',\r\n    'Turquoise',\r\n    'steelblue',\r\n    'sand',\r\n    'salmon'\r\n];\r\n\r\n/**\r\n * User-friendly display names for specific fields from CDC\r\n */\r\nexport const DATA_FIELD_DISPLAY_NAMES = {   \r\n    new_case: \"New Cases\",\r\n    new_death: \"New Deaths\",\r\n    inpatient_beds_covid: \"Inpatient\",\r\n    icu_beds_covid: \"ICU\"\r\n};\r\n\r\n/**\r\n * Each Chart has an identifier that is used throught the code\r\n */\r\nexport const CHART_IDENTIFIER = {\r\n    DEATHS_BY_AGE: \"DEATHS_BY_AGE\",\r\n    VAX_FIRST_DOSE: \"VAX_FIRST_DOSE\",\r\n    VAX_COMPLETE_DOSE: \"VAX_COMPLETE_DOSE\",\r\n    EXCESS_DEATHS: \"EXCESS_DEATHS\",\r\n    EXCESS_DEATHS_PCT: \"EXCESS_DEATHS_PCT\",\r\n    HOSPITAL_DATA: \"HOSPITAL_DATA\",\r\n    AGE_GROUP_SUMMARY: \"AGE_GROUP_SUMMARY\",\r\n    CASES_DEATHS: \"CASES_DEATHS\" \r\n}\r\n\r\n/**\r\n * List of fields used in time series charts.\r\n * Date grouped by age will only show first field per age group.\r\n */\r\nexport const CDC_FIELDS_FOR_CHART = {\r\n    DEATHS_BY_AGE: [\"covid_19_deaths\"],\r\n    VAX_FIRST_DOSE: [\"first_dose_pct\"],\r\n    VAX_COMPLETE_DOSE: [\"completed_pct\"],\r\n    EXCESS_DEATHS: [\"covid19_weighted\"],\r\n    EXCESS_DEATHS_PCT: [\"percent_above_average_weighted\"],\r\n    HOSPITAL_DATA: [\"inpatient_beds_covid\",\"icu_beds_covid\"],\r\n    CASES_DEATHS: [\"new_case\",\"new_death\"],\r\n    AGE_GROUP_SUMMARY: []\r\n}\r\n\r\n/**\r\n * Data grouped by age must have age groups predefined.\r\n * Key matches value from CHART_IDENTIFIER\r\n */\r\nexport const CDC_AGE_GROUP_VALUES = {\r\n    DEATHS_BY_AGE : [\r\n        '0-17 years', \r\n        '18-29 years', \r\n        '30-39 years',\r\n        '40-49 years',\r\n        '50-64 years',\r\n        '65-74 years',\r\n        '75-84 years',\r\n        '85 years and over'],\r\n    AGE_GROUP_SUMMARY : [\r\n        '0-17 years', \r\n        '18-29 years', \r\n        '30-39 years',\r\n        '40-49 years',\r\n        '50-64 years',\r\n        '65-74 years',\r\n        '75-84 years',\r\n        '85 years and over'],\r\n    VAX_FIRST_DOSE: [\r\n        \"5 - 11 Years\",\r\n        \"12 - 17 Years\",\r\n        \"18 - 24 Years\",\r\n        \"25 - 39 Years\",\r\n        \"40 - 49 Years\",\r\n        \"50 - 64 Years\",\r\n        \"65 - 74 Years\",\r\n        \"75+ Years\"\r\n    ],\r\n    VAX_COMPLETE_DOSE: [\r\n        \"5 - 11 Years\",\r\n        \"12 - 17 Years\",\r\n        \"18 - 24 Years\",\r\n        \"25 - 39 Years\",\r\n        \"40 - 49 Years\",\r\n        \"50 - 64 Years\",\r\n        \"65 - 74 Years\",\r\n        \"75+ Years\"\r\n    ],\r\n    EXCESS_DEATHS: [\r\n        \"0-14 Years\",\r\n        \"15-19 Years\",\r\n        \"20-24 Years\",\r\n        \"25-29 Years\",\r\n        \"30-34 Years\",\r\n        \"35-39 Years\",\r\n        \"40-44 Years\",\r\n        \"45-49 Years\",\r\n        \"50-54 Years\",\r\n        \"55-59 Years\",\r\n        \"60-64 Years\",\r\n        \"65-69 Years\",\r\n        \"70-74 Years\",\r\n        \"75-79 Years\",\r\n        \"80-84 Years\",\r\n        \"85+\"\r\n    ],\r\n    EXCESS_DEATHS_PCT: [\r\n        \"0-14 Years\",\r\n        \"15-19 Years\",\r\n        \"20-24 Years\",\r\n        \"25-29 Years\",\r\n        \"30-34 Years\",\r\n        \"35-39 Years\",\r\n        \"40-44 Years\",\r\n        \"45-49 Years\",\r\n        \"50-54 Years\",\r\n        \"55-59 Years\",\r\n        \"60-64 Years\",\r\n        \"65-69 Years\",\r\n        \"70-74 Years\",\r\n        \"75-79 Years\",\r\n        \"80-84 Years\",\r\n        \"85+\"\r\n    ]\r\n};","/**\r\n * Population data taken from US Census estimates for July 2020. \r\n * https://www2.census.gov/programs-surveys/decennial/2020/data/apportionment/population-change-data-table.pdf\r\n * \r\n * This data changes approx every 18 months. No need to scrub every time.\r\n * \"USA\" population = US Total in pdf + PR Total\r\n */\r\n\r\nexport const STATIC_STATE_DATA = [\r\n    {state:\"USA\", name:\"United States\", population:334735155},\r\n    {state:\"AK\", name:\"Alaska\", population:733391},\r\n    {state:\"AL\", name:\"Alabama\", population:5024279},\r\n    {state:\"AR\", name:\"Arkansas\", population:3011524},\r\n    {state:\"AZ\", name:\"Arizona\", population:7151502},\r\n    {state:\"CA\", name:\"California\", population:39538223},\r\n    {state:\"CO\", name:\"Colorado\", population:5773714},\r\n    {state:\"CT\", name:\"Connecticut\", population:3605944},\r\n    {state:\"DC\", name:\"District of Columbia\", population:689545},\r\n    {state:\"DE\", name:\"Delaware\", population:989948},\r\n    {state:\"FL\", name:\"Florida\", population:21538187},\r\n    {state:\"GA\", name:\"Georgia\", population:10711908},\r\n    {state:\"HI\", name:\"Hawaii\", population:1455271},\r\n    {state:\"IA\", name:\"Iowa\", population:3190369},\r\n    {state:\"ID\", name:\"Idaho\", population:1839106},\r\n    {state:\"IL\", name:\"Illinois\", population:12812508},\r\n    {state:\"IN\", name:\"Indiana\", population:6785528},\r\n    {state:\"KS\", name:\"Kansas\", population:2937880},\r\n    {state:\"KY\", name:\"Kentucky\", population:4505836},\r\n    {state:\"LA\", name:\"Louisiana\", population:4657757},\r\n    {state:\"MA\", name:\"Massachusetts\", population:7029917},\r\n    {state:\"MD\", name:\"Maryland\", population:6177224},\r\n    {state:\"ME\", name:\"Maine\", population:1362359},\r\n    {state:\"MI\", name:\"Michigan\", population:10077331},\r\n    {state:\"MN\", name:\"Minnesota\", population:5706494},\r\n    {state:\"MO\", name:\"Missouri\", population:6154913},\r\n    {state:\"MS\", name:\"Mississippi\", population:2961279},\r\n    {state:\"MT\", name:\"Montana\", population:1084225},\r\n    {state:\"NC\", name:\"North Carolina\", population:10439388},\r\n    {state:\"ND\", name:\"North Dakota\", population:779094},\r\n    {state:\"NE\", name:\"Nebraska\", population:1961504},\r\n    {state:\"NH\", name:\"New Hampshire\", population:1377529},\r\n    {state:\"NJ\", name:\"New Jersey\", population:9288994},\r\n    {state:\"NM\", name:\"New Mexico\", population:2117522},\r\n    {state:\"NV\", name:\"Nevada\", population:3104614},\r\n    {state:\"NY\", name:\"New York\", population:20201249, extra:\" (Excludes NYC)\"},\r\n    {state:\"NYC\", name:\"New York City\", population:8804190},\r\n    {state:\"OH\", name:\"Ohio\", population:11799448},\r\n    {state:\"OK\", name:\"Oklahoma\", population:3959353},\r\n    {state:\"OR\", name:\"Oregon\", population:4237256},\r\n    {state:\"PA\", name:\"Pennsylvania\", population:13002700},\r\n    {state:\"PR\", name:\"Puerto Rico\", population:3285874},\r\n    {state:\"RI\", name:\"Rhode Island\", population:1097379},\r\n    {state:\"SC\", name:\"South Carolina\", population:5118425},\r\n    {state:\"SD\", name:\"South Dakota\", population:886667},\r\n    {state:\"TN\", name:\"Tennessee\", population:6910840},\r\n    {state:\"TX\", name:\"Texas\", population:29145505},\r\n    {state:\"UT\", name:\"Utah\", population:3271616},\r\n    {state:\"VA\", name:\"Virginia\", population:8631393},\r\n    {state:\"VT\", name:\"Vermont\", population:643077},\r\n    {state:\"WA\", name:\"Washington\", population:7705281},\r\n    {state:\"WI\", name:\"Wisconsin\", population:5893718},\r\n    {state:\"WV\", name:\"West Virginia\", population:1793716},\r\n    {state:\"WY\", name:\"Wyoming\", population:576851}\r\n];\r\n\r\n\r\nexport const getStateCodes = () => {\r\n    var output = [];\r\n    STATIC_STATE_DATA.forEach((rec) => {\r\n        output.push(rec.state);\r\n    });\r\n    return output;\r\n}\r\n\r\nexport const getStateData =(stateCode) => {\r\n    return STATIC_STATE_DATA.find(rec => rec.state === stateCode)\r\n}\r\n","export const getDisplayNumber = (num) => {\r\n    if (!num)\r\n        num = 0;\r\n    return Intl.NumberFormat('en-US', {useGrouping: true}).format(num);\r\n}\r\n\r\nexport const getPercentage = (partialNum, totalNum) => {\r\n\r\n    if (totalNum===0)\r\n        return \"0\";\r\n\r\n    var percent = ((partialNum / totalNum) * 100).toFixed(2);\r\n    if (percent === \"0.00\")\r\n        percent = \"< 0.01\"\r\n\r\n    return percent + \"%\";\r\n}\r\n\r\nexport const getPercentageText = (partialNum, totalNum) => {\r\n\r\n    if (totalNum===0)\r\n        return partialNum;\r\n\r\n    var percent = ((partialNum / totalNum) * 100).toFixed(2);\r\n    if (percent === \"0.00\")\r\n        percent = \"< 0.01\"\r\n        \r\n    return percent + \"% of \" + getDisplayNumber(totalNum);\r\n}\r\n\r\nexport const getFormattedDateForFiltering = (dateValue) => {\r\n  \r\n    const date = new Date(dateValue);\r\n\r\n    let month = \"\" + (date.getMonth() + 1);\r\n    let day = \"\" + date.getDate();\r\n    let year = \"\" + date.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return Number(year + month + day);\r\n}\r\n\r\nexport const getFormattedDateForQuery = (dateValue) => {\r\n\r\n    const date = new Date(dateValue);\r\n\r\n    let month = \"\" + (date.getMonth() + 1);\r\n    let day = \"\" + date.getDate();\r\n    let year = \"\" + date.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return year + \"-\" + month + \"-\" +  day;\r\n\r\n}\r\n\r\nexport const formatISODate = (dateValue) => {\r\n\r\n    const date = new Date(dateValue);\r\n\r\n    let month = \"\" + (date.getMonth() + 1);\r\n    let day = \"\" + date.getDate();\r\n    let year = \"\" + date.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return year + \"-\" + month + \"-\" +  day + \"T00:00:00.000\";\r\n\r\n}\r\n\r\n\r\nexport const formatAgeGroupName = (ageGroupName) => {\r\n    \r\n    const newGroupName = ageGroupName.toLowerCase().replace(\"years and over\",\"\").replace(\"years\",\"\").replace(\"year\",\"\").replace(\"Under\",\"<\").replaceAll(\"-\",\"_\").replaceAll(\" \",\"\"); \r\n\r\n    return newGroupName;\r\n}\r\n\r\nexport const shrinkAgeGroupName = (ageGroupName) => {\r\n    \r\n    const newGroupName = ageGroupName.toLowerCase().replace(\"years and over\",\"+\").replace(\"years\",\"\").replace(\"year\",\"\").replace(\"Under\",\"<\").replaceAll(\" \",\"\"); \r\n\r\n    return newGroupName;\r\n}\r\n\r\nexport const shrinkAgeGroupNameList = (ageGroupNameList) => {\r\n    \r\n    const newList = [];\r\n\r\n    ageGroupNameList.forEach(rec => {\r\n        const newGroupName = rec.toLowerCase().replace(\"years and over\",\"+\").replace(\"years\",\"\").replace(\"year\",\"\").replace(\"Under\",\"<\").replaceAll(\" \",\"\"); \r\n        newList.push(newGroupName);\r\n    });\r\n\r\n    return newList;\r\n}\r\n\r\nexport const formatDateListForChart = (dateList) => {\r\n\r\n    const newDateList = [];\r\n\r\n    const uniqueDates = [...new Set(dateList.map(item => item.substr(0,10)))];\r\n\r\n    uniqueDates.forEach(dateString => {\r\n        const year = Number(dateString.substring(2,4));\r\n        const month = Number(dateString.substring(5,7));\r\n        const day = Number(dateString.substring(8,10));\r\n        const fullDate = new Date(month + \"/\" + day + \"/\" + year)\r\n        newDateList.push(fullDate);\r\n    });\r\n\r\n    return newDateList;\r\n}","import React from 'react'\r\n\r\nimport './chart-footer.css';\r\n\r\nconst ChartFooter = ({dataSource}) => {\r\n\r\n    return (\r\n        <div>\r\n            {dataSource != null ?\r\n                <div className=\"data-sources\"><b>Source:</b>&nbsp; \r\n                    <span className=\"site-link\" onClick={()=> window.open(dataSource.url)}>{dataSource.label}</span>\r\n                    <span className=\"footer-comment\"><br/>{dataSource.comment}</span>\r\n                </div>\r\n                :\r\n                <span></span>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default ChartFooter;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './cdc-chart.css';\r\n\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nimport {YEARS} from '../../utilities/data-fields';\r\nimport {getStateData} from '../../utilities/states-data';\r\nimport {getDisplayNumber} from '../../utilities/formatting';\r\nimport ChartFooter from '../chart-footer/chart-footer.component';\r\n\r\nconst CDCChart = ({chartConfig, chartObjects, displaySummary=false, isFullWidthChart=false}) => {  \r\n    \r\n    const dataFetchedSuccessfully = chartConfig.isDataLoaded;\r\n    const isDataAvailable = chartObjects.isDataAvailable;\r\n    const stateData = getStateData(chartConfig.selectedState);\r\n\r\n    let errorMessage = \"\";\r\n\r\n    if (dataFetchedSuccessfully && isDataAvailable) {\r\n        errorMessage = \"Problem fetching data from CDC site.\"\r\n    }\r\n    else if (!isDataAvailable) {\r\n        isFullWidthChart = false;\r\n        errorMessage = \"Data is unavailable for selection.\"\r\n    }\r\n\r\n    return (\r\n        <div className={\"dashboard-component state-history-chart\" + (isFullWidthChart ? \" full-width-component\" : \"\") }>\r\n            <div className=\"dashboard-component-title\">\r\n                <span>{chartObjects.chartTitle}</span>\r\n            </div>\r\n            <div className=\"dashboard-component-subtitle\">\r\n                <span>{stateData.name} | {YEARS[chartConfig.selectedYear]}</span>\r\n            </div>\r\n            {dataFetchedSuccessfully && isDataAvailable ? \r\n                    <ChartDisplay\r\n                    chartType= {chartObjects.type}\r\n                    chartOptions = {chartObjects.chartOptions}\r\n                    chartLabels = {chartObjects.chartLabels} \r\n                    chartDataSet = {chartObjects.chartDataSet}\r\n                    chartId = {chartObjects.chartId}\r\n                    isTallChart = {isFullWidthChart}\r\n                    />\r\n            : \r\n                <div>{errorMessage}</div>\r\n            }\r\n            {displaySummary ?\r\n                <div className='chart-summary'>\r\n                    <div className='summary-title'>Totals for Selection</div>\r\n                    {chartObjects.chartDataSet.map((item) =>\r\n                        <div className='chart-summary-row' key={item.label}> \r\n                            <div className='label'>{item.label}</div>\r\n                            <div className='value'>{getDisplayNumber(item.dataTotal)}</div>\r\n                        </div>    \r\n                    )}\r\n                </div>\r\n            :\r\n                <div></div>\r\n            }\r\n            <div>\r\n                <ChartFooter dataSource = {chartObjects.dataSource}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    chartConfig: state.chartConfig\r\n});\r\n\r\nexport default connect(mapStateToProps)(CDCChart);","const ChartConfigTypes = {\r\n    SET_STATE_SELECTION : \"SET_STATE_SELECTION\",\r\n    SET_DATE_RANGE_SELECTION : \"SET_DATE_RANGE_SELECTION\",\r\n    SET_FIELD_SELECTION : \"SET_FIELD_SELECTION\",\r\n    SET_COVID19_DATA : \"SET_COVID19_DATA\",\r\n    SET_STATE_HISTORY_DATA: \"SET_STATE_HISTORY_DATA\",\r\n    SET_YEAR_SELECTION : \"SET_YEAR_SELECTION\"\r\n};\r\n\r\nexport default ChartConfigTypes;","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './chart-config.css';\r\nimport {YEARS, YEARS_DEFAULT, YEAR_KEYS} from '../../utilities/data-fields';\r\nimport {getStateCodes, getStateData } from '../../utilities/states-data';\r\nimport {setStateSelection, setYearSelection} from '../../redux/chart-config/chart-config.actions';\r\n\r\nconst ChartConfiguration = ({selectedState, selectedYear, setStateSelection, setYearSelection}) => {\r\n\r\n    const statesKeys = getStateCodes();\r\n    \r\n    const handleStateSelection = (event) => {\r\n        setStateSelection(event.target.value);\r\n    }\r\n\r\n    const handleYearSelection = (event) => {\r\n        setYearSelection(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-configuration\">\r\n            <div className=\"top-section\">\r\n                \r\n                <span className=\"config-section\">\r\n                    <select name=\"stateSelection\" defaultValue={!selectedState ? \"USA\" : selectedState}  onChange={handleStateSelection}>\r\n                        {statesKeys.map ((item) => \r\n                            <option key={item} value={item} >{getStateData(item).name + (getStateData(item).extra != null ? getStateData(item).extra : \"\")}</option>\r\n                        )}\r\n                    </select>\r\n                </span>\r\n                \r\n                <span className=\"config-year\">\r\n                    <select name=\"yearSelection\" defaultValue={!selectedYear ? YEARS_DEFAULT : selectedYear}  onChange={handleYearSelection}>\r\n                        {YEAR_KEYS.map ((item) => \r\n                            <option key={item} value={item} >{YEARS[item]}</option>\r\n                        )}\r\n                    </select>\r\n                </span>\r\n                \r\n            </div>            \r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedYear: state.chartConfig.selectedYear\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setStateSelection: (userSelectedState) => dispatch(setStateSelection(userSelectedState)),\r\n    setYearSelection: (userSelectedYear) => dispatch(setYearSelection(userSelectedYear))\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChartConfiguration);","import ChartConfigTypes from './chart-config.types';\r\n\r\nexport const setStateSelection = (stateSelection) => ({\r\n    type : ChartConfigTypes.SET_STATE_SELECTION,\r\n    payload: stateSelection\r\n});\r\n\r\nexport const setYearSelection = (yearSelection) => ({\r\n    type : ChartConfigTypes.SET_YEAR_SELECTION,\r\n    payload: yearSelection\r\n});\r\n\r\nexport const setCOVID19Data = (data) => ({\r\n    type : ChartConfigTypes.SET_COVID19_DATA,\r\n    payload: data\r\n});\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport SpinnerImage from './spinning-blue-circle.gif';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => (\r\n    <div className='spinner-page'>\r\n        <div>\r\n            <div><img className='spinner-image' src={SpinnerImage} alt=\"Loading CDC Data\"/></div>\r\n            <div>Loading CDC Data...</div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Spinner;\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './data-totals.css';\r\n\r\nimport {getDisplayNumber, getPercentage} from '../../utilities/formatting'\r\nimport {getStateData} from '../../utilities/states-data';\r\nconst DataTotals = ({selectedState, cdcTotalsByJurisdiction}) => {\r\n\r\n    const dataFetchedSuccessfully = Array.isArray(cdcTotalsByJurisdiction) && cdcTotalsByJurisdiction.length > 0;\r\n\r\n    let stateInfo = getStateData(selectedState);\r\n\r\n    let jurisdictionData = [];        \r\n    \r\n    let percentDeath =  0\r\n    let percentHospitalization = 0;\r\n    let percentICU = 0;\r\n    let percentDeathOfPositive = 0;\r\n\r\n    if (dataFetchedSuccessfully) {\r\n        jurisdictionData = cdcTotalsByJurisdiction.find(data => data.state===selectedState);\r\n\r\n        percentDeath =  getPercentage(jurisdictionData.total_deaths,stateInfo.population);\r\n        percentHospitalization =  getPercentage(jurisdictionData.inpatient_beds_covid,jurisdictionData.inpatient_beds);\r\n        percentICU =  getPercentage(jurisdictionData.icu_beds_covid,jurisdictionData.icu_beds);\r\n        percentDeathOfPositive = getPercentage(jurisdictionData.total_deaths, jurisdictionData.total_cases);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"data-totals-component\">\r\n            {dataFetchedSuccessfully ? \r\n                <div>\r\n                    <div className='data-totals-title'>Current Totals for <span>{stateInfo.name}</span> <span>{stateInfo.extra != null ? stateInfo.extra : \"\"}</span></div>\r\n                    <div className=\"data-totals\">\r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Total Cases</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.total_cases)}</div>\r\n                                <div className=\"percent\">Confirmed &amp; Probable Cases</div>\r\n                            </div>\r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Total Deaths</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.total_deaths)}</div>\r\n                                <div className=\"percent\">{percentDeath} of Est. Population** <br/>{percentDeathOfPositive} of Total Cases</div>\r\n                            </div>\r\n                        \r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Currently Hospitalized</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.inpatient_beds_covid)}</div>\r\n                                <div className=\"percent\">{percentHospitalization} of {getDisplayNumber(jurisdictionData.inpatient_beds)}<br/>Inpatient Beds Available</div>\r\n                            </div>\r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Currently in ICU</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.icu_beds_covid)}</div>\r\n                                <div className=\"percent\">{percentICU} of {getDisplayNumber(jurisdictionData.icu_beds)}<br/>ICU Beds Available</div>\r\n                            </div>\r\n                    </div>        \r\n                </div>    \r\n            : \r\n                <div>Problem fetching data from CDC site...</div>\r\n            }\r\n            <div className=\"more-data\">\r\n                <div>** Estimated population of {selectedState}: {getDisplayNumber(stateInfo.population)}</div>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    cdcTotalsByJurisdiction: state.chartConfig.cdcTotalsByJurisdiction,\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataTotals);","import {getStateCodes} from './states-data';\r\n\r\n// CDC Access Token to be allowed to pull more than 5k worth of records\r\nconst CDC_QUERY_ACCESS_TOKEN = \"&$limit=500000&$$app_token=fz22RHPlELrzEw1j9vq91YH6N\";\r\n\r\n// Cases and Deaths over time\r\nconst URL_CDC_CASES_DEATHS_BY_STATE_HISTORY = \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=submission_date as date,state,new_case,new_death&$order=submission_date, state\";\r\nconst URL_CDC_CASES_DEATHS_USA_HISTORY = \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=submission_date as date,'USA' as state,sum(new_case) as new_case,sum(new_death) as new_death&$group=submission_date&$order=submission_date\";\r\n\r\n// Cases and Deaths by age groups\r\nconst URL_CDC_DEATHS_BY_AGE = \"https://data.cdc.gov/resource/9bhg-hcku.json?$select=start_date as date,state,age_group,covid_19_deaths,total_deaths where sex ='All Sexes' and `group`='By Month' and age_group in ('0-17 years', '18-29 years', '30-39 years','40-49 years','50-64 years','65-74 years','75-84 years','85 years and over') order by start_date,state,age_group\";\r\n\r\n// Hospital Data over time\r\nconst URL_CDC_HOSPITAL_DATA_BY_STATE_HISTORY = \"https://healthdata.gov/resource/g62h-syeh.json?$select=date,state,inpatient_beds,inpatient_beds_used_covid as inpatient_beds_covid,total_staffed_adult_icu_beds as icu_beds, staffed_icu_adult_patients_confirmed_covid as icu_beds_covid&$order=date, state\";\r\nconst URL_CDC_HOSPTIAL_DATA_USA_HISTORY = \"https://healthdata.gov/resource/g62h-syeh.json?$select=date,'USA' as state,sum(inpatient_beds)as inpatient_beds,sum(inpatient_beds_used_covid) as inpatient_beds_covid,sum(total_staffed_adult_icu_beds) as icu_beds,sum(staffed_icu_adult_patients_confirmed_covid) as icu_beds_covid&$group=date&$order=date\";\r\n\r\nconst URL_NYC_HOSPITAL_DATA = \"https://health.data.ny.gov/resource/jw46-jpb7.json?$select=as_of_date as date,'NYC' as state, sum(total_staffed_acute_care) as inpatient_beds, sum(patients_currently) as inpatient_beds_covid, sum(total_staffed_icu_beds_1) as icu_beds, sum(patients_currently_in_icu) as icu_beds_covid where ny_forward_region = 'NEW YORK CITY' group by date, state order by date desc\";\r\n\r\n// Vaccinations over time\r\nconst URL_CDC_VACCINATIONS_BY_AGE = \"https://data.cdc.gov/resource/gxj9-t96f.json?$select=cdc_case_earliest_dt as date,'USA' as state,agegroupvacc as age_group,administered_dose1_pct * 100 as first_dose_pct,series_complete_pop_pct * 100 as completed_pct&$order=cdc_case_earliest_dt\";\r\n\r\n// Excess Deaths by Age Group\r\nconst URL_CDC_EXCESS_DEATHS_BY_AGE = \"https://data.cdc.gov/resource/m74n-4hbs.json?$select=weekending as date, 'USA' as state, agegroup as age_group, percent_above_average_weighted, covid19_weighted where RaceEthnicity='All Race/Ethnicity Groups' and Sex='All Sexes' and agegroup not in ('All Ages', 'Not stated') and MMWRyear in ('2020','2021','2022','2023') order by date\";\r\n\r\nexport const getFreshData = async() => {\r\n    \r\n    try {  \r\n        // Get cases and deaths data history for each state and USA and merge\r\n        const dataHistoryByState = await fetchJsonData(URL_CDC_CASES_DEATHS_BY_STATE_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const dataHistoryUSA = await fetchJsonData(URL_CDC_CASES_DEATHS_USA_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const cdcHistoryByJurisdiction = dataHistoryByState.concat(dataHistoryUSA);\r\n\r\n        // Get cases and deaths TOTALS from history\r\n        //const dataCasesDeathsTotals = getCaseDeathTotalsFromHistoryData(cdcHistoryByJurisdiction);\r\n\r\n        const dataCasesDeathsTotals = getTotalsForEachState(cdcHistoryByJurisdiction);\r\n\r\n        // Get hospital data history for each state, NYC, USA and then merge\r\n        const dataHospitalByState = await fetchJsonData(URL_CDC_HOSPITAL_DATA_BY_STATE_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const dataHospitalUSA =await fetchJsonData(URL_CDC_HOSPTIAL_DATA_USA_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const dataHospitalNYCOnly = await fetchJsonData(URL_NYC_HOSPITAL_DATA + CDC_QUERY_ACCESS_TOKEN);\r\n        const cdcHospitalDataByJurisdiction = dataHospitalByState.concat(dataHospitalUSA).concat(dataHospitalNYCOnly);\r\n\r\n        // Get last sumbission date to use for getting totals\r\n        const lastDate = (dataHospitalByState.reduce(function(prev, current) {\r\n            return (prev.date > current.date) ? prev : current\r\n        })).date\r\n\r\n        // Get NYC last date\r\n        const nycLastDate = (dataHospitalNYCOnly.reduce(function(prev, current) {\r\n            return (prev.date > current.date) ? prev : current\r\n        })).date\r\n\r\n        // Get hospital data TOTALS from history\r\n        const dataHospitalTotals = cdcHospitalDataByJurisdiction\r\n            .filter(function (data) {\r\n                const date = data.date;\r\n                return (data.state==='NYC' && date===nycLastDate) || date === lastDate;\r\n            });    \r\n        \r\n        // Merge TOTALS for cases and deaths and hospitals into one object \r\n        const cdcTotalsByJurisdiction = await getTotalsByJurisdiction(dataCasesDeathsTotals, dataHospitalTotals);\r\n        \r\n        // Get CDC Monthly Death Totals by Age Groups \r\n        const deathsByAgeGroups = await fetchJsonData(URL_CDC_DEATHS_BY_AGE + CDC_QUERY_ACCESS_TOKEN);\r\n        \r\n        // Get Vaccinations by Age Groups   \r\n        const cdcVaxByAgeGroup = await fetchJsonData(URL_CDC_VACCINATIONS_BY_AGE + CDC_QUERY_ACCESS_TOKEN);\r\n\r\n        // Get CDC Excess Deaths by Age Groups\r\n        const cdcExcessDeathsByAgeGroups = await fetchJsonData(URL_CDC_EXCESS_DEATHS_BY_AGE + CDC_QUERY_ACCESS_TOKEN);\r\n\r\n        return {\r\n            dataRefreshTimestamp: new Date(),\r\n            cdcTotalsByJurisdiction: cdcTotalsByJurisdiction,\r\n            cdcHistoryByJurisdiction: cdcHistoryByJurisdiction,\r\n            cdcHospitalDataByJurisdiction: cdcHospitalDataByJurisdiction,\r\n            cdcVaxByAgeGroup: cdcVaxByAgeGroup,\r\n            cdcExcessDeathsByAgeGroup: cdcExcessDeathsByAgeGroups,\r\n            cdcDeathsByAgeGroup : deathsByAgeGroups\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nexport const fetchJsonData = async(url) => {\r\n    try{\r\n        let json = null;\r\n\r\n        //console.log(\"url = \" + url);\r\n\r\n        // U.S. States Historical Data\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n            json = await response.json();\r\n        }\r\n        else {\r\n            throw Error(response.statusText);\r\n        }\r\n        \r\n        return json;\r\n    }\r\n    catch (error) {\r\n        console.log(\"fetchJsonData() error!\", error);\r\n    }\r\n}\r\n\r\nexport const getTotalsForUSA = (totalsByState) => {\r\n\r\n    let total_cases = 0;\r\n    let total_deaths = 0;\r\n    let inpatient_beds = 0;\r\n    let inpatient_beds_covid = 0;\r\n    let icu_beds = 0;\r\n    let icu_beds_covid = 0;\r\n    let partiallyVaccinated = 0;\r\n    let fullyVaccinated = 0;\r\n\r\n    totalsByState.forEach(data => {\r\n        total_cases += Number(data.total_cases);\r\n        total_deaths += Number(data.total_deaths);\r\n        inpatient_beds += Number(data.inpatient_beds);\r\n        inpatient_beds_covid += Number(data.inpatient_beds_covid);\r\n        icu_beds += Number(data.icu_beds);\r\n        icu_beds_covid += Number(data.icu_beds_covid);\r\n        partiallyVaccinated += Number(data.partiallyVaccinated);\r\n        fullyVaccinated += Number(data.fullyVaccinated);\r\n    })\r\n\r\n    let totals = {\r\n        state:\"USA\", \r\n        total_cases: total_cases, \r\n        total_deaths: total_deaths,\r\n        inpatient_beds: inpatient_beds,\r\n        inpatient_beds_covid: inpatient_beds_covid,\r\n        icu_beds: icu_beds,\r\n        icu_beds_covid: icu_beds_covid,\r\n        partiallyVaccinated: partiallyVaccinated,\r\n        fullyVaccinated: fullyVaccinated\r\n    }\r\n\r\n    return totals;\r\n}\r\n\r\nconst getTotalsByJurisdiction = async(dataCasesDeathsByState, dataHospitalTotals) => {\r\n\r\n    let totalsByState= [];\r\n    let stateKeys = getStateCodes();\r\n    \r\n    stateKeys.forEach((state) => {\r\n\r\n        let casesDeathsData =dataCasesDeathsByState.find(data => data.state===state);\r\n        let hospitalData = dataHospitalTotals.find(data => data.state===state);\r\n        if (!hospitalData)\r\n            hospitalData = {\r\n                inpatient_beds: 0,\r\n                inpatient_beds_covid: 0,\r\n                icu_beds: 0,\r\n                icu_beds_covid: 0\r\n            }\r\n\r\n        totalsByState.push({\r\n            state: state,\r\n            total_cases: Number(casesDeathsData.total_cases),\r\n            total_deaths: Number(casesDeathsData.total_deaths),\r\n            inpatient_beds: Number(hospitalData.inpatient_beds),\r\n            inpatient_beds_covid: Number(hospitalData.inpatient_beds_covid),\r\n            icu_beds: Number(hospitalData.icu_beds),\r\n            icu_beds_covid: Number(hospitalData.icu_beds_covid)\r\n        });\r\n      \r\n    })\r\n\r\n    return totalsByState;\r\n}\r\n\r\n\r\nconst getTotalsForEachState = (stateHistoryData) => {\r\n    var totals = [];\r\n    stateHistoryData.forEach((record) => {\r\n                \r\n        const new_case = Number(record.new_case);\r\n        const new_death = Number(record.new_death);\r\n        const state = record.state;\r\n\r\n        // Debugging - CDC records have negative values, was affecting totals\r\n        // if (new_case < 0 || new_death < 0)\r\n        //    console.log(\"negative values found: \" + JSON.stringify(record)); \r\n\r\n        const stateTotal = totals.find(data => data.state===state);\r\n\r\n        if (!stateTotal) {\r\n            const newStateTotal = {\r\n                state: state,\r\n                total_cases: new_case,\r\n                total_deaths: new_death\r\n            }\r\n\r\n            totals.push(newStateTotal);\r\n        }\r\n        else {\r\n            stateTotal.total_cases += new_case;\r\n            stateTotal.total_deaths += new_death;\r\n        }\r\n    });\r\n\r\n    return totals;\r\n}\r\n","import {CHART_IDENTIFIER} from \"./data-fields\";\r\n\r\n\r\nconst DATASOURCES = [\r\n    {\r\n        id: \"NYC\",\r\n        url: \"https://health.data.ny.gov/Health/New-York-State-Statewide-COVID-19-Hospitalizations/jw46-jpb7/data\",\r\n        label: \"Healthdata.gov\",\r\n        comment: \"\"\r\n    },\r\n    {\r\n        id: CHART_IDENTIFIER.CASES_DEATHS,\r\n        url: \"https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36\",\r\n        label: \"Center for Disease Control\",\r\n        comment: \"\"\r\n    },\r\n    {\r\n        id: CHART_IDENTIFIER.HOSPITAL_DATA,\r\n        url: \"https://healthdata.gov/Hospital/COVID-19-Reported-Patient-Impact-and-Hospital-Capa/g62h-syeh\",\r\n        label: \"Center for Disease Control\",\r\n        comment: \"\"\r\n    },\r\n    {\r\n        id: CHART_IDENTIFIER.DEATHS_BY_AGE,\r\n        url: \"https://data.cdc.gov/NCHS/Provisional-COVID-19-Death-Counts-by-Sex-Age-and-S/9bhg-hcku\",\r\n        label: \"Center for Disease Control\",\r\n        comment: \"Note: This dataset is update weekly.\"\r\n    },\r\n    {\r\n        id: CHART_IDENTIFIER.AGE_GROUP_SUMMARY,\r\n        url: \"https://data.cdc.gov/NCHS/Provisional-COVID-19-Death-Counts-by-Sex-Age-and-S/9bhg-hcku\",\r\n        label: \"Center for Disease Control\",\r\n        comment: \"Note: This dataset is update weekly.\"\r\n    },\r\n    {\r\n        id: CHART_IDENTIFIER.VAX_FIRST_DOSE,\r\n        url: \"https://data.cdc.gov/Vaccinations/COVID-19-Vaccination-and-Case-Trends-by-Age-Group-/gxj9-t96f\",\r\n        label: \"Center for Disease Control\",\r\n        comment: \"Note: Available at U.S. level only. State level data not available.\"\r\n    },\r\n    {\r\n        id: CHART_IDENTIFIER.VAX_COMPLETE_DOSE,\r\n        url: \"https://data.cdc.gov/Vaccinations/COVID-19-Vaccination-and-Case-Trends-by-Age-Group-/gxj9-t96f\",\r\n        label: \"Center for Disease Control\",\r\n        comment: \"Note: Available at U.S. level only. State level data not available.\"\r\n    },\r\n    {\r\n        id: CHART_IDENTIFIER.EXCESS_DEATHS,\r\n        url: \"https://data.cdc.gov/NCHS/AH-Excess-Deaths-by-Sex-Age-and-Race-and-Hispanic-/m74n-4hbs\",\r\n        label: \"Center for Disease Control\",\r\n        comment: \"Note: Available at U.S. level only. State level data not available.\"\r\n    },\r\n    {\r\n        id: CHART_IDENTIFIER.EXCESS_DEATHS_PCT,\r\n        url: \"https://data.cdc.gov/NCHS/AH-Excess-Deaths-by-Sex-Age-and-Race-and-Hispanic-/m74n-4hbs\",\r\n        label: \"Center for Disease Control\",\r\n        comment: \"Note: Available at U.S. level only. State level data not available.\"\r\n    }    \r\n];\r\n\r\nexport const getDataSource = (chartId) => {\r\n\r\n    const dataSource = DATASOURCES.find(rec => rec.id === chartId);\r\n\r\n    return dataSource;\r\n}\r\n","export const getTimeSeriesChartOptions = (displayMonthFormat=false, displayPercentageValue=false, displayNegativeValues=false) => {\r\n\r\n    return {\r\n        responsive: true,\r\n        aspectRatio: 1,\r\n        maintainAspectRatio: false,\r\n        title: { display: false},\r\n        tooltips: {\r\n            mode: 'index', \r\n            intersect: false,\r\n            bodyAlign: 'left',\r\n            position: 'nearest',\r\n            bodySpacing: 5,\r\n            callbacks: {\r\n                label: function(tooltipItem, data) {\r\n                    var type = data.datasets[tooltipItem.datasetIndex].label;\r\n                    var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n                    var displayText = \"\"; \r\n                    if (displayPercentageValue)\r\n                        displayText = type + \" : \" + parseFloat(value) + \"%\"\r\n                    else   \r\n                        displayText = type + \" : \" + parseInt(value).toLocaleString()\r\n\r\n                    return displayText;\r\n                }\r\n            }\r\n        },\r\n        interaction: {\r\n            intersect: false,\r\n            axis: 'x'\r\n        },\r\n        legend: {\r\n            position:'top', \r\n            labels: {\r\n                boxWidth:5, \r\n                fontSize:14,\r\n                usePointStyle:true, \r\n                padding:15\r\n            }\r\n        },\r\n        elements: {\r\n            point:{\r\n                radius: 0\r\n            }\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                display: true,\r\n                type: 'time',\r\n                gridLines: {\r\n                    display:true\r\n                },\r\n                time: {\r\n                    minUnit: 'month',\r\n                    tooltipFormat: displayMonthFormat ? \"MMM YYYY\" : 'MM/DD/YYYY'\r\n                },\r\n                scaleLabel: {\r\n                    display: true\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                display: true,\r\n                scaleLabel: {\r\n                    display: false\r\n                },\r\n                ticks: {\r\n                    min: displayNegativeValues ? undefined : 0, \r\n                    callback: function(label) {\r\n                        return formatYAxisDisplay(label);\r\n                    }                \r\n                }\r\n            }]\r\n        }\r\n    }\r\n}\r\n\r\nexport const CHART_OPTIONS_FOR_AGE_GROUPS = {\r\n    aspectRatio: 1,\r\n    maintainAspectRatio: false,\r\n    responsive: true,\r\n    title: { display: false},\r\n    tooltips: {\r\n        mode: 'index', \r\n        intersect: false,\r\n        bodyAlign: 'left',\r\n        footerFontStyle: 'normal',\r\n        bodySpacing: 5,\r\n        titleMarginBottom: 10,\r\n        footerMarginTop: 10,\r\n        callbacks: {\r\n            title: function(tooltipItem) {\r\n                return \"Ages \" + tooltipItem[0].label \r\n            },\r\n\r\n            label: function(tooltipItem, data) {\r\n                var type = data.datasets[tooltipItem.datasetIndex].label;\r\n                var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n                return type + \" : \" + parseInt(value).toLocaleString();\r\n            },\r\n\r\n            footer: function(tooltipItem) {\r\n                const covidDeaths = tooltipItem[0].value;\r\n                const allDeaths = tooltipItem[1].value;\r\n                const percent = parseFloat((covidDeaths/allDeaths) * 100).toFixed(1)+\"%\";\r\n                return [percent + \" of deaths\",\"due to COVID-19\"] ;\r\n            }\r\n\r\n          }\r\n    },\r\n    hover: {mode: 'nearest', intersect: true},\r\n    legend: {position:'top', labels: {boxWidth:5, fontSize:14, usePointStyle:true, padding: 10}},\r\n    elements: {\r\n        point:{\r\n            radius: 0\r\n        }\r\n    },\r\n    \r\n    scales: {\r\n        xAxes:[{\r\n            stacked: true\r\n        }],\r\n        yAxes:[{\r\n            // stacked:false - places bars in FRONT of each other instead of on TOP of each other\r\n            // if set to true, the two bars are combined into one bar with a aggregate total.\r\n            stacked: false, \r\n            ticks: {\r\n                callback: function(label) {\r\n                    return formatYAxisDisplay(label);\r\n                }\r\n              }\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n// Display K for thousands, M for millions\r\n// Instead of 200000 display 200K\r\n// Instead of 1900000 display 1M\r\nconst formatYAxisDisplay = (labelText) => {\r\n\r\n    let label = Number(labelText);\r\n    let newLabel = \"\";\r\n\r\n    if (label >= 1000000) \r\n        newLabel = label / 1000000 + 'M';\r\n    else if (label >= 10000) \r\n        newLabel = label / 1000 + 'K';\r\n    else \r\n        newLabel = label;\r\n\r\n    return newLabel;\r\n}","import {DATA_FIELD_COLORS,  \r\n    CDC_AGE_GROUP_VALUES,\r\n    CDC_FIELDS_FOR_CHART,\r\n    CHART_IDENTIFIER,\r\n    DATA_FIELD_DISPLAY_NAMES,\r\n    NYC_IDENTIFIER\r\n} from './data-fields';\r\nimport {getDataSource} from './data-sources';\r\nimport {getFormattedDateForFiltering,formatISODate,shrinkAgeGroupName,formatDateListForChart, shrinkAgeGroupNameList} from './formatting';\r\nimport {STATIC_STATE_DATA} from './states-data';\r\nimport {getTimeSeriesChartOptions, CHART_OPTIONS_FOR_AGE_GROUPS} from './chart-options';\r\n\r\nexport const getDeathsByAgeGroupSummary = (ageGroupData) => {\r\n\r\n    var summary = [];\r\n\r\n    ageGroupData.forEach(ageGroupRec => {\r\n\r\n        const covid_19_deaths = !Number(ageGroupRec.covid_19_deaths) ? 0 : Number(ageGroupRec.covid_19_deaths);\r\n        const total_deaths = !Number(ageGroupRec.total_deaths) ? 0 : Number(ageGroupRec.total_deaths);\r\n\r\n        const ageGroupSum = summary.find(rec => rec.age_group === ageGroupRec.age_group);\r\n\r\n        if (!ageGroupSum) {\r\n            const age_group_sum = {\r\n                age_group: ageGroupRec.age_group,\r\n                sum_covid_19_deaths: covid_19_deaths,\r\n                sum_total_deaths: total_deaths\r\n            }\r\n            summary.push(age_group_sum);\r\n        }\r\n        else {\r\n            ageGroupSum.sum_covid_19_deaths += covid_19_deaths;\r\n            ageGroupSum.sum_total_deaths += total_deaths;\r\n        }\r\n    });\r\n            \r\n    return summary;\r\n}\r\n\r\nexport const getCDCHistoryDataBySelection = (cdcHistoryByJurisdiction, selectedState, selectedYear) => {\r\n\r\n    const monthsSelected = selectedYear.search(\"months-\");\r\n\r\n    if (monthsSelected > -1) {\r\n        const monthsBack = selectedYear.substr(monthsSelected+7, selectedYear.lenth); \r\n        const dateRange = getDateRangeValues(monthsBack);\r\n\r\n        const startDate = Number(getFormattedDateForFiltering(dateRange.startDate));\r\n        const endDate = Number(getFormattedDateForFiltering(dateRange.endDate));\r\n\r\n        let dataSet = getCDCDataSetByDateRange(cdcHistoryByJurisdiction, selectedState, startDate, endDate);\r\n        return dataSet; \r\n    }\r\n    else {\r\n\r\n        let dataSet = getCDCDataSetByYear(cdcHistoryByJurisdiction, selectedState, selectedYear);\r\n        return dataSet;\r\n\r\n    }\r\n}\r\n\r\nexport const getCDCDataSetByYear = (cdcHistoryByJurisdiction, selectedState, selectedYear) =>{\r\n    \r\n    let dataSet = [];\r\n\r\n    if(selectedYear === \"0\") {\r\n        dataSet = cdcHistoryByJurisdiction\r\n            .filter(stateData => stateData.state === selectedState);\r\n    }\r\n    else {\r\n        dataSet = cdcHistoryByJurisdiction\r\n            .filter(stateData => stateData.state === selectedState && stateData.date.substr(0,4) === selectedYear);  \r\n    }\r\n\r\n    return dataSet.sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n}\r\n\r\n// The variables startDate and endDate are numerical format yyyymmdd\r\nexport const getCDCDataSetByDateRange = (cdcHistoryByJurisdiction, selectedState, startDate, endDate) =>{\r\n    \r\n    let dataSet = cdcHistoryByJurisdiction\r\n        .filter(function (stateData) {\r\n            const date = Number(stateData.date.substr(0,10).replaceAll('-',''));\r\n            return stateData.state === selectedState \r\n                && date >= startDate \r\n                && date <= endDate;\r\n        })\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n\r\n    return dataSet;\r\n}\r\n\r\nexport const getDateRangeValues = (monthsBack) => {\r\n    \r\n    const startDate = new Date(new Date());\r\n    const endDate = new Date(new Date());\r\n\r\n    startDate.setMonth(startDate.getMonth() - monthsBack);\r\n    startDate.setDate(1);\r\n\r\n    return {startDate: formatISODate(startDate), endDate: formatISODate(endDate)} \r\n}\r\n\r\nexport const getChartObjectForDeathsByAgeGroup = (chartConfig) => {\r\n\r\n    const chartId = CHART_IDENTIFIER.DEATHS_BY_AGE;\r\n    const chartTitle = \"Deaths By Age Group\";\r\n\r\n    // This data set uses state name instead of the 2-digit code.\r\n    const state = STATIC_STATE_DATA.find(rec => rec.state === chartConfig.selectedState);\r\n    const filteredData = getCDCHistoryDataBySelection(chartConfig.cdcDeathsByAgeGroup, state.name, chartConfig.selectedYear);\r\n    \r\n    const chartObject = getChartObjectForDataGroupedByAge(chartId, filteredData);\r\n\r\n    chartObject.type = \"line\";\r\n    chartObject.chartTitle = chartTitle;\r\n    chartObject.chartOptions = getTimeSeriesChartOptions(true, false);\r\n    chartObject.dataSource = getDataSource(chartId);\r\n    chartObject.isDataAvailable = filteredData.length > 0;\r\n    \r\n    return chartObject;\r\n\r\n}\r\n\r\n\r\nexport const getChartObjectForVaxFirstByAgeGroup = (chartConfig) => {\r\n\r\n    const chartId = CHART_IDENTIFIER.VAX_FIRST_DOSE;\r\n    const chartTitle = \"Percent Vaxed - First Dose\";\r\n\r\n    const filteredData = getCDCHistoryDataBySelection(chartConfig.cdcVaxByAgeGroup, chartConfig.selectedState, chartConfig.selectedYear);\r\n    const chartObject = getChartObjectForDataGroupedByAge(chartId, filteredData);\r\n       \r\n    chartObject.type = \"line\";\r\n    chartObject.chartTitle = chartTitle;\r\n    chartObject.chartOptions = getTimeSeriesChartOptions(false, true);\r\n    chartObject.dataSource = getDataSource(chartId);\r\n    chartObject.isDataAvailable = filteredData.length > 0;\r\n\r\n    return chartObject;\r\n\r\n}\r\n\r\nexport const getChartObjectForVaxCompleteByAgeGroup = (chartConfig) => {\r\n\r\n    const chartId = CHART_IDENTIFIER.VAX_COMPLETE_DOSE;\r\n    const chartTitle = \"Percent Vaxed - Completed Dose\";\r\n\r\n    const filteredData = getCDCHistoryDataBySelection(chartConfig.cdcVaxByAgeGroup, chartConfig.selectedState, chartConfig.selectedYear);\r\n    const chartObject = getChartObjectForDataGroupedByAge(chartId, filteredData);\r\n\r\n    chartObject.type = \"line\";\r\n    chartObject.chartTitle = chartTitle;\r\n    chartObject.chartOptions = getTimeSeriesChartOptions(false, true);\r\n    chartObject.dataSource = getDataSource(chartId);\r\n    chartObject.isDataAvailable = filteredData.length > 0;\r\n    \r\n    return chartObject;\r\n\r\n}\r\n\r\nexport const getChartObjectForExcessDeathsAgeGroup = (chartConfig) => {\r\n\r\n    const chartId = CHART_IDENTIFIER.EXCESS_DEATHS;\r\n    const chartTitle = \"Excess Deaths By Age Group - Weighted\";\r\n\r\n    const filteredData = getCDCHistoryDataBySelection(chartConfig.cdcExcessDeathsByAgeGroup, chartConfig.selectedState, chartConfig.selectedYear);\r\n    const chartObject = getChartObjectForDataGroupedByAge(chartId, filteredData);\r\n\r\n    chartObject.type = \"line\";\r\n    chartObject.chartTitle = chartTitle;\r\n    chartObject.chartOptions = getTimeSeriesChartOptions();\r\n    chartObject.dataSource = getDataSource(chartId);\r\n    chartObject.isDataAvailable = filteredData.length > 0;\r\n\r\n    return chartObject;\r\n}\r\n\r\nexport const getChartObjectForExcessDeathsAgeGroupPercentage = (chartConfig) => {\r\n\r\n    const chartId = CHART_IDENTIFIER.EXCESS_DEATHS_PCT;\r\n    const chartTitle = \"Percent Excess Deaths - Weighted\";\r\n\r\n    const filteredData = getCDCHistoryDataBySelection(chartConfig.cdcExcessDeathsByAgeGroup, chartConfig.selectedState, chartConfig.selectedYear);\r\n    const chartObject = getChartObjectForDataGroupedByAge(chartId, filteredData);\r\n\r\n    chartObject.type = \"line\";\r\n    chartObject.chartTitle = chartTitle;\r\n    chartObject.chartOptions = getTimeSeriesChartOptions(false, true, true);\r\n    chartObject.dataSource = getDataSource(chartId);\r\n    chartObject.isDataAvailable = filteredData.length > 0;\r\n\r\n    return chartObject;\r\n\r\n}\r\n\r\nexport const getChartObjectForDeathsAndCases = (chartConfig) => {\r\n\r\n    const chartId = CHART_IDENTIFIER.CASES_DEATHS;\r\n    const chartTitle = \"New Cases & Deaths\";\r\n\r\n    const filteredData = getCDCHistoryDataBySelection(chartConfig.cdcHistoryByJurisdiction, chartConfig.selectedState, chartConfig.selectedYear);\r\n    const chartObject = getChartObjectForData(chartId, filteredData);\r\n\r\n    chartObject.type = \"line\";\r\n    chartObject.chartTitle = chartTitle;\r\n    chartObject.chartOptions = getTimeSeriesChartOptions();\r\n    chartObject.dataSource = getDataSource(chartId);\r\n    chartObject.isDataAvailable = filteredData.length > 0;\r\n\r\n    return chartObject;\r\n\r\n}\r\n\r\nexport const getChartObjectForHospitalData = (chartConfig) => {\r\n\r\n    const chartId = CHART_IDENTIFIER.HOSPITAL_DATA;\r\n    const chartTitle = \"New Hospital Inpatient & ICU\";\r\n\r\n    const filteredData = getCDCHistoryDataBySelection(chartConfig.cdcHospitalDataByJurisdiction, chartConfig.selectedState, chartConfig.selectedYear);\r\n    const chartObject = getChartObjectForData(chartId, filteredData);\r\n\r\n    // NYC gets its hospital data from a different source.\r\n    const dataSourceId = chartConfig.selectedState === NYC_IDENTIFIER ? NYC_IDENTIFIER : chartId;\r\n\r\n    chartObject.type = \"line\"; \r\n    chartObject.chartTitle = chartTitle;\r\n    chartObject.chartOptions = getTimeSeriesChartOptions();\r\n    chartObject.dataSource = getDataSource(dataSourceId);\r\n    chartObject.isDataAvailable = filteredData.length > 0;\r\n\r\n    return chartObject;\r\n}\r\n\r\n\r\nexport const getChartObjectDeathsByAgeGroupSummary = (chartConfig) => {\r\n\r\n    const chartId = CHART_IDENTIFIER.AGE_GROUP_SUMMARY;\r\n    const chartTitle = \"Deaths by Age Group 2\";\r\n\r\n    // This data set uses state name instead of the 2-digit code.\r\n    const state = STATIC_STATE_DATA.find(rec => rec.state === chartConfig.selectedState);\r\n    const filteredData = getCDCHistoryDataBySelection(chartConfig.cdcDeathsByAgeGroup, state.name, chartConfig.selectedYear);\r\n\r\n    const dataSet = getDeathsByAgeGroupSummary(filteredData);\r\n    const covid19Deaths = dataSet.map(item => item.sum_covid_19_deaths == null ? 0 : item.sum_covid_19_deaths);\r\n    const totalDeaths = dataSet.map(item => item.sum_total_deaths == null ? 0 : item.sum_total_deaths);\r\n\r\n    const ageGroupsInData = shrinkAgeGroupNameList(CDC_AGE_GROUP_VALUES[chartId]);\r\n    \r\n    const chartDataSet  = [\r\n        {    \r\n            label: \"Covid-19\",\r\n            backgroundColor: \"red\",\r\n            data:covid19Deaths \r\n        },\r\n        { \r\n            label: \"All Deaths\",\r\n            backgroundColor: \"blue\",\r\n            data:totalDeaths\r\n        }\r\n    ];\r\n\r\n\r\n    const chartObject = {\r\n        type: \"bar\",\r\n        chartId: chartId,\r\n        chartDataSet: chartDataSet,\r\n        chartLabels: ageGroupsInData,\r\n        chartTitle: chartTitle,\r\n        chartOptions: CHART_OPTIONS_FOR_AGE_GROUPS,\r\n        dataSource: getDataSource(chartId),\r\n        isDataAvailable: filteredData.length > 0\r\n    }\r\n\r\n    return chartObject;\r\n}\r\n\r\n/**\r\n * Generates a chartObject set for a timeseries chart for data grouped by age. \r\n * Expects data to be grouped by date, age group for example\r\n * \r\n * date         age_group   field1  field2 \r\n * 1/1/2022     0-17        55      33\r\n * 1/1/2022     18-24       55      33\r\n * 1/1/2022     25-34       55      33\r\n * 1/1/2022     35-44       55      33\r\n * \r\n * Sample cdc data with miltiple fields \r\n * [{date: '2020-01-01T00:00:00.000', state: 'Alabama', age_group: '0-17 years', covid_19_deaths: '0', total_deaths: '71}\r\n * {date: '2020-01-01T00:00:00.000',  state: 'Alabama', age_group: '18-29 years', covid_19_deaths: '0', total_deaths: '71}\r\n * {date: '2020-01-01T00:00:00.000',  state: 'Alabama', age_group: '30-39 years', covid_19_deaths: '0', total_deaths: '71}\r\n * {date: '2020-01-01T00:00:00.000',  state: 'Alabama', age_group: '40-49 years', covid_19_deaths: '0', total_deaths: '71}]\r\n * \r\n */\r\nconst getChartObjectForDataGroupedByAge = (chartId, filteredData) => {\r\n\r\n    const chartDataSet = [];\r\n    \r\n    //To group by Age Groups, we get a predefined list for this data set\r\n    const ageGroupsInData = CDC_AGE_GROUP_VALUES[chartId];\r\n\r\n    //For data grouped by age, you can only use 1 field per age group. \r\n    const fieldName = CDC_FIELDS_FOR_CHART[chartId][0];\r\n    \r\n    // Loop through all the predefined age groups\r\n    ageGroupsInData.forEach((ageGroupId, index) => {\r\n\r\n        // Filter data per specified age group to get 1 record per date\r\n        const ageGroupData = filteredData.filter(rec => rec.age_group === ageGroupId)\r\n\r\n        // Create array of the data of the field\r\n        const dataValues = ageGroupData.map(item => !item[fieldName] ? 0 : item[fieldName]);\r\n        const labelText = shrinkAgeGroupName(ageGroupId);\r\n        const dataTotal = dataValues.reduce((a, b) => a + b, 0);\r\n\r\n        const chartRec = {\r\n            fieldName: fieldName,\r\n            label: labelText,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            borderWidth: 1.5,\r\n            fill: false,\r\n            dataTotal: dataTotal,\r\n            data: dataValues\r\n        };\r\n\r\n        chartDataSet.push(chartRec);\r\n    });\r\n\r\n    // Get Date List identified in this dataset\r\n    const chartDateList = filteredData.map(item => item.date.substr(0,10));\r\n\r\n    const chartObject = {\r\n        chartId: chartId,\r\n        chartDataSet: chartDataSet,\r\n        chartLabels: formatDateListForChart(chartDateList)\r\n    }\r\n\r\n    return chartObject\r\n}\r\n\r\n/**\r\n * Generates a chartObject set for a timeseries chart for data by date.\r\n * \r\n * Sample cdc data with miltiple fields \r\n * [{date: '2021-11-18T00:00:00.000', state: 'OH', new_case: '6615.0', new_death: '0.0'}\r\n * {date: '2021-11-18T00:00:00.000', state: 'OK', new_case: '970.0', new_death: '0.0'}\r\n * {date: '2021-11-18T00:00:00.000', state: 'OR', new_case: '1148.0', new_death: '13.0'}\r\n * {date: '2021-11-18T00:00:00.000', state: 'PA', new_case: '6637.0', new_death: '96.0'}]\r\n * \r\n */\r\nconst getChartObjectForData = (chartId, filteredData) => {\r\n\r\n    const chartDataSet = [];\r\n\r\n    const fieldNames = CDC_FIELDS_FOR_CHART[chartId];\r\n    \r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        chartDataSet.push({\r\n            fieldName: fieldName, \r\n            label: DATA_FIELD_DISPLAY_NAMES[fieldName],\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            borderWidth: 1.5,\r\n            dataTotal: 0,\r\n            data: []\r\n            \r\n        })\r\n    })\r\n\r\n    filteredData.forEach(row => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = chartDataSet.find((data => data.fieldName === fieldName))    \r\n            const data = !row[fieldName] ? 0 : row[fieldName];\r\n            fieldData.dataTotal += Number(data);\r\n            fieldData.data.push(data);\r\n        })\r\n    });\r\n\r\n    // Get Date List identified in this dataset\r\n    const chartDateList = filteredData.map(item => item.date.substr(0,10));\r\n\r\n    const chartObject = {\r\n        chartId: chartId,\r\n        chartDataSet: chartDataSet,\r\n        chartLabels: formatDateListForChart(chartDateList)\r\n    }\r\n\r\n    return chartObject\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport \"./dashboard.css\";\r\n\r\nimport CDCChart from '../cdc-chart/cdc-chart.component';\r\nimport ChartConfiguration from '../chart-config/chart-config.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport DataTotals from '../data-totals/data-totals.component';\r\n\r\nimport {getFreshData} from '../../utilities/data-fetching';\r\nimport {getChartObjectForVaxFirstByAgeGroup, \r\n    getChartObjectForDeathsByAgeGroup, \r\n    getChartObjectForVaxCompleteByAgeGroup,\r\n    getChartObjectForExcessDeathsAgeGroup,\r\n    getChartObjectForDeathsAndCases,\r\n    getChartObjectForHospitalData,\r\n    getChartObjectForExcessDeathsAgeGroupPercentage,\r\n    getChartObjectDeathsByAgeGroupSummary} from '../../utilities/chart-data-processing';\r\nimport {setCOVID19Data} from '../../redux/chart-config/chart-config.actions';\r\n\r\nconst Covid19UsDashboard =({setCOVID19Data, isDataLoaded, chartConfig}) => {  \r\n\r\n    useEffect(() => {\r\n\r\n        //console.log(\"useEffect()...\");\r\n        async function loadData() {\r\n            try {   \r\n                if (!isDataLoaded) {\r\n                    //console.log(\"Refreshing Data from CDC...\" + new Date());\r\n                    const freshData = await getFreshData();\r\n                    setCOVID19Data(freshData);\r\n                    //console.log(\"Data Refreshed.\" +  new Date());\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        loadData();\r\n\r\n    },[setCOVID19Data,isDataLoaded]);\r\n    \r\n    return (   \r\n\r\n        <div className=\"dashboard\">\r\n            <div className=\"page-header\">\r\n                <div className=\"page-title\"><span>COVID-19 Data Charts</span> <span>For United States</span></div>\r\n                <div className=\"page-subtitle\">50 U.S. States, D.C. and Puerto Rico</div>\r\n                <ChartConfiguration />\r\n            </div>\r\n            { !isDataLoaded ? ( \r\n                <Spinner/>\r\n            ) : (\r\n                <div className=\"page-layout\">\r\n                    <DataTotals/>\r\n                    \r\n                    <CDCChart chartObjects={getChartObjectForDeathsAndCases(chartConfig)} displaySummary={true}/>   \r\n\r\n                    <CDCChart chartObjects={getChartObjectForHospitalData(chartConfig)} displaySummary={true}/> \r\n\r\n                    <CDCChart chartObjects={getChartObjectForDeathsByAgeGroup(chartConfig)}/>\r\n              \r\n                    <CDCChart chartObjects={getChartObjectDeathsByAgeGroupSummary(chartConfig)} />\r\n\r\n                    <CDCChart chartObjects={getChartObjectForVaxFirstByAgeGroup(chartConfig)}/>\r\n\r\n                    <CDCChart chartObjects={getChartObjectForVaxCompleteByAgeGroup(chartConfig)}/>\r\n\r\n                    <CDCChart chartObjects={getChartObjectForExcessDeathsAgeGroup(chartConfig)} isFullWidthChart={true}/>\r\n                \r\n                    <CDCChart chartObjects={getChartObjectForExcessDeathsAgeGroupPercentage(chartConfig)} isFullWidthChart={true}/>\r\n            \r\n                </div>\r\n            )}\r\n            <div className=\"page-footer\">\r\n                Data Sources:<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://data.cdc.gov\")}>Center For Disease Control</span><br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://healthdata.gov/\")}>Healthdata.gov</span><br/>\r\n                ~ ~ ~<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://tanyamiranda.github.io/\")}>Contact Developer</span><br/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    chartConfig: state.chartConfig,\r\n    isDataLoaded: state.chartConfig.isDataLoaded\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCOVID19Data: (data) => dispatch(setCOVID19Data(data))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Covid19UsDashboard);","import React from 'react';\r\n\r\nimport Covid19UsDashboard from './components/dashboard/dashboard.component';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Covid19UsDashboard/>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ChartConfigTypes from './chart-config.types';\r\nimport {USA_IDENTIFIER, YEARS_DEFAULT} from '../../utilities/data-fields';\r\n\r\nconst INITIAL_STATE = {\r\n    dataRefreshTimestamp: null,\r\n    isDataLoaded: false,\r\n    selectedState: null,\r\n    selectedYear:null,   \r\n    selectedFields: []    \r\n};\r\n\r\nconst chartConfigReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ChartConfigTypes.SET_COVID19_DATA: \r\n            return {\r\n                selectedState: USA_IDENTIFIER,\r\n                selectedYear: YEARS_DEFAULT,\r\n                isDataLoaded: true,\r\n                cdcHistoryByJurisdiction: action.payload.cdcHistoryByJurisdiction,\r\n                cdcTotalsByJurisdiction: action.payload.cdcTotalsByJurisdiction,\r\n                cdcHospitalDataByJurisdiction : action.payload.cdcHospitalDataByJurisdiction,\r\n                cdcVaxByAgeGroup: action.payload.cdcVaxByAgeGroup,\r\n                cdcExcessDeathsByAgeGroup: action.payload.cdcExcessDeathsByAgeGroup,\r\n                cdcDeathsByAgeGroup: action.payload.cdcDeathsByAgeGroup\r\n            }\r\n            \r\n        case ChartConfigTypes.SET_STATE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedState: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_YEAR_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedYear: action.payload\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n        \r\n    }\r\n}\r\n\r\nexport default chartConfigReducer;","import {combineReducers} from 'redux';\r\n\r\nimport chartConfigReducer from './chart-config/chart-config.reducer';\r\n\r\nexport default combineReducers({\r\n    chartConfig: chartConfigReducer\r\n});\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewareObjects = [];\r\n\r\n//Only use logger in development environement\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewareObjects.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewareObjects));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}