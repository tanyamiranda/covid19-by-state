{"version":3,"sources":["serviceWorker.js","utilities/data-fields.js","utilities/population-estimates.js","utilities/data-processing.js","redux/chart-config/chart-config.types.js","components/config-section/config-section.component.jsx","components/chart-config/chart-config.component.jsx","redux/chart-config/chart-config.actions.js","components/chart-display/chart-display.component.jsx","utilities/formatting.js","components/chart-container/chart-container.component.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","components/overview/overview.component.jsx","components/county-data/county-data.component.jsx","components/demographics/demographics.component.jsx","components/dashboard/dashboard.component.jsx","App.js","redux/chart-config/chart-config.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DATE_RANGES","15","30","45","60","90","120","150","180","CHART_OPTIONS","responsive","aspectRatio","maintainAspectRatio","title","display","tooltips","mode","intersect","hover","legend","position","labels","boxWidth","fontSize","usePointStyle","elements","point","radius","layout","padding","left","right","top","bottom","scales","xAxes","ticks","min","callback","dataLabel","index","scaleLabel","yAxes","beginAtZero","DATA_FIELD_COLORS","US_STATES_DATA","USA","AL","AK","AR","AZ","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IA","IN","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NC","ND","NE","NV","NH","NJ","NM","NY","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VA","WA","WI","WV","WY","DATA_FIELD_GROUPS","increase","hospitalization","testing","DATA_FIELD_GROUPS_DISPLAY_NAME","DATA_FIELD_DISPLAY_NAMES","deathIncrease","positiveIncrease","hospitalizedIncrease","hospitalizedCurrently","inIcuCurrently","onVentilatorCurrently","positive","negative","pending","totalTestResults","DEFAULT_DATA_FIELD","COUNTY_SORT_FIELDS","STATE_POPULATION","getFreshData","a","stateHistoryData","stateInformation","countryHistoryData","stateCountyInfo","deathsByAgeGroups","fetchStateData","fetchCountyData","fetchJsonData","statesHistoryData","url","json","fetch","response","ok","Error","statusText","forEach","data","name","website","covid19Site","twitter","dataQualityGrade","totalDeath","death","totalPositive","totalRecovered","recovered","population","POPULATION_ESTIMATES","undefined","estimatedPopulation","stateCountyData","text","csvText","parseCountyCSVData","filter","deaths","cases","csv","lines","split","result","i","length","currentline","county","stateName","push","ChartConfigTypes","SET_STATE_SELECTION","SET_DATE_RANGE_SELECTION","SET_FIELD_SELECTION","SET_COVID19_DATA","SET_STATE_HISTORY_DATA","ConfigSection","fieldName","fieldDefaultValue","fieldClickEvent","fieldDataMap","keys","Object","className","defaultValue","onChange","map","item","key","value","connect","selectedState","chartConfig","selectedDateRange","dispatch","setStateSelection","userSelectedState","type","payload","setDateRangeSelection","userSelectedDateRange","setFieldSelection","userSelectedFields","fieldGroupsMap","groupName","event","target","currentLineChart","ChartDisplay","chartType","chartOptions","chartLabels","chartDataSet","chartContainer","useRef","useState","chartInstance","setChartInstance","useEffect","current","options","datasets","destroy","Chart","id","ref","getDisplayNumber","num","Intl","NumberFormat","useGrouping","format","getFormattedDateForFiltering","date","d","Date","month","getMonth","day","getDate","year","getFullYear","getDateDisplayString","getPercentage","partialNum","totalNum","toFixed","selectedFields","now","yesterday","setDate","Number","startDate","endDate","dataSet","sort","b","getCountryHistoryData","stateData","getHistoryByState","fieldNames","fieldDatasets","label","fill","backgroundColor","borderColor","borderWidth","dayRecord","find","getChartDataset","dateList","datesList","self","indexOf","newDateList","dateString","String","substring","getDateListFromData","onClick","open","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","stateInfo","percentPositive","percentTested","percentDeath","percentHospitalized","sortField","setSortField","countyData","setCountyData","tempData","toLowerCase","sortCountyData","x","y","countyLabel","casesLabel","deathsLabel","compareTextNumbers","numA","replace","numB","dataFetchedSuccessfully","Array","isArray","dataDate","data_as_of","age_group","includes","sum_covid_19_deaths","dataRefreshedTimestamp","setCOVID19Data","freshData","loadData","App","INITIAL_STATE","chartConfigReducer","action","toLocaleString","combineReducers","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9ae157af.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const DATE_RANGES = {\r\n    15: \"Last 15 days\",\r\n    30: \"Last 30 days\",\r\n    45: \"Last 45 days\",\r\n    60: \"Last 60 days\",\r\n    90: \"Last 3 months\",\r\n    120: \"Last 4 months\",\r\n    150: \"Last 5 months\",\r\n    180: \"Last 6 Months\"\r\n}\r\n\r\nexport const CHART_OPTIONS = {\r\n    responsive: true,\r\n    aspectRatio: 1,\r\n    maintainAspectRatio: false,\r\n    title: { display: false},\r\n    tooltips: {mode: 'index', intersect: false},\r\n    hover: {mode: 'nearest', intersect: true},\r\n    legend: {position:'top', labels: {boxWidth:5, fontSize:14, usePointStyle:true}},\r\n    elements: {\r\n        point:{\r\n            radius: 0\r\n        }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0\r\n        }},\r\n    scales: {\r\n        xAxes: [{\r\n            display: true,\r\n            ticks: {\r\n                min: 0,\r\n                callback: function(dataLabel, index) {\r\n                    // Hide the label of every 2nd dataset. return null to hide the grid line too\r\n                    return index % 3 === 0 ? dataLabel : '';\r\n                }\r\n            },\r\n            scaleLabel: {\r\n                display: true\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            display: true,\r\n            padding:0,\r\n            scaleLabel: {\r\n                display: false\r\n            },\r\n            ticks: {\r\n                min: 0,\r\n                beginAtZero:true\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    '#138E05',\r\n    '#A15B81',\r\n    '#2E16A6',\r\n    '#146AD4',\r\n    '#A9D422',\r\n    '#18F8BB',\r\n    '#AFC044',\r\n    '#3B9793',\r\n    '#822611',\r\n    '#FB2E76',\r\n    '#A5CA71',\r\n    '#983538',\r\n    '#082BD9',\r\n    '#2E136A',\r\n    '#05BB78',\r\n    '#44A4AD',\r\n    '#28FD7E',\r\n    '#387862'\r\n];\r\n\r\nexport const USA_IDENTIFIER = \"USA\";\r\n\r\nexport const US_STATES_DATA = {\r\n    USA:\"United States\",\r\n    AL:\"Alabama\",\r\n    AK:\"Alaska\",\r\n    AR:\"Arkansas\",\r\n    AZ:\"Arizona\",\r\n    CA:\"California\", \r\n    CO:\"Colorado\", \r\n    CT:\"Connecticut\", \r\n    DE:\"Delaware\",\r\n    DC:\"District Of Columbia\", \r\n    FL:\"Florida\", \r\n    GA:\"Georgia\",\r\n    HI:\"Hawaii\", \r\n    ID:\"Idaho\", \r\n    IL:\"Illinois\", \r\n    IA:\"Iowa\", \r\n    IN:\"Indiana\", \r\n    KS:\"Kansas\", \r\n    KY:\"Kentucky\", \r\n    LA:\"Louisiana\",\r\n    ME:\"Maine\",  \r\n    MD:\"Maryland\",\r\n    MA:\"Massachusetts\", \r\n    MI:\"Michigan\",\r\n    MN:\"Minnesota\",\r\n    MS:\"Mississippi\", \r\n    MO:\"Missouri\", \r\n    MT:\"Montana\", \r\n    NC:\"North Carolina\", \r\n    ND:\"North Dakota\", \r\n    NE:\"Nebraska\", \r\n    NV:\"Nevada\",\r\n    NH:\"New Hampshire\", \r\n    NJ:\"New Jersey\", \r\n    NM:\"New Mexico\",  \r\n    NY:\"New York\", \r\n    OH:\"Ohio\", \r\n    OK:\"Oklahoma\", \r\n    OR:\"Oregon\", \r\n    PA:\"Pennsylvania\", \r\n    PR:\"Puerto Rico\", \r\n    RI:\"Rhode Island\",\r\n    SC:\"South Carolina\", \r\n    SD:\"South Dakota\", \r\n    TN:\"Tennessee\", \r\n    TX:\"Texas\", \r\n    UT:\"Utah\", \r\n    VT:\"Vermont\", \r\n    VA:\"Virginia\",\r\n    WA:\"Washington\", \r\n    WI:\"Wisconsin\", \r\n    WV:\"West Virginia\", \r\n    WY:\"Wyoming\"\r\n}\r\n\r\n\r\nexport const DATA_FIELD_GROUPS = {\r\n    \r\n    increase: [\r\n        \"positiveIncrease\",\r\n        \"deathIncrease\",\r\n        \"hospitalizedIncrease\"\r\n    ],\r\n    hospitalization: [\r\n        \"hospitalizedCurrently\",\r\n        \"inIcuCurrently\",\r\n        \"onVentilatorCurrently\"\r\n    ],\r\n    testing:[\r\n        \"positive\",\r\n        \"negative\",\r\n        \"pending\",\r\n        \"totalTestResults\"\r\n    ]\r\n};\r\n\r\nexport const DATA_FIELD_GROUPS_DISPLAY_NAME = {\r\n    increase: \"Daily Increases\",\r\n    hospitalization: \"Current Hospitalizations\",\r\n    testing: \"Testing Totals\"\r\n}\r\n\r\nexport const DATA_FIELD_DISPLAY_NAMES = {   \r\n    deathIncrease: \"New Deaths\",\r\n    positiveIncrease: \"New Cases\",\r\n    hospitalizedIncrease: \"New Hospitalizations\",\r\n\r\n    hospitalizedCurrently: \"Hospitalized\",\r\n    inIcuCurrently: \"In ICU\",\r\n    onVentilatorCurrently: \"On Ventilators\",\r\n\r\n    positive: \"Positive\",\r\n    negative: \"Negative\",\r\n    pending: \"Pending\",\r\n    totalTestResults: \"Tests Taken\"\r\n};\r\n\r\n\r\nexport const DEFAULT_DATA_FIELD = [\r\n    \"positiveIncrease\",\r\n    \"deathIncrease\",\r\n    \"hospitalizedIncrease\"\r\n]\r\n\r\nexport const  STATE_INFO_JSON_FIELDS = [\r\n    \"dataQualityGrade\",\r\n    \"positive\",\r\n    \"death\"\r\n];\r\n\r\nexport const COUNTY_SORT_FIELDS = {\r\n    SORT_BY_DEATHS : \"deaths\",\r\n    SORT_BY_CASES : \"cases\",\r\n    SORT_BY_COUNTY : \"county\"\r\n}","/* \r\nThis is census estimates for July 2019. \r\nStripped from http://www2.census.gov/programs-surveys/popest/datasets/2010-2019/national/totals/nst-est2019-alldata.csv\r\n\r\nSince this data does not change, no need to fetch it every time.\r\n*/\r\n\r\nconst STATE_POPULATION = [];\r\n\r\nSTATE_POPULATION[\"USA\"] = 328239523;\r\nSTATE_POPULATION[\"Northeast Region\"] = 55982803;\r\nSTATE_POPULATION[\"Midwest Region\"] = 68329004;\r\nSTATE_POPULATION[\"South Region\"] = 125580448;\r\nSTATE_POPULATION[\"West Region\"] = 78347268;\r\nSTATE_POPULATION[\"Alabama\"] = 4903185;\r\nSTATE_POPULATION[\"Alaska\"] = 731545;\r\nSTATE_POPULATION[\"Arizona\"] = 7278717;\r\nSTATE_POPULATION[\"Arkansas\"] = 3017804;\r\nSTATE_POPULATION[\"California\"] = 39512223;\r\nSTATE_POPULATION[\"Colorado\"] = 5758736;\r\nSTATE_POPULATION[\"Connecticut\"] = 3565287;\r\nSTATE_POPULATION[\"Delaware\"] = 973764;\r\nSTATE_POPULATION[\"District of Columbia\"] = 705749;\r\nSTATE_POPULATION[\"Florida\"] = 21477737;\r\nSTATE_POPULATION[\"Georgia\"] = 10617423;\r\nSTATE_POPULATION[\"Hawaii\"] = 1415872;\r\nSTATE_POPULATION[\"Idaho\"] = 1787065;\r\nSTATE_POPULATION[\"Illinois\"] = 12671821;\r\nSTATE_POPULATION[\"Indiana\"] = 6732219;\r\nSTATE_POPULATION[\"Iowa\"] = 3155070;\r\nSTATE_POPULATION[\"Kansas\"] = 2913314;\r\nSTATE_POPULATION[\"Kentucky\"] = 4467673;\r\nSTATE_POPULATION[\"Louisiana\"] = 4648794;\r\nSTATE_POPULATION[\"Maine\"] = 1344212;\r\nSTATE_POPULATION[\"Maryland\"] = 6045680;\r\nSTATE_POPULATION[\"Massachusetts\"] = 6892503;\r\nSTATE_POPULATION[\"Michigan\"] = 9986857;\r\nSTATE_POPULATION[\"Minnesota\"] = 5639632;\r\nSTATE_POPULATION[\"Mississippi\"] = 2976149;\r\nSTATE_POPULATION[\"Missouri\"] = 6137428;\r\nSTATE_POPULATION[\"Montana\"] = 1068778;\r\nSTATE_POPULATION[\"Nebraska\"] = 1934408;\r\nSTATE_POPULATION[\"Nevada\"] = 3080156;\r\nSTATE_POPULATION[\"New Hampshire\"] = 1359711;\r\nSTATE_POPULATION[\"New Jersey\"] = 8882190;\r\nSTATE_POPULATION[\"New Mexico\"] = 2096829;\r\nSTATE_POPULATION[\"New York\"] = 19453561;\r\nSTATE_POPULATION[\"North Carolina\"] = 10488084;\r\nSTATE_POPULATION[\"North Dakota\"] = 762062;\r\nSTATE_POPULATION[\"Ohio\"] = 11689100;\r\nSTATE_POPULATION[\"Oklahoma\"] = 3956971;\r\nSTATE_POPULATION[\"Oregon\"] = 4217737;\r\nSTATE_POPULATION[\"Pennsylvania\"] = 12801989;\r\nSTATE_POPULATION[\"Rhode Island\"] = 1059361;\r\nSTATE_POPULATION[\"South Carolina\"] = 5148714;\r\nSTATE_POPULATION[\"South Dakota\"] = 884659;\r\nSTATE_POPULATION[\"Tennessee\"] = 6829174;\r\nSTATE_POPULATION[\"Texas\"] = 28995881;\r\nSTATE_POPULATION[\"Utah\"] = 3205958;\r\nSTATE_POPULATION[\"Vermont\"] = 623989;\r\nSTATE_POPULATION[\"Virginia\"] = 8535519;\r\nSTATE_POPULATION[\"Washington\"] = 7614893;\r\nSTATE_POPULATION[\"West Virginia\"] = 1792147;\r\nSTATE_POPULATION[\"Wisconsin\"] = 5822434;\r\nSTATE_POPULATION[\"Wyoming\"] = 578759;\r\nSTATE_POPULATION[\"Puerto Rico\"] = 3193694;\r\nSTATE_POPULATION[\"District Of Columbia\"] = 705749; \r\n\r\nexport default STATE_POPULATION;","import {DATA_FIELD_COLORS,USA_IDENTIFIER, DATA_FIELD_DISPLAY_NAMES} from './data-fields';\r\nimport POPULATION_ESTIMATES from './population-estimates';\r\n\r\nexport const getDateListFromData = (stateData) => {\r\n\r\n    const datesList = stateData.map(item => item.date)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var month = Number(dateString.substring(4,6));\r\n        var day = Number(dateString.substring(6,8));\r\n\r\n        newDateList.push(month + \"/\" + day);\r\n    });\r\n\r\n    return newDateList;\r\n}\r\n\r\nexport const getHistoryByState = (stateHistoryData, state, startDate, endDate) => {\r\n    \r\n    return stateHistoryData\r\n        .filter(stateData => stateData.state === state && stateData.date >= startDate && stateData.date <= endDate)\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n    \r\n}    \r\n\r\nexport const getChartDataset = (stateData, fieldNames) => {\r\n\r\n    const fieldDatasets = [];\r\n\r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        fieldDatasets.push({\r\n            fieldName: fieldName, \r\n            label: DATA_FIELD_DISPLAY_NAMES[fieldName],\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            borderWidth: 1.5,\r\n            data: []\r\n        })\r\n    })\r\n\r\n    stateData.forEach(dayRecord => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = fieldDatasets.find((data => data.fieldName === fieldName))    \r\n            fieldData.data.push(!dayRecord[fieldName] || dayRecord[fieldName] < 0 ? 0 : dayRecord[fieldName]);\r\n        })\r\n    });\r\n\r\n    return fieldDatasets;\r\n}\r\n\r\nexport const getFreshData = async() => {\r\n    \r\n    //console.log(\"Fetching Data from https://covidtracking.com/...\");\r\n\r\n    let stateHistoryData = [];\r\n    let stateInformation = [];\r\n    let countryHistoryData = [];\r\n    let stateCountyInfo = [];\r\n    let deathsByAgeGroups = []\r\n\r\n    try {\r\n\r\n        stateInformation = await fetchStateData();\r\n        stateCountyInfo = await fetchCountyData();\r\n        stateHistoryData = await fetchJsonData('https://covidtracking.com/api/v1/states/daily.json');\r\n        countryHistoryData = await fetchJsonData('https://covidtracking.com/api/v1/us/daily.json');\r\n        deathsByAgeGroups = await fetchJsonData('https://data.cdc.gov/resource/9bhg-hcku.json?$select=data_as_of,state,age_group,sum(covid_19_deaths)&$group=data_as_of,state,age_group&$where=sex%20in%20(%27Male%27,%27Female%27)&$order=state');\r\n\r\n        return {\r\n            statesHistoryData: stateHistoryData,\r\n            stateInformation: stateInformation,\r\n            countryHistoryData: countryHistoryData,\r\n            stateCountyInfo: stateCountyInfo,\r\n            deathsByAgeGroups: deathsByAgeGroups\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const getCountryHistoryData = (countryHistoryData, startDate, endDate) => {\r\n\r\n    return countryHistoryData\r\n        .filter(data => data.date >= startDate && data.date <= endDate )\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n    \r\n}\r\n\r\nexport const fetchJsonData = async(url) => {\r\n    try{\r\n\r\n        let json = null;\r\n\r\n        // U.S. States Historical Data\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n            json = await response.json();\r\n        }\r\n        else {\r\n            throw Error(response.statusText);\r\n        }\r\n        \r\n        return json;\r\n    }\r\n    catch (error) {\r\n        console.log(\"fetchJsonData() error!\", error);\r\n    }\r\n}\r\n\r\nconst fetchStateData = async() => {\r\n\r\n    try {\r\n        const stateInformation = [];\r\n\r\n        // U.S. States Data - 1 record per state\r\n        const stateJson = await fetchJsonData('https://covidtracking.com/api/v1/states/info.json');\r\n        stateJson.forEach(data => {\r\n            stateInformation[data.state] = {\r\n                name: data.name,\r\n                website: data.covid19Site,\r\n                twitter: data.twitter\r\n            }\r\n        })\r\n\r\n        // U.S. States Latest Toals Data - 1 record per state\r\n        const statesLatestJson = await fetchJsonData('https://covidtracking.com/api/v1/states/current.json');\r\n        statesLatestJson.forEach(data => {\r\n            stateInformation[data.state].dataQualityGrade = data.dataQualityGrade;\r\n            stateInformation[data.state].totalDeath = data.death;\r\n            stateInformation[data.state].totalPositive = data.positive;\r\n            stateInformation[data.state].totalTestResults = data.totalTestResults;\r\n            stateInformation[data.state].totalRecovered = data.recovered;\r\n            stateInformation[data.state].hospitalizedCurrently = data.hospitalizedCurrently;\r\n            \r\n\r\n            let population = POPULATION_ESTIMATES[stateInformation[data.state].name];\r\n            if (population === undefined)\r\n                population=-1;\r\n\r\n            stateInformation[data.state].estimatedPopulation = population;\r\n        });\r\n        \r\n        // U.S. Country-Wide Current Data stored as a record in states data \r\n        const countryJson = await fetchJsonData('https://covidtracking.com/api/v1/us/current.json');\r\n        countryJson.forEach(data => {    \r\n            stateInformation[USA_IDENTIFIER] = {\r\n                estimatedPopulation: POPULATION_ESTIMATES[USA_IDENTIFIER],\r\n                totalPositive: data.positive,\r\n                totalDeath: data.death,\r\n                totalTestResults: data.totalTestResults,\r\n                totalRecovered: data.recovered,\r\n                hospitalizedCurrently: data.hospitalizedCurrently,\r\n                name: \"United States\",\r\n                dataQualityGrade: \"N/A\",\r\n                twitter:\"https://twitter.com/CDCgov\",\r\n                website:\"https://www.cdc.gov/coronavirus/2019-ncov/index.html\"\r\n            }\r\n        });\r\n    \r\n        return stateInformation;\r\n    }\r\n    catch (error) {\r\n        console.log(\"fetchStateData() error!\", error)\r\n    }\r\n        \r\n}\r\n\r\nexport const fetchCountyData = async() => {\r\n\r\n    try {\r\n        const url = \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/live/us-counties.csv\"\r\n        \r\n        let stateCountyData = [];\r\n\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n            const csvText = await response.text();\r\n            stateCountyData = parseCountyCSVData(csvText);\r\n            stateCountyData.filter(data => data.deaths > 0 || data.cases > 0);\r\n        }\r\n        else {\r\n            throw Error(response.statusText);\r\n        }\r\n\r\n        return stateCountyData;\r\n    }\r\n    catch (error) {\r\n        \r\n    }\r\n}\r\n\r\n//Parsing County Data specific to dataset specs\r\nfunction parseCountyCSVData(csv){\r\n\r\n    var lines=csv.split(\"\\n\");\r\n\r\n    var result = [];\r\n\r\n    for(var i=1;i<lines.length;i++){\r\n\r\n        const currentline=lines[i].split(\",\");\r\n        const county = {};\r\n        county.county = currentline[1];\r\n        county.stateName = currentline[2];\r\n        county.cases = currentline[4]\r\n        county.deaths = currentline[5];\r\n        result.push(county);\r\n    }\r\n\r\n    return result; \r\n}\r\n","const ChartConfigTypes = {\r\n    SET_STATE_SELECTION : \"SET_STATE_SELECTION\",\r\n    SET_DATE_RANGE_SELECTION : \"SET_DATE_RANGE_SELECTION\",\r\n    SET_FIELD_SELECTION : \"SET_FIELD_SELECTION\",\r\n\r\n    SET_COVID19_DATA : \"SET_COVID19_DATA\",\r\n    SET_STATE_HISTORY_DATA: \"SET_STATE_HISTORY_DATA\" \r\n\r\n};\r\n\r\nexport default ChartConfigTypes;","import React from 'react';\r\n\r\nimport './config-section.css';\r\n\r\nconst ConfigSection = ({fieldName, fieldDefaultValue, fieldClickEvent, fieldDataMap}) => {\r\n\r\n    const keys = Object.keys(fieldDataMap);\r\n\r\n    return (\r\n        <span className=\"config-section\">\r\n            <select name={fieldName} defaultValue={fieldDefaultValue}  onChange={fieldClickEvent}>\r\n                {keys.map ((item) => \r\n                    <option key={item} value={item} >{fieldDataMap[item]}</option>\r\n                )}\r\n            </select>\r\n        </span>\r\n    )\r\n\r\n}\r\n\r\nexport default ConfigSection;","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './chart-config.css';\r\nimport ConfigSection from '../config-section/config-section.component';\r\nimport {DATE_RANGES,US_STATES_DATA,DATA_FIELD_GROUPS, DATA_FIELD_GROUPS_DISPLAY_NAME} from '../../utilities/data-fields';\r\nimport {setDateRangeSelection, setStateSelection, setFieldSelection} from '../../redux/chart-config/chart-config.actions';\r\n\r\nconst ChartConfiguration = ({selectedState, selectedDateRange, setStateSelection, setDateRangeSelection, setFieldSelection}) => {\r\n\r\n    //console.log(\"ChartConfiguration()...\");\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n\r\n    const fieldGroupsMap = {};\r\n    const fieldGroups = Object.keys(DATA_FIELD_GROUPS);\r\n    fieldGroups.forEach(groupName => {\r\n        fieldGroupsMap[groupName] = DATA_FIELD_GROUPS_DISPLAY_NAME[groupName];\r\n    });\r\n\r\n    const handleStateSelection = (event) => {\r\n        setStateSelection(event.target.value);\r\n    }\r\n    const handleDateRangeSelection = (event) => {\r\n        setDateRangeSelection(event.target.value);\r\n    }\r\n    const handleGroupSelection = (event) => {  \r\n        setFieldSelection(DATA_FIELD_GROUPS[event.target.value]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-configuration dashboard-component\">\r\n            <div className=\"top-section\">\r\n                <ConfigSection \r\n                    fieldName=\"stateSelection\"\r\n                    fieldDefaultValue = {selectedState}\r\n                    fieldClickEvent= {handleStateSelection}\r\n                    fieldDataMap={US_STATES_DATA}\r\n                />\r\n                <ConfigSection \r\n                    fieldName=\"dateRangeSelection\"\r\n                    fieldDefaultValue = {selectedDateRange}\r\n                    fieldClickEvent= {handleDateRangeSelection}\r\n                    fieldDataMap={DATE_RANGES}\r\n                />\r\n                <ConfigSection \r\n                    fieldName=\"datasetSelection\"\r\n                    fieldDefaultValue = \"\"\r\n                    fieldClickEvent= {handleGroupSelection}\r\n                    fieldDataMap={fieldGroupsMap}\r\n                />\r\n            </div>            \r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setStateSelection: (userSelectedState) => dispatch(setStateSelection(userSelectedState)),\r\n    setDateRangeSelection: (userSelectedDateRange) => dispatch(setDateRangeSelection(userSelectedDateRange)),\r\n    setFieldSelection: (userSelectedFields) => dispatch(setFieldSelection(userSelectedFields))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChartConfiguration);","import ChartConfigTypes from './chart-config.types';\r\n\r\nexport const setStateSelection = (stateSelection) => ({\r\n    type : ChartConfigTypes.SET_STATE_SELECTION,\r\n    payload: stateSelection\r\n});\r\n\r\nexport const setDateRangeSelection = (dateRangeSelection) => ({\r\n    type : ChartConfigTypes.SET_DATE_RANGE_SELECTION,\r\n    payload: dateRangeSelection\r\n});\r\n\r\nexport const setFieldSelection = (fieldSelection) => ({\r\n    type : ChartConfigTypes.SET_FIELD_SELECTION,\r\n    payload: fieldSelection\r\n});\r\n\r\nexport const setCOVID19Data = (data) => ({\r\n    type : ChartConfigTypes.SET_COVID19_DATA,\r\n    payload: data\r\n});\r\n\r\nexport const setStateHistoryData = (data) => ({\r\n    type : ChartConfigTypes.SET_STATE_HISTORY_DATA,\r\n    payload: data\r\n})\r\n\r\n\r\n\r\n","\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nimport './chart-display.css';\r\n\r\n// Necessary to be able to clear previous charts\r\nlet currentLineChart;\r\n\r\nconst ChartDisplay = ({chartType, chartOptions, chartLabels, chartDataSet}) => {\r\n    const chartContainer = useRef(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if (chartContainer && chartContainer.current) {\r\n\r\n            //console.log(\"loading chart...\");\r\n\r\n            const chartConfig = {\r\n                type: chartType,\r\n                options: chartOptions,\r\n                data: {\r\n                    labels: chartLabels,\r\n                    datasets: chartDataSet\r\n                }            \r\n            }\r\n\r\n            // Destroy previous chart if it exists \r\n            if (typeof currentLineChart !== \"undefined\") currentLineChart.destroy();\r\n\r\n            currentLineChart = new Chart(chartContainer.current, chartConfig);\r\n            setChartInstance(currentLineChart);\r\n            \r\n        }\r\n    }, [chartContainer, chartType, chartOptions, chartLabels, chartDataSet]);\r\n    \r\n    return (\r\n        <div className=\"chart-display\">\r\n            <canvas id={!chartInstance ? \"0\" : \"chart-js-display\"} ref={chartContainer} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDisplay;\r\n","export const getDisplayNumber = (num) => {\r\n    if (!num)\r\n        num = 0;\r\n    return Intl.NumberFormat('en-US', {useGrouping: true}).format(num);\r\n}\r\n\r\nexport const getFormattedDateForFiltering = (date) => {\r\n    var d = new Date(date);\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n    return year + month + day;\r\n}\r\n\r\nexport const getDateDisplayString = (date) => {\r\n    var d = new Date(date);\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    return month + \"/\" + day + \"/\" + year;\r\n}\r\n\r\nexport const getPercentage = (partialNum, totalNum) => {\r\n    var percent = ((partialNum / totalNum) * 100).toFixed(2);\r\n    return percent + \"%\";\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './chart-container.css';\r\n\r\nimport {US_STATES_DATA, CHART_OPTIONS, USA_IDENTIFIER} from '../../utilities/data-fields';\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nimport {\r\n    getHistoryByState, \r\n    getChartDataset, \r\n    getDateListFromData,\r\n    getCountryHistoryData\r\n} from '../../utilities/data-processing';\r\n\r\nimport {getFormattedDateForFiltering} from '../../utilities/formatting';\r\n\r\nconst ChartContainer = ({countryHistoryData, statesHistoryData, stateInformation, selectedState, selectedFields, selectedDateRange}) => {  \r\n    \r\n    //console.log(\"StateHistoryChart...\");\r\n    //console.log(\"stateInformation=\",stateInformation);\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    const now = new Date();\r\n    const yesterday = new Date();\r\n    now.setDate(now.getDate() - Number(selectedDateRange));\r\n    yesterday.setDate(yesterday.getDate() - 1);\r\n    const startDate = getFormattedDateForFiltering(now);\r\n    const endDate = getFormattedDateForFiltering(yesterday);\r\n\r\n    let dataSet = null;\r\n\r\n    if (selectedState === USA_IDENTIFIER) \r\n        dataSet = getCountryHistoryData(countryHistoryData, startDate, endDate);\r\n    else \r\n        dataSet = getHistoryByState(statesHistoryData, selectedState, startDate, endDate); \r\n\r\n    //const stateData = getHistoryByState(statesHistoryData, selectedState, startDate, endDate); \r\n    const chartDataSet = getChartDataset(dataSet, selectedFields);\r\n    const dateList = getDateListFromData(dataSet);\r\n\r\n    return (\r\n        <div className=\"dashboard-component chart-container \">\r\n            <div className=\"dashboard-component-title chart-header\"><span>Data for {US_STATES_DATA[selectedState]}</span> <span> last {selectedDateRange} days</span></div>\r\n            <ChartDisplay \r\n            chartType=\"line\"\r\n            chartOptions = {CHART_OPTIONS}\r\n            chartLabels = {dateList} \r\n            chartDataSet = {chartDataSet}\r\n            />\r\n            { selectedState === USA_IDENTIFIER ? null : (\r\n            <div className=\"state-grade\"> \r\n                <div className=\"data-sources\">Data Quality Grade for {stateInformation[selectedState].name}:  <b>{stateInformation[selectedState].dataQualityGrade}</b></div>\r\n                <div className=\"data-sources\">**Not all states report Hospitalization Data</div>                  \r\n            </div>\r\n            )}\r\n            <div className=\"data-sources\">Data:&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://covidtracking.com/\")}>The COVID Tracking Project</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    countryHistoryData: state.chartConfig.countryHistoryData,\r\n    statesHistoryData: state.chartConfig.statesHistoryData,\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange, \r\n    selectedFields: state.chartConfig.selectedFields\r\n});\r\n\r\nexport default connect(mapStateToProps)(ChartContainer);","import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport {SpinnerContainer, SpinnerOverlay} from './spinner.styles.jsx';\r\n\r\nconst Spinner = () => (\r\n    <SpinnerOverlay>\r\n        <SpinnerContainer/>\r\n    </SpinnerOverlay>\r\n);\r\n\r\nexport default Spinner;\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './overview.css';\r\n\r\nimport {getDisplayNumber, getPercentage} from '../../utilities/formatting'\r\n\r\nconst Overview = ({selectedState, stateInformation}) => {\r\n\r\n    let stateInfo = stateInformation[selectedState];\r\n        \r\n    const percentPositive =  getPercentage(stateInfo.totalPositive,stateInfo.estimatedPopulation);\r\n    const percentTested =  getPercentage(stateInfo.totalTestResults,stateInfo.estimatedPopulation);\r\n    const percentDeath =  getPercentage(stateInfo.totalDeath,stateInfo.estimatedPopulation);\r\n    const percentHospitalized =  getPercentage(stateInfo.hospitalizedCurrently,stateInfo.estimatedPopulation);\r\n\r\n    return (\r\n        <div className=\"dashboard-component overview\">\r\n            <div className=\"dashboard-component-title\">{stateInfo.name} Overview</div>\r\n            <div className=\"links\"> \r\n                <span className=\"site-link\" onClick={()=> window.open(stateInfo.website)}>COVID19 Website</span>&nbsp;&nbsp;&bull;&nbsp;&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open('https://www.twitter.com/' + stateInfo.twitter)}>Twitter</span>\r\n            </div>\r\n            <div className=\"estimated-population\">Estimated Population : <span className=\"estimate\">{getDisplayNumber(stateInfo.estimatedPopulation)}</span></div>\r\n            <div className=\"overview-data\">\r\n                <div className=\"overview-data-row\">\r\n                    <div>Total Tested:</div>\r\n                    <div className=\"data-number\">{getDisplayNumber(stateInfo.totalTestResults)}</div>\r\n                    <div className=\"data-number percent\">{percentTested}</div>\r\n                </div>\r\n                <div className=\"overview-data-row\">\r\n                    <div>Total Positive:</div>\r\n                    <div className=\"data-number\">{getDisplayNumber(stateInfo.totalPositive)}</div>\r\n                    <div className=\"data-number percent\">{percentPositive}</div>\r\n                </div>\r\n                <div className=\"overview-data-row\">\r\n                    <div>Currently Hospitalized:</div>\r\n                    <div className=\"data-number\">{getDisplayNumber(stateInfo.hospitalizedCurrently)}</div>\r\n                    <div className=\"data-number percent\">{percentHospitalized}</div>\r\n                </div>\r\n                <div className=\"overview-data-row\">\r\n                    <div>Total Deaths:</div>\r\n                    <div className=\"data-number\">{getDisplayNumber(stateInfo.totalDeath)}</div>\r\n                    <div className=\"data-number percent\">{percentDeath}</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"estimate estimate-message\">% calculated against Estimated Population</div>\r\n            <div className=\"data-sources\">Data:&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://covidtracking.com/\")}>The COVID Tracking Project</span>,&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://www.census.gov/programs-surveys/popest.html\")}>U.S. Census Bureau</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation\r\n});\r\n\r\nexport default connect(mapStateToProps)(Overview);","import React, { useState, useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './county-data.css';\r\n\r\nimport {getDisplayNumber} from '../../utilities/formatting';\r\nimport {COUNTY_SORT_FIELDS} from '../../utilities/data-fields';\r\n\r\nconst CountyData = ({selectedState, stateInformation, stateCountyInfo}) => {   \r\n\r\n    const [sortField, setSortField] = useState(COUNTY_SORT_FIELDS.SORT_BY_DEATHS);\r\n    const [countyData, setCountyData] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        const tempData = [...stateCountyInfo]\r\n            .filter(data => data.stateName.toLowerCase() === stateInformation[selectedState].name.toLowerCase())\r\n            .sort((a,b) => b.deaths - a.deaths)\r\n\r\n        setSortField(COUNTY_SORT_FIELDS.SORT_BY_DEATHS);\r\n        setCountyData(tempData);\r\n\r\n    },[selectedState, stateInformation, stateCountyInfo]);\r\n\r\n    const sortCountyData =(fieldName) => {\r\n        \r\n        const tempData = [...countyData];\r\n\r\n        if (fieldName === COUNTY_SORT_FIELDS.SORT_BY_COUNTY) {\r\n            tempData.sort(function(a, b){\r\n                var x = a.county.toLowerCase();\r\n                var y = b.county.toLowerCase();\r\n                if (x < y) {return -1;}\r\n                if (x > y) {return 1;}\r\n                return 0;\r\n              });\r\n        }\r\n        else {  \r\n            tempData.sort((a,b) => b[fieldName] - a[fieldName]);\r\n        }\r\n        setSortField(fieldName);\r\n        setCountyData(tempData);\r\n    }\r\n\r\n    const countyLabel = \"County\" + (sortField === COUNTY_SORT_FIELDS.SORT_BY_COUNTY ? \"↓\" : \"\");\r\n    const casesLabel = (sortField === COUNTY_SORT_FIELDS.SORT_BY_CASES ? \"↓\" : \"\") + \"Cases\";\r\n    const deathsLabel = (sortField === COUNTY_SORT_FIELDS.SORT_BY_DEATHS ? \"↓\" : \"\") + \"Deaths\";\r\n\r\n    return (    \r\n        <div className=\"dashboard-component county-data-set\">\r\n            <div className=\"dashboard-component-title\">{stateInformation[selectedState].name} Counties</div>\r\n            <div className=\"county-data\">\r\n                <div className=\"county-data-row county-data-header\">\r\n                    <div className=\"county-data-header, site-link\" onClick={() => sortCountyData(COUNTY_SORT_FIELDS.SORT_BY_COUNTY)}>{countyLabel}</div>\r\n                    <div className=\"data-number county-data-header, site-link\" onClick={() => sortCountyData(COUNTY_SORT_FIELDS.SORT_BY_CASES)}>{casesLabel}</div>\r\n                    <div className=\"data-number county-data-header, site-link\" onClick={() => sortCountyData(COUNTY_SORT_FIELDS.SORT_BY_DEATHS)}>{deathsLabel}</div>\r\n                </div>\r\n                {!countyData ? null : countyData.map((data, index) => (             \r\n                    <div key={index} className=\"county-data-row\" >\r\n                        <div>{data.county}</div>                    \r\n                        <div className=\"data-number\">{getDisplayNumber(data.cases)}</div>\r\n                        <div className=\"data-number\">{getDisplayNumber(data.deaths)}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className=\"data-sources\">**Counties with no deaths or cases have been omitted.</div>\r\n            <div className=\"data-sources\">Data:&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://github.com/nytimes/covid-19-data/blob/master/live/us-counties.csv\")}>N.Y. Times</span>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    stateCountyInfo: state.chartConfig.stateCountyInfo\r\n});\r\n\r\nexport default connect(mapStateToProps)(CountyData);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './demographics.css';\r\n\r\nimport {getDisplayNumber,getDateDisplayString} from '../../utilities/formatting';\r\n\r\nconst Demographics = ({selectedState, stateInformation, deathsByAgeGroups}) => {\r\n\r\n    const compareTextNumbers = (a, b) => {\r\n\r\n        let numA = Number(a.substring(0,2).replace(\"-\",\"\").toLowerCase().replace(\"un\",\"0\"));\r\n        let numB = Number(b.substring(0,2).replace(\"-\",\"\").toLowerCase().replace(\"un\",\"0\"));\r\n\r\n        if (numA > numB) return 1;\r\n        if (numA < numB) return -1;\r\n\r\n        return 0;\r\n    }\r\n\r\n    const dataFetchedSuccessfully = Array.isArray(deathsByAgeGroups) && deathsByAgeGroups.length > 0;\r\n\r\n    const dataDate = dataFetchedSuccessfully ? getDateDisplayString(deathsByAgeGroups[0].data_as_of) : getDateDisplayString(Date.now());\r\n\r\n    return(\r\n        <div className=\"dashboard-component demographics\">\r\n            <div className=\"dashboard-component-title\">{stateInformation[selectedState].name} <span>Demographics</span></div>\r\n\r\n            {dataFetchedSuccessfully ? \r\n            <div>\r\n                <div className=\"demo-data\">\r\n                    <div className=\"demo-data-row demo-data-header\">\r\n                        <div className=\"age-group\">Age Group</div>\r\n                        <div className=\"data-number\">Total Deaths</div>\r\n                    </div>\r\n                    {deathsByAgeGroups\r\n                    .filter(data => data.state.toLowerCase() === stateInformation[selectedState].name.toLowerCase() && data.age_group.includes('year'))\r\n                    .sort((a,b) => compareTextNumbers(a.age_group,b.age_group))\r\n                    .map((data, index) => (\r\n                        <div key={index} className=\"demo-data-row\">\r\n                            <div className=\"age-group\">{data.age_group}</div>                    \r\n                            <div className=\"data-number\">{getDisplayNumber(data.sum_covid_19_deaths)}</div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                    \r\n                {selectedState === \"NY\" ? \r\n                \r\n                    <div className=\"demo-data\">\r\n                        <div className=\"demo-nyc-message\">The Center For Disease Control collects data for New York City separately from New York State. See New York City Demographics data below.</div>\r\n                        <div className=\"dashboard-component-title\">New York City Demographics</div>\r\n                        \r\n                        <div className=\"demo-data-row demo-data-header\">\r\n                            <div className=\"age-group\">Age Group</div>\r\n                            <div className=\"data-number\">Total Deaths</div>\r\n                        </div>\r\n                        {deathsByAgeGroups\r\n                        .filter(data => data.state === \"New York City\" && data.age_group.includes('year'))\r\n                        .sort((a,b) => compareTextNumbers(a.age_group,b.age_group))\r\n                        .map((data, index) => (\r\n                            <div key={index} className=\"demo-data-row\">\r\n                                <div className=\"age-group\">{data.age_group}</div>                    \r\n                                <div className=\"data-number\">{getDisplayNumber(data.sum_covid_19_deaths)}</div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    : null \r\n                }\r\n            </div>    \r\n            : \r\n                <div className=\"data-sources\">Problem fetching data from CDC...</div>\r\n            }\r\n            \r\n            <div className=\"data-sources\">**Data is reported on a weekly basis. Last Updated {dataDate}</div>\r\n            <div className=\"data-sources\">++Number of deaths reported in this table are the total number of deaths received and coded as of the date of analysis. Click on the CDC link below for details.</div>\r\n            <div className=\"data-sources\">Data:&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://data.cdc.gov/NCHS/Provisional-COVID-19-Death-Counts-by-Sex-Age-and-S/9bhg-hcku\")}>Center For Disease Control</span><br/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    deathsByAgeGroups: state.chartConfig.deathsByAgeGroups\r\n});\r\n\r\nexport default connect(mapStateToProps)(Demographics);","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport \"./dashboard.css\";\r\n\r\nimport {getFreshData} from '../../utilities/data-processing';\r\nimport {setCOVID19Data} from '../../redux/chart-config/chart-config.actions';\r\nimport ChartConfiguration from '../chart-config/chart-config.component';\r\nimport ChartContainer from '../chart-container/chart-container.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport Overview from '../overview/overview.component';\r\nimport {USA_IDENTIFIER} from '../../utilities/data-fields';\r\nimport CountyData from '../county-data/county-data.component';\r\nimport Demographics from '../demographics/demographics.component';\r\n\r\nconst Covid19UsDashboard =({setCOVID19Data, dataRefreshedTimestamp, selectedState}) => {  \r\n\r\n    useEffect(() => {\r\n\r\n        //console.log(\"useEffect()...\");\r\n        async function loadData() {\r\n            try {   \r\n                if (!dataRefreshedTimestamp) {\r\n                    //console.log(\"retrievingData()...\");\r\n                    const freshData = await getFreshData();\r\n                    setCOVID19Data(freshData);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        loadData();\r\n\r\n    },[setCOVID19Data,dataRefreshedTimestamp]);\r\n    \r\n    //console.log(\"dataRefreshedTimestamp=\",dataRefreshedTimestamp);\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    return (   \r\n\r\n        <div className=\"dashboard\">\r\n            <div className=\"page-title\">United States COVID19 Data Charts</div>\r\n            { !dataRefreshedTimestamp ? ( \r\n                <Spinner />\r\n            ) : (\r\n                <div className=\"page-layout\">\r\n                    <ChartConfiguration />\r\n                    <ChartContainer />\r\n                    <Overview/>\r\n                    <Demographics/>\r\n                    {selectedState === USA_IDENTIFIER ? null : (\r\n                        <CountyData />\r\n                    )}\r\n                </div>\r\n            )}\r\n            <div className=\"page-footer\">\r\n                Data Sources:<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://covidtracking.com/\")}>The COVID Tracking Project</span><br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://www.census.gov/programs-surveys/popest.html\")}>U.S. Census Bureau</span><br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://data.cdc.gov/NCHS/Provisional-COVID-19-Death-Counts-by-Sex-Age-and-S/9bhg-hcku\")}>Center For Disease Control</span><br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://github.com/nytimes/covid-19-data/blob/master/live/us-counties.csv\")}>N.Y. Times</span><br/>\r\n                ~ ~ ~<br/>\r\n                Site built by Tanya Miranda<br/>tanya.miranda@gmail.com\r\n            </div>\r\n        </div>\r\n    \r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    dataRefreshedTimestamp: state.chartConfig.dataRefreshedTimestamp,\r\n    selectedState: state.chartConfig.selectedState\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCOVID19Data: (data) => dispatch(setCOVID19Data(data))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Covid19UsDashboard);","import React from 'react';\n\nimport Covid19UsDashboard from './components/dashboard/dashboard.component';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Covid19UsDashboard/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import ChartConfigTypes from './chart-config.types';\r\nimport {DEFAULT_DATA_FIELD, USA_IDENTIFIER} from '../../utilities/data-fields';\r\n\r\nconst INITIAL_STATE = {\r\n    statesHistoryData: null,\r\n    stateInformation: null,\r\n    countryHistoryData: null,\r\n    stateCountyInfo: null,\r\n    deathsByAgeGroups: null,\r\n    dataRefreshedTimestamp: null,\r\n    selectedState: null,\r\n    selectedDateRange: null,   \r\n    selectedFields: []    \r\n};\r\n\r\nconst chartConfigReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ChartConfigTypes.SET_COVID19_DATA: \r\n            return {\r\n                selectedState: USA_IDENTIFIER,\r\n                selectedDateRange: \"60\",   \r\n                selectedFields: DEFAULT_DATA_FIELD,    \r\n                statesHistoryData: action.payload.statesHistoryData,\r\n                stateInformation: action.payload.stateInformation,\r\n                countryHistoryData: action.payload.countryHistoryData,\r\n                stateCountyInfo: action.payload.stateCountyInfo,\r\n                deathsByAgeGroups: action.payload.deathsByAgeGroups,\r\n                dataRefreshedTimestamp: (new Date()).toLocaleString()\r\n            }\r\n        case ChartConfigTypes.SET_STATE_HISTORY_DATA:\r\n            return {\r\n                ...state,\r\n                statesHistoryData: action.payload\r\n            }\r\n\r\n        case ChartConfigTypes.SET_STATE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedState: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_FIELD_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedFields: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_DATE_RANGE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedDateRange: action.payload\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n        \r\n    }\r\n}\r\n\r\nexport default chartConfigReducer;","import {combineReducers} from 'redux';\r\n\r\nimport chartConfigReducer from './chart-config/chart-config.reducer';\r\n\r\nexport default combineReducers({\r\n    chartConfig: chartConfigReducer\r\n});\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewareObjects = [];\r\n\r\n//Only use logger in development environement\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewareObjects.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewareObjects));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}