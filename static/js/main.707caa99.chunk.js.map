{"version":3,"sources":["components/chart-display/chart-display.component.jsx","components/utilities/data-fields.js","components/dropdown/dropdown.component.jsx","components/chart-config/chart-config.component.jsx","components/utilities/data-processing.js","components/state-history-chart/state-history-chart.component.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","components/mobile-message/mobile-message.component.jsx","components/us-history-chart/us-history-chart.component.jsx","components/covid19-us-dashboard/covid19-us-dashboard.component.jsx","App.js","serviceWorker.js","index.js"],"names":["currentLineChart","DATE_RANGES","15","30","45","60","DATA_FIELD_COLORS","DEFAULT_SELECTED_DATA_FIELDS","US_STATES_DATA","ALL","AK","AL","AR","AS","AZ","CA","CO","CT","DC","DE","FL","GA","GU","HI","IA","ID","IL","IN","KS","KY","LA","MA","MD","ME","MI","MN","MO","MP","MS","MT","NC","ND","NE","NH","NJ","NM","NV","NY","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VA","VI","VT","WA","WI","WV","WY","DATA_FIELD_GROUPS","testing","patient","cumulative","increase","ShortDropDown","fieldName","optionList","labelsList","defaultSelected","onChangeEvent","useState","listDisplaySize","setListDisplaySize","resetDisplayList","className","name","onChange","defaultValue","size","onMouseDown","length","onBlur","map","item","index","onClick","key","value","ChartConfiguration","selectedState","selectedDateRange","selectedFields","stateSelectionHandler","dateSelectionHander","fieldSelectionHandler","fieldGroups","groupSelectionHandler","Object","keys","group","field","type","checked","ChartDisplay","chartRef","React","createRef","this","props","chartType","chartOptions","chartLabels","chartDataSet","destroy","stateChartRef","current","getContext","Chart","data","labels","datasets","options","loadChart","id","ref","Component","getDateListFromData","stateData","datesList","date","filter","self","indexOf","newDateList","forEach","dateString","String","month","Number","substring","day","push","getChartDataset","fieldNames","fieldDatasets","label","fill","backgroundColor","borderColor","dayRecord","find","getStatesInfo","stateInfo","stateNames","state","website","covid19Site","twitter","notes","getFormattedDateForFiltering","d","Date","getMonth","getDate","year","getFullYear","getFreshData","a","historyData","countryData","fetch","stateInfoRes","ok","json","Error","statusText","historicalDataRes","statesCurrentDataRes","grade","dataQualityGrade","countryDataRes","statesHistoryData","stateInformation","countryHistoryData","console","log","CHART_OPTIONS","responsive","title","display","tooltips","mode","intersect","hover","scales","xAxes","scaleLabel","labelString","yAxes","StateHistoryChart","now","setDate","startFromDate","dateValue","fields","sort","b","dateList","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","MobileMessage","USHistoryChart","getCountryHistoryData","Covid19UsDashboard","handleGroupSelection","event","values","fieldGroupList","selectedGroupList","setState","dataRefreshedTimestamp","formatted_date","toLocaleString","freshData","target","updatedSelectedFields","handleStateSelection","bind","handleDateRangeSelection","handleFieldSelection","window","open","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.707caa99.chunk.js","sourcesContent":["import React from 'react';\r\nimport Chart from 'chart.js';\r\n\r\nimport './chart-display.css';\r\n\r\n// Necessary to be able to refresh charts\r\nlet currentLineChart;\r\n\r\nclass ChartDisplay extends React.Component {  \r\n\r\n    chartRef = React.createRef();\r\n    \r\n    loadChart() {\r\n\r\n        const {chartType, chartOptions, chartLabels, chartDataSet} = this.props;\r\n\r\n        //console.log(\"loadChart()...\");\r\n        //console.log(\"chartType=\",chartType);\r\n        //console.log(\"chartOptions=\",chartOptions);\r\n        //console.log(\"chartLabels=\",chartLabels);\r\n        //console.log(\"chartDataset=\",chartDataSet);\r\n        \r\n        // Destroy previous chart if it exists \r\n        if (typeof currentLineChart !== \"undefined\") currentLineChart.destroy();\r\n\r\n        const stateChartRef = this.chartRef.current.getContext(\"2d\");\r\n\r\n        currentLineChart = new Chart(stateChartRef, {\r\n            type: chartType,\r\n            data: {\r\n                labels: chartLabels,\r\n                datasets: chartDataSet\r\n            },\r\n            options: chartOptions\r\n        });\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.loadChart();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.loadChart();\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"chart-display\">    \r\n                <div className=\"chart\">\r\n                    <canvas id=\"myChart\" ref={this.chartRef} />                        \r\n                </div>\r\n            </div>            \r\n        )\r\n    }\r\n};\r\n\r\nexport default ChartDisplay;","export const DATE_RANGES = {\r\n    15: \"Last 15 days\",\r\n    30: \"Last 30 days\",\r\n    45: \"Last 45 days\",\r\n    60: \"Last 60 days\"\r\n}\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    '#138E05',\r\n    '#A15B81',\r\n    '#2E16A6',\r\n    '#146AD4',\r\n    '#A9D422',\r\n    '#18F8BB',\r\n    '#AFC044',\r\n    '#3B9793',\r\n    '#822611',\r\n    '#FB2E76',\r\n    '#A5CA71',\r\n    '#983538',\r\n    '#082BD9',\r\n    '#2E136A',\r\n    '#05BB78',\r\n    '#44A4AD',\r\n    '#28FD7E',\r\n    '#387862'\r\n];\r\n\r\nexport const DEFAULT_SELECTED_DATA_FIELDS = {\r\n\r\n    \"positive\": true,\r\n    \"negative\": true,\r\n    \"pending\" : true,\r\n    \"totalTestResults\": true\r\n}\r\n\r\nexport const US_STATES_DATA = {\r\n    ALL:\"All States (default)\",\r\n    AK:\"Alaska\",\r\n    AL:\"Alabama\",\r\n    AR:\"Arkansas\",\r\n    AS:\"American Samoa\",\r\n    AZ:\"Arizona\",\r\n    CA:\"California\", \r\n    CO:\"Colorado\", \r\n    CT:\"Connecticut\", \r\n    DC:\"District Of Columbia\",\r\n    DE:\"Delaware\", \r\n    FL:\"Florida\", \r\n    GA:\"Georgia\",\r\n    GU:\"Guam\", \r\n    HI:\"Hawaii\", \r\n    IA:\"Iowa\", \r\n    ID:\"Idaho\", \r\n    IL:\"Illinois\", \r\n    IN:\"Indiana\", \r\n    KS:\"Kansas\", \r\n    KY:\"Kentucky\", \r\n    LA:\"Louisiana\", \r\n    MA:\"Massachusetts\",\r\n    MD:\"Maryland\", \r\n    ME:\"Maine\", \r\n    MI:\"Michigan\",\r\n    MN:\"Minnesota\",\r\n    MO:\"Missouri\", \r\n    MP:\"Northern Mariana Islands\",\r\n    MS:\"Mississippi\", \r\n    MT:\"Montana\", \r\n    NC:\"North Carolina\", \r\n    ND:\"North Dakota\", \r\n    NE:\"Nebraska\", \r\n    NH:\"New Hampshire\", \r\n    NJ:\"New Jersey\", \r\n    NM:\"New Mexico\", \r\n    NV:\"Nevada\", \r\n    NY:\"New York\", \r\n    OH:\"Ohio\", \r\n    OK:\"Oklahoma\", \r\n    OR:\"Oregon\", \r\n    PA:\"Pennsylvania\", \r\n    PR:\"Puerto Rico\", \r\n    RI:\"Rhode Island\",\r\n    SC:\"South Carolina\", \r\n    SD:\"South Dakota\", \r\n    TN:\"Tennessee\", \r\n    TX:\"Texas\", \r\n    UT:\"Utah\", \r\n    VA:\"Virginia\", \r\n    VI:\"US Virgin Islands\", \r\n    VT:\"Vermont\", \r\n    WA:\"Washington\", \r\n    WI:\"Wisconsin\", \r\n    WV:\"West Virginia\", \r\n    WY:\"Wyoming\"\r\n}\r\n\r\n\r\nexport const DATA_FIELD_GROUPS = {\r\n    \r\n    testing:[\r\n        \"positive\",\r\n        \"negative\",\r\n        \"pending\",\r\n        \"totalTestResults\"\r\n    ],\r\n    patient: [\r\n        \"hospitalizedCurrently\",\r\n        \"inIcuCurrently\",\r\n        \"onVentilatorCurrently\",\r\n        \"death\",\r\n        \"recovered\"\r\n    ],\r\n    cumulative: [\r\n        \"hospitalizedCumulative\",\r\n        \"inIcuCumulative\",\r\n        \"onVentilatorCumulative\"\r\n    ],\r\n    increase: [\r\n        \"deathIncrease\",\r\n        \"hospitalizedIncrease\",\r\n        \"negativeIncrease\",\r\n        \"positiveIncrease\",\r\n        \"totalTestResultsIncrease\"\r\n    ]\r\n};\r\n\r\nexport const DATA_FIELD_DISPLAY_NAMES = {\r\n    \r\n    positive: \"Positive Result\",\r\n    negative: \"Negative Result\",\r\n    totalTestResults: \"Total Test Results\",\r\n    pending: \"Pending\",\r\n    death: \"Death\", \r\n    recovered: \"Recovered\",\r\n    hospitalizedCurrently: \"Currently Hospitalized\",\r\n    inIcuCurrently: \"Currently In ICU\",\r\n    onVentilatorCurrently: \"Currently On Ventilator\",\r\n    hospitalizedCumulative: \"Hospitalized Cumulative\",\r\n    inIcuCumulative: \"In ICU Cumulative\",\r\n    onVentilatorCumulative: \"On Ventilator Cumulative\",    \r\n    deathIncrease: \"Death Increases\",\r\n    hospitalizedIncrease: \"Hospitalized Increases\",\r\n    negativeIncrease: \"Negative Increases\",\r\n    positiveIncrease: \"Positive Increases\",\r\n    totalTestResultsIncrease: \"Total Test Results Increases\"\r\n}\r\n\r\n","import React, {useState} from 'react';\r\n\r\nimport './dropdown.css';\r\n\r\nconst ShortDropDown = ({fieldName, optionList, labelsList, defaultSelected, onChangeEvent}) => {\r\n\r\n    const [listDisplaySize, setListDisplaySize] = useState(1);\r\n    \r\n    const displayLargerList = () => {\r\n\r\n        if (optionList.length < 10)\r\n            setListDisplaySize(optionList.length)\r\n        else\r\n            setListDisplaySize(10);\r\n    }\r\n\r\n    const resetDisplayList = () => {\r\n        setListDisplaySize(0);\r\n    }\r\n    \r\n    return (\r\n\r\n        <select className=\"short-drop-down\" name={fieldName} \r\n            onChange ={onChangeEvent} \r\n            defaultValue={defaultSelected} \r\n            size={listDisplaySize} \r\n            onMouseDown={displayLargerList}\r\n            onBlur={resetDisplayList}\r\n        >\r\n            {\r\n                optionList.map ((item, index) => \r\n                        <option className=\"short-drop-down-option\" onClick={resetDisplayList} key={item} value={item} >\r\n                            {!labelsList ? item : labelsList[item] }\r\n                        </option>\r\n                )\r\n            }\r\n        </select>\r\n    )\r\n\r\n}\r\n\r\nexport default ShortDropDown;","import React from 'react'\r\n\r\nimport './chart-config.css';\r\n\r\nimport ShortDropDown from '../dropdown/dropdown.component';\r\nimport {\r\n    DATE_RANGES, \r\n    US_STATES_DATA,\r\n    DATA_FIELD_GROUPS  \r\n} from '../utilities/data-fields';\r\n\r\n\r\nconst ChartConfiguration = ({selectedState, selectedDateRange, selectedFields, stateSelectionHandler, dateSelectionHander, fieldSelectionHandler, groupSelectionHandler}) => {\r\n\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    const fieldGroups = Object.keys(DATA_FIELD_GROUPS);\r\n\r\n    return (\r\n        <div className=\"chart-configuration\">\r\n            <div className=\"top-section\">\r\n                <div className=\"config-section\">\r\n                    <div className=\"config-field\">State:</div>\r\n                    <ShortDropDown \r\n                        fieldName=\"states-list\" \r\n                        optionList={Object.keys(US_STATES_DATA)}\r\n                        labelsList={US_STATES_DATA} \r\n                        defaultSelected={selectedState} \r\n                        onChangeEvent={stateSelectionHandler} \r\n                    />\r\n                </div>\r\n                <div className=\"config-section\">\r\n                    <div className=\"config-field\" >Date Range:</div>\r\n                    <ShortDropDown \r\n                        fieldName=\"date-range-list\" \r\n                        optionList={Object.keys(DATE_RANGES)} \r\n                        labelsList={DATE_RANGES}\r\n                        defaultSelected={selectedDateRange} \r\n                        onChangeEvent={dateSelectionHander} />\r\n                </div>\r\n            </div>\r\n            <div className=\"config-section\">\r\n                <div className=\"config-field\">Data Fields:</div>\r\n                <div className=\"field-groups\">\r\n                {\r\n                    \r\n                    fieldGroups.map(group => \r\n                        \r\n                        <div className=\"config-field-group\" key={group}>\r\n                            <div className=\"group\">{group} Data</div>\r\n                            {\r\n                            DATA_FIELD_GROUPS[group].map( field => (\r\n                                <div key={field}>\r\n                                    <input className=\"field-option\" type=\"checkbox\" name=\"field-selection\" \r\n                                        onChange={fieldSelectionHandler} \r\n                                        value={field}\r\n                                        checked = {!selectedFields[field] ? false : true}\r\n                                    />\r\n                                    <label name=\"field-selection\">{field}</label> \r\n                                </div>\r\n                            ))\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n                </div>\r\n            </div>            \r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default ChartConfiguration;","import {DATA_FIELD_COLORS} from './data-fields';\r\n\r\nexport const getDateListFromData = (stateData) => {\r\n\r\n    const datesList = stateData.map(item => item.date)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var month = Number(dateString.substring(4,6));\r\n        var day = Number(dateString.substring(6,8));\r\n\r\n        newDateList.push(month + \"/\" + day);\r\n    });\r\n\r\n    return newDateList;\r\n}\r\n\r\nexport const getHistoryByState = (stateHistoryData, state, startFromDate) => {\r\n\r\n    return stateHistoryData\r\n        .filter(stateData => stateData.state === state && stateData.date >= startFromDate )\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n    \r\n}    \r\n\r\nexport const getChartDataset = (stateData, fieldNames) => {\r\n\r\n    const fieldDatasets = [];\r\n\r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        fieldDatasets.push({\r\n            label: fieldName,\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            data: []\r\n        })\r\n    })\r\n\r\n    stateData.forEach(dayRecord => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = fieldDatasets.find((data => data.label === fieldName))    \r\n            fieldData.data.push(!dayRecord[fieldName] ? 0 : dayRecord[fieldName]);\r\n        })\r\n    });\r\n\r\n    return fieldDatasets;\r\n}\r\n\r\n\r\nexport const getStatesInfo = (stateInfo) => {\r\n    \r\n    const stateNames = []; \r\n\r\n    stateInfo.forEach(data => {\r\n        stateNames[data.state] = {\r\n            name: data.name,\r\n            website: data.covid19Site,\r\n            twitter: data.twitter,\r\n            notes: data.notes\r\n        }\r\n    })\r\n    \r\n    return stateNames;\r\n}\r\n\r\n\r\nexport const getFormattedDateForFiltering = (date) => {\r\n    var d = new Date(date);\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n    return year + month + day;\r\n}\r\n\r\nexport const getFreshData = async() => {\r\n    \r\n    //console.log(\"Fetching Data from https://covidtracking.com/...\");\r\n\r\n    let historyData = null;\r\n    let stateInfo = null;\r\n    let countryData = null;\r\n\r\n    try {\r\n\r\n        const stateInfoRes = await fetch('https://covidtracking.com/api/v1/states/info.json');\r\n        if (stateInfoRes.ok) {\r\n            \r\n            const json = await stateInfoRes.json();\r\n            stateInfo = getStatesInfo(json);\r\n        }\r\n        else {\r\n            throw Error(stateInfoRes.statusText);\r\n        }\r\n\r\n        const historicalDataRes = await fetch('https://covidtracking.com/api/v1/states/daily.json');\r\n        if (historicalDataRes.ok) {\r\n            \r\n            const json = await historicalDataRes.json();\r\n            historyData = json;\r\n        }\r\n        else {\r\n            throw Error(historicalDataRes.statusText);\r\n        }\r\n\r\n        const statesCurrentDataRes = await fetch('https://covidtracking.com/api/v1/states/current.json');\r\n        if (statesCurrentDataRes.ok) {\r\n            \r\n            const json = await statesCurrentDataRes.json();\r\n            json.forEach(data => {\r\n                stateInfo[data.state].grade = data.dataQualityGrade\r\n            });\r\n        }\r\n        else {\r\n            throw Error(statesCurrentDataRes.statusText);\r\n        }\r\n\r\n        const countryDataRes = await fetch('https://covidtracking.com/api/v1/us/daily.json');\r\n        if (countryDataRes.ok) {\r\n            \r\n            const json = await countryDataRes.json();\r\n            countryData = json;\r\n        }\r\n        else {\r\n            throw Error(countryDataRes.statusText);\r\n        }\r\n\r\n        return {\r\n            statesHistoryData: historyData,\r\n            stateInformation: stateInfo,\r\n            countryHistoryData: countryData\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const getCountryHistoryData = (countryHistoryData, startFromDate) => {\r\n\r\n    return countryHistoryData\r\n        .filter(data => data.date >= startFromDate )\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n    \r\n}","import React from 'react';\r\n\r\nimport './state-history-chart.css';\r\n\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nimport {\r\n    getHistoryByState, \r\n    getChartDataset, \r\n    getDateListFromData,\r\n    getFormattedDateForFiltering\r\n} from '../utilities/data-processing';\r\n\r\nconst CHART_OPTIONS = {\r\n    responsive: true,\r\n    title: { display: false},\r\n    tooltips: {mode: 'index', intersect: false},\r\n    hover: {mode: 'nearest', intersect: true},\r\n    scales: {\r\n        xAxes: [{\r\n            display: true,\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Day'\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            display: true,\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Value'\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nconst StateHistoryChart = ({statesHistoryData, selectedState, selectedFields, selectedDateRange}) => {  \r\n        \r\n    if (!statesHistoryData)\r\n        return;\r\n\r\n    //console.log(\"StateHistoryChart...\");\r\n    //console.log(\"statesHistoryData=\",statesHistoryData);\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    var now = new Date();\r\n    now.setDate(now.getDate() - Number(selectedDateRange));\r\n    const dateValue = getFormattedDateForFiltering(now);\r\n    \r\n    //Filter out only fields that the user selected\r\n    const identifiers = Object.keys(selectedFields)\r\n    const fields = identifiers.filter(function(id) {\r\n        return selectedFields[id]\r\n    })\r\n\r\n    const stateData = getHistoryByState(statesHistoryData, selectedState, dateValue); \r\n    const chartDataSet = getChartDataset(stateData, fields);\r\n    const dateList = getDateListFromData(stateData);\r\n\r\n    \r\n    return (\r\n           <ChartDisplay \r\n           chartType=\"line\"\r\n           chartOptions = {CHART_OPTIONS}\r\n           chartLabels = {dateList} \r\n           chartDataSet = {chartDataSet}\r\n        />      \r\n    )\r\n\r\n};\r\n\r\nexport default StateHistoryChart;","import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport {SpinnerContainer, SpinnerOverlay} from './spinner.styles.jsx';\r\n\r\nconst Spinner = () => (\r\n    <SpinnerOverlay>\r\n        <SpinnerContainer/>\r\n    </SpinnerOverlay>\r\n);\r\n\r\nexport default Spinner;\r\n\r\n","import React from 'react'\r\n\r\nimport './mobile-message.css';\r\n\r\nconst MobileMessage = () => (\r\n    <div className=\"mobile-message\">\r\n        <div className=\"message\">Chart is too big for your screen.<br/> Turn your device sideways.</div>        \r\n        <div className=\"phone\">\r\n            <div className=\"phone-screen\"></div>\r\n            <div className=\"phone-button\"></div>\r\n        </div>\r\n    </div>\r\n)\r\nexport default MobileMessage;","import React from 'react';\r\n\r\nimport './us-history-chart.css';\r\n\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nimport { \r\n    getCountryHistoryData,\r\n    getChartDataset, \r\n    getDateListFromData,\r\n    getFormattedDateForFiltering\r\n} from '../utilities/data-processing';\r\n\r\nconst CHART_OPTIONS = {\r\n    responsive: true,\r\n    title: { display: false},\r\n    tooltips: {mode: 'index', intersect: false},\r\n    hover: {mode: 'nearest', intersect: true},\r\n    scales: {\r\n        xAxes: [{\r\n            display: true,\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Day'\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            display: true,\r\n            scaleLabel: {\r\n                display: true,\r\n                labelString: 'Value'\r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nconst USHistoryChart = ({countryHistoryData, selectedFields, selectedDateRange}) => {  \r\n        \r\n    if (!countryHistoryData)\r\n        return;\r\n\r\n    //console.log(\"loadChart()...\");\r\n    //console.log(\"statesHistoryData=\",statesHistoryData);\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    var now = new Date();\r\n    now.setDate(now.getDate() - Number(selectedDateRange));\r\n    const dateValue = getFormattedDateForFiltering(now);\r\n    \r\n    //Filter out only fields that the user selected\r\n    const identifiers = Object.keys(selectedFields)\r\n    const fields = identifiers.filter(function(id) {\r\n        return selectedFields[id]\r\n    })\r\n\r\n    const countryData = getCountryHistoryData(countryHistoryData, dateValue); \r\n    const chartDataSet = getChartDataset(countryData, fields);\r\n    const dateList = getDateListFromData(countryData);\r\n\r\n    \r\n    return (\r\n           <ChartDisplay \r\n           chartType=\"line\"\r\n           chartOptions = {CHART_OPTIONS}\r\n           chartLabels = {dateList} \r\n           chartDataSet = {chartDataSet}\r\n        />      \r\n    )\r\n\r\n};\r\n\r\nexport default USHistoryChart;","import React from 'react';\r\n\r\nimport \"./covid19-us-dashboard.css\";\r\n\r\nimport {DEFAULT_SELECTED_DATA_FIELDS } from '../utilities/data-fields';\r\nimport ChartConfiguration from '../chart-config/chart-config.component';\r\nimport StateHistoryChart from '../state-history-chart/state-history-chart.component';\r\nimport {getFreshData} from '../utilities/data-processing';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport MobileMessage from '../mobile-message/mobile-message.component';\r\nimport USHistoryChart from '../us-history-chart/us-history-chart.component';\r\n\r\nclass Covid19UsDashboard extends React.Component {  \r\n\r\n    constructor() {\r\n        super();\r\n        \r\n        this.state = {\r\n            selectedState:\"ALL\",\r\n            selectedDateRange:\"30\",\r\n            selectedFields: DEFAULT_SELECTED_DATA_FIELDS,\r\n            statesHistoryData: null,\r\n            stateInformation: null,\r\n            countryHistoryData: null,\r\n            dataRefreshedTimestamp: \"\"\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        try {\r\n            const now = new Date();\r\n            const formatted_date = now.toLocaleString();\r\n\r\n            const freshData = await getFreshData();\r\n\r\n            await this.setState({\r\n                statesHistoryData: freshData.statesHistoryData,\r\n                stateInformation: freshData.stateInformation,\r\n                countryHistoryData: freshData.countryHistoryData,\r\n                dataRefreshedTimestamp: formatted_date\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    handleStateSelection(event) {\r\n        this.setState({selectedState: event.target.value})\r\n    }\r\n\r\n    handleDateRangeSelection(event) {\r\n        this.setState({selectedDateRange: event.target.value})\r\n    }\r\n\r\n    handleFieldSelection(event) {\r\n        const updatedSelectedFields = this.state.selectedFields;\r\n        updatedSelectedFields[event.target.value] = event.target.checked;\r\n        this.setState({ selectedFields: updatedSelectedFields}); \r\n    }\r\n\r\n    handleGroupSelection = (event) => {   \r\n\r\n        console.log(\"event.values=\", event.values);\r\n        const fieldGroupList = event.values;\r\n\r\n        const selectedGroupList = [];\r\n\r\n        fieldGroupList.forEach(fieldName => {\r\n            selectedGroupList[fieldName] = true;\r\n        });\r\n\r\n        console.log(\"fieldGroupList=\", selectedGroupList)\r\n        this.setState({ selectedFields: selectedGroupList}); \r\n    }\r\n\r\n    render () {\r\n\r\n        const{   \r\n            statesHistoryData,\r\n            countryHistoryData,\r\n            selectedState,\r\n            selectedDateRange,\r\n            selectedFields,\r\n            stateInformation,\r\n            dataRefreshedTimestamp\r\n        }  = this.state;\r\n\r\n        return (\r\n\r\n            <div className=\"state-data-history\">\r\n                <div className=\"page-title\">Covid19 Data Charts for U.S. States</div>\r\n                { !dataRefreshedTimestamp ? ( \r\n                    <Spinner />\r\n                ) : (\r\n\r\n                    <div className=\"page-layout\">\r\n                        <MobileMessage />\r\n                        <div className=\"chart-config-container\">\r\n                            <ChartConfiguration \r\n                                selectedState= {selectedState}\r\n                                selectedDateRange= {selectedDateRange}\r\n                                selectedFields={selectedFields}\r\n                                stateSelectionHandler={this.handleStateSelection.bind(this)} \r\n                                dateSelectionHander={this.handleDateRangeSelection.bind(this)}\r\n                                fieldSelectionHandler={this.handleFieldSelection.bind(this)}\r\n                                groupSelectionHandler={this.handleGroupSelection.bind(this)}\r\n                            />\r\n                        </div> \r\n\r\n                        {selectedState === \"ALL\" ? (\r\n\r\n                        <div className=\"chart-container\">\r\n                            <div className=\"chart-header\">\r\n                                Data for All United States last {selectedDateRange} days\r\n                            </div>\r\n                            <USHistoryChart \r\n                            countryHistoryData={countryHistoryData} \r\n                                selectedDateRange= {selectedDateRange}\r\n                                selectedFields={selectedFields}\r\n                            />\r\n                        </div>\r\n\r\n                        ) : (\r\n\r\n                        <div className=\"chart-container\">\r\n                            <div className=\"chart-header\">\r\n                                Data for {stateInformation[selectedState].name} last {selectedDateRange} days\r\n                            </div>\r\n                            \r\n                            <StateHistoryChart\r\n                                selectedState= {selectedState}\r\n                                selectedDateRange= {selectedDateRange}\r\n                                selectedFields={selectedFields}\r\n                                statesHistoryData={statesHistoryData}\r\n                            />\r\n\r\n                            <div className=\"chart-footer\"> \r\n                                Data Quality Grade for {stateInformation[selectedState].name}: &nbsp;&nbsp;<b>{stateInformation[selectedState].grade} **</b> <br/>\r\n                                <span className=\"site-link\" onClick={()=> window.open(stateInformation[selectedState].website)}>{selectedState} COVID19 Website</span>&nbsp;&nbsp;&bull;&nbsp;&nbsp;\r\n                                <span className=\"site-link\" onClick={()=> window.open('https://www.twitter.com/' + stateInformation[selectedState].twitter)}>Twitter</span>                                   \r\n                                \r\n                            </div>\r\n                        </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n                <div className=\"page-footer\">\r\n                    <b>** Data Quality Grade determined by The COVID Tracking Project </b><br/>\r\n                    Not All States Report All Data<br/>\r\n                    Historical Data Refreshed daily at 4:00 PM EST<br/>\r\n                    ~ ~ ~<br/>\r\n                    This is a visual representation of the data collected by The COVID Tracking Project<br/>\r\n                    For more info, visit <span className=\"site-link\" onClick={()=> window.open(\"https://covidtracking.com/\")}>https://covidtracking.com/</span><br/>\r\n                    For field definitions, visit <span className=\"site-link\" onClick={()=> window.open(\"https://covidtracking.com/api\")}>https://covidtracking.com/api</span><br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Covid19UsDashboard;","import React from 'react';\n\nimport Covid19UsDashboard from './components/covid19-us-dashboard/covid19-us-dashboard.component';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Covid19UsDashboard/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}