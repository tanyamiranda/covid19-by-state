{"version":3,"sources":["components/spinner/spinning-blue-circle.gif","serviceWorker.js","utilities/states-meta-data.js","utilities/data-fetching.js","utilities/data-fields.js","utilities/formatting.js","utilities/chart-data-processing.js","redux/chart-config/chart-config.types.js","utilities/urls.js","components/chart-config/chart-config.component.jsx","redux/chart-config/chart-config.actions.js","components/chart-display/chart-display.component.jsx","components/chart-footer/chart-footer.component.jsx","components/cdc-history-chart/cdc-history-chart.component.jsx","components/spinner/spinner.component.jsx","utilities/chart-options.js","components/age-group-summary/age-group-summary.component.jsx","components/data-totals/data-totals.component.jsx","components/dashboard/dashboard.component.jsx","App.js","redux/chart-config/chart-config.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","STATE_INFO","name","population","extra","CDC_QUERY_ACCESS_TOKEN","getFreshData","a","fetchJsonData","dataHistoryByState","dataHistoryUSA","cdcHistoryByJurisdiction","concat","dataCasesDeathsTotals","getTotalsForEachState","dataHospitalByState","dataHospitalUSA","dataHospitalNYCOnly","cdcHospitalDataByJurisdiction","lastDate","reduce","prev","current","date","nycLastDate","dataHospitalTotals","filter","data","getTotalsByJurisdiction","cdcTotalsByJurisdiction","deathsByAgeGroups","dataRefreshTimestamp","Date","url","json","fetch","response","ok","Error","statusText","dataCasesDeathsByState","totalsByState","Object","keys","forEach","casesDeathsData","find","hospitalData","inpatient_beds","inpatient_beds_covid","icu_beds","icu_beds_covid","push","total_cases","Number","total_deaths","stateHistoryData","totals","record","new_case","new_death","stateTotal","newStateTotal","YEAR_KEYS","YEARS","DATA_FIELD_COLORS","DATA_FIELD_DISPLAY_NAMES","ages_0_17","ages_18_29","ages_30_39","ages_40_49","ages_50_64","ages_65_74","ages_75_84","ages_85","CDC_DATA_CHART_FIELD_GROUPS","dailyTotals","AGE_GROUP_DATA_FIELDS","getDisplayNumber","num","Intl","NumberFormat","useGrouping","format","getPercentage","partialNum","totalNum","percent","toFixed","getFormattedDateForFiltering","dateValue","month","getMonth","day","getDate","year","getFullYear","length","getAgeGroupDataForState","selectedState","selectedYear","stateName","getCDCAgeGroupDataBySelection","getCDCHistoryDataByAgeGroups","ageGroupData","newGroupData","ageGroupDataRec","toISOString","replace","ageGroup","formatAgeGroupName","age_group","replaceAll","trim","deaths","sum_covid_19_deaths","dateRecord","rec","combineAgeGroupValues","result","age_group_sum","value","sum_total_deaths","getCDCHistoryDataBySelection","monthsSelected","search","monthsBack","substr","lenth","dateRange","getDateRangeValues","startDate","endDate","getCDCDataSetByDateRange","getCDCDataSetByYear","stateData","sort","b","getCDCAgeGroupDataByDateRange","calcDate","toLowerCase","ageGroupDataSet","compareAgeGroupValues","setHours","setMonth","setDate","ageGroupName","numA","substring","numB","ChartConfigTypes","SET_STATE_SELECTION","SET_DATE_RANGE_SELECTION","SET_FIELD_SELECTION","SET_COVID19_DATA","SET_STATE_HISTORY_DATA","SET_YEAR_SELECTION","DATASOURCE_LINKS","getDataSourceForAgeGroupData","label","comment","getDataSourceForHospitalData","dataSource","connect","chartConfig","dispatch","setStateSelection","userSelectedState","type","payload","setYearSelection","userSelectedYear","statesKeys","className","defaultValue","onChange","event","target","map","item","key","currentLineChart","ChartDisplay","chartType","chartOptions","chartLabels","chartDataSet","chartId","chartContainer","useRef","useState","chartInstance","setChartInstance","useEffect","options","labels","datasets","destroy","Chart","id","ref","ChartFooter","onClick","open","isDataLoaded","dataSet","selectedFieldGroup","stateChartTitle","displaySummary","dataFetchedSuccessfully","Array","isArray","fieldNames","fieldDatasets","fieldName","index","fill","backgroundColor","borderColor","borderWidth","dataTotal","row","fieldData","getChartDataset","dateList","datesList","newDateList","dateString","String","getDateListFromCDCData","Spinner","src","SpinnerImage","alt","getTimeSeriesChartOptions","displayMonthFormat","responsive","aspectRatio","maintainAspectRatio","title","display","tooltips","mode","intersect","bodyAlign","position","bodySpacing","callbacks","tooltipItem","datasetIndex","parseInt","toLocaleString","interaction","axis","legend","boxWidth","fontSize","usePointStyle","padding","elements","point","radius","scales","xAxes","gridLines","time","minUnit","tooltipFormat","scaleLabel","yAxes","ticks","min","beginAtZero","callback","formatYAxisDisplay","CHART_OPTIONS_FOR_AGE_GROUPS","footerFontStyle","titleMarginBottom","footerMarginTop","footer","covidDeaths","allDeaths","parseFloat","hover","stacked","labelText","ageLabels","ageGroups","shortNames","group","groupName","formatAgeGroupNames","covid19Deaths","totalDeaths","stateInformation","stateInfo","jurisdictionData","percentDeath","percentHospitalization","percentICU","percentDeathOfPositive","setCOVID19Data","freshData","loadData","footerComment","App","INITIAL_STATE","selectedFields","chartConfigReducer","action","combineReducers","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cf719d6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinning-blue-circle.cbcc3646.gif\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/* \r\nPopulation data taken from US Census estimates for July 2020. \r\nhttps://www2.census.gov/programs-surveys/decennial/2020/data/apportionment/population-change-data-table.pdf\r\n\r\nThis data changes approx every 18 months. No need to scrub every time.\r\n\r\n\"USA\" population = US Total in pdf + PR Total\r\n\r\n*/\r\nexport const STATE_INFO = [];\r\nSTATE_INFO[\"AK\"]={name:\"Alaska\", population:733391}\r\nSTATE_INFO[\"AL\"]={name:\"Alabama\", population:5024279}\r\nSTATE_INFO[\"AR\"]={name:\"Arkansas\", population:3011524}\r\nSTATE_INFO[\"AZ\"]={name:\"Arizona\", population:7151502}\r\nSTATE_INFO[\"CA\"]={name:\"California\", population:39538223}\r\nSTATE_INFO[\"CO\"]={name:\"Colorado\", population:5773714}\r\nSTATE_INFO[\"CT\"]={name:\"Connecticut\", population:3605944}\r\nSTATE_INFO[\"DC\"]={name:\"District of Columbia\", population:689545}\r\nSTATE_INFO[\"DE\"]={name:\"Delaware\", population:989948}\r\nSTATE_INFO[\"FL\"]={name:\"Florida\", population:21538187}\r\nSTATE_INFO[\"GA\"]={name:\"Georgia\", population:10711908}\r\nSTATE_INFO[\"HI\"]={name:\"Hawaii\", population:1455271}\r\nSTATE_INFO[\"IA\"]={name:\"Iowa\", population:3190369}\r\nSTATE_INFO[\"ID\"]={name:\"Idaho\", population:1839106}\r\nSTATE_INFO[\"IL\"]={name:\"Illinois\", population:12812508}\r\nSTATE_INFO[\"IN\"]={name:\"Indiana\", population:6785528}\r\nSTATE_INFO[\"KS\"]={name:\"Kansas\", population:2937880}\r\nSTATE_INFO[\"KY\"]={name:\"Kentucky\", population:4505836}\r\nSTATE_INFO[\"LA\"]={name:\"Louisiana\", population:4657757}\r\nSTATE_INFO[\"MA\"]={name:\"Massachusetts\", population:7029917}\r\nSTATE_INFO[\"MD\"]={name:\"Maryland\", population:6177224}\r\nSTATE_INFO[\"ME\"]={name:\"Maine\", population:1362359}\r\nSTATE_INFO[\"MI\"]={name:\"Michigan\", population:10077331}\r\nSTATE_INFO[\"MN\"]={name:\"Minnesota\", population:5706494}\r\nSTATE_INFO[\"MO\"]={name:\"Missouri\", population:6154913}\r\nSTATE_INFO[\"MS\"]={name:\"Mississippi\", population:2961279}\r\nSTATE_INFO[\"MT\"]={name:\"Montana\", population:1084225}\r\nSTATE_INFO[\"NC\"]={name:\"North Carolina\", population:10439388}\r\nSTATE_INFO[\"ND\"]={name:\"North Dakota\", population:779094}\r\nSTATE_INFO[\"NE\"]={name:\"Nebraska\", population:1961504}\r\nSTATE_INFO[\"NH\"]={name:\"New Hampshire\", population:1377529}\r\nSTATE_INFO[\"NJ\"]={name:\"New Jersey\", population:9288994}\r\nSTATE_INFO[\"NM\"]={name:\"New Mexico\", population:2117522}\r\nSTATE_INFO[\"NV\"]={name:\"Nevada\", population:3104614}\r\nSTATE_INFO[\"NY\"]={name:\"New York\", population:20201249, extra:\" (Excludes NYC)\"}\r\nSTATE_INFO[\"NYC\"]={name:\"New York City\", population:8804190}\r\nSTATE_INFO[\"OH\"]={name:\"Ohio\", population:11799448}\r\nSTATE_INFO[\"OK\"]={name:\"Oklahoma\", population:3959353}\r\nSTATE_INFO[\"OR\"]={name:\"Oregon\", population:4237256}\r\nSTATE_INFO[\"PA\"]={name:\"Pennsylvania\", population:13002700}\r\nSTATE_INFO[\"PR\"]={name:\"Puerto Rico\", population:3285874}\r\nSTATE_INFO[\"RI\"]={name:\"Rhode Island\", population:1097379}\r\nSTATE_INFO[\"SC\"]={name:\"South Carolina\", population:5118425}\r\nSTATE_INFO[\"SD\"]={name:\"South Dakota\", population:886667}\r\nSTATE_INFO[\"TN\"]={name:\"Tennessee\", population:6910840}\r\nSTATE_INFO[\"TX\"]={name:\"Texas\", population:29145505}\r\nSTATE_INFO[\"UT\"]={name:\"Utah\", population:3271616}\r\nSTATE_INFO[\"VA\"]={name:\"Virginia\", population:8631393}\r\nSTATE_INFO[\"VT\"]={name:\"Vermont\", population:643077}\r\nSTATE_INFO[\"WA\"]={name:\"Washington\", population:7705281}\r\nSTATE_INFO[\"WI\"]={name:\"Wisconsin\", population:5893718}\r\nSTATE_INFO[\"WV\"]={name:\"West Virginia\", population:1793716}\r\nSTATE_INFO[\"WY\"]={name:\"Wyoming\", population:576851}\r\nSTATE_INFO[\"USA\"]={name:\"United States\", population:334735155}\r\n","import {STATE_INFO} from './states-meta-data';\r\n\r\n// CDC Access Token to be allowed to pull more than 5k worth of records\r\nconst CDC_QUERY_ACCESS_TOKEN = \"&$limit=500000&$$app_token=fz22RHPlELrzEw1j9vq91YH6N\";\r\n\r\n// Cases and Deaths over time\r\nconst URL_CDC_CASES_DEATHS_BY_STATE_HISTORY = \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=submission_date as date,state,new_case,new_death&$order=submission_date, state\";\r\nconst URL_CDC_CASES_DEATHS_USA_HISTORY = \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=submission_date as date,'USA' as state,sum(new_case) as new_case,sum(new_death) as new_death&$group=submission_date&$order=submission_date\";\r\n\r\n// Cases and Deaths by age groups\r\nconst URL_CDC_DATA_AGE_GROUPS_PER_MONTH = \"https://data.cdc.gov/resource/9bhg-hcku.json?$select=year,month,state,age_group,sum(covid_19_deaths),sum(total_deaths) where sex ='All Sexes' and `group`='By Month' and age_group in ('0-17 years', '18-29 years', '30-39 years','40-49 years','50-64 years','65-74 years','75-84 years','85 years and over') group by year,month,state,age_group&$order=year,month\";\r\n\r\n// Hospital Data over time\r\nconst URL_CDC_HOSPITAL_DATA_BY_STATE_HISTORY = \"https://healthdata.gov/resource/g62h-syeh.json?$select=date,state,inpatient_beds,inpatient_beds_used_covid as inpatient_beds_covid,total_staffed_adult_icu_beds as icu_beds, staffed_icu_adult_patients_confirmed_covid as icu_beds_covid&$order=date, state\";\r\nconst URL_CDC_HOSPTIAL_DATA_USA_HISTORY = \"https://healthdata.gov/resource/g62h-syeh.json?$select=date,'USA' as state,sum(inpatient_beds)as inpatient_beds,sum(inpatient_beds_used_covid) as inpatient_beds_covid,sum(total_staffed_adult_icu_beds) as icu_beds,sum(staffed_icu_adult_patients_confirmed_covid) as icu_beds_covid&$group=date&$order=date\";\r\n\r\nconst URL_NYC_HOSPITAL_DATA = \"https://health.data.ny.gov/resource/jw46-jpb7.json?$select=as_of_date as date,'NYC' as state, sum(total_staffed_acute_care) as inpatient_beds, sum(patients_currently) as inpatient_beds_covid, sum(total_staffed_icu_beds_1) as icu_beds, sum(patients_currently_in_icu) as icu_beds_covid where ny_forward_region = 'NEW YORK CITY' group by date, state order by date desc\";\r\n\r\n\r\nexport const getFreshData = async() => {\r\n    \r\n    try {  \r\n        // Get cases and deaths data history for each state and USA and merge\r\n        const dataHistoryByState = await fetchJsonData(URL_CDC_CASES_DEATHS_BY_STATE_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const dataHistoryUSA = await fetchJsonData(URL_CDC_CASES_DEATHS_USA_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const cdcHistoryByJurisdiction = dataHistoryByState.concat(dataHistoryUSA);\r\n\r\n        // Get cases and deaths TOTALS from history\r\n        //const dataCasesDeathsTotals = getCaseDeathTotalsFromHistoryData(cdcHistoryByJurisdiction);\r\n\r\n        const dataCasesDeathsTotals = getTotalsForEachState(cdcHistoryByJurisdiction);\r\n\r\n        // Get hospital data history for each state, NYC, USA and then merge\r\n        const dataHospitalByState = await fetchJsonData(URL_CDC_HOSPITAL_DATA_BY_STATE_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const dataHospitalUSA =await fetchJsonData(URL_CDC_HOSPTIAL_DATA_USA_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const dataHospitalNYCOnly = await fetchJsonData(URL_NYC_HOSPITAL_DATA + CDC_QUERY_ACCESS_TOKEN);\r\n        const cdcHospitalDataByJurisdiction = dataHospitalByState.concat(dataHospitalUSA).concat(dataHospitalNYCOnly);\r\n\r\n        // Get last sumbission date to use for getting totals\r\n        const lastDate = (dataHospitalByState.reduce(function(prev, current) {\r\n            return (prev.date > current.date) ? prev : current\r\n        })).date\r\n\r\n        // Get NYC last date\r\n        const nycLastDate = (dataHospitalNYCOnly.reduce(function(prev, current) {\r\n            return (prev.date > current.date) ? prev : current\r\n        })).date\r\n\r\n        // Get hospital data TOTALS from history\r\n        const dataHospitalTotals = cdcHospitalDataByJurisdiction\r\n            .filter(function (data) {\r\n                const date = data.date;\r\n                return (data.state==='NYC' && date===nycLastDate) || date === lastDate;\r\n            });    \r\n        \r\n        // Merge TOTALS for cases and deaths and hospitals into one object \r\n        const cdcTotalsByJurisdiction = await getTotalsByJurisdiction(dataCasesDeathsTotals, dataHospitalTotals);\r\n        \r\n        // Get CDC Monthly Death Totals by Age Groups \r\n        const deathsByAgeGroups = await fetchJsonData(URL_CDC_DATA_AGE_GROUPS_PER_MONTH + CDC_QUERY_ACCESS_TOKEN);\r\n        \r\n        return {\r\n            dataRefreshTimestamp: new Date(),\r\n            deathsByAgeGroups: deathsByAgeGroups,\r\n            cdcTotalsByJurisdiction: cdcTotalsByJurisdiction,\r\n            cdcHistoryByJurisdiction: cdcHistoryByJurisdiction,\r\n            cdcHospitalDataByJurisdiction: cdcHospitalDataByJurisdiction\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nexport const fetchJsonData = async(url) => {\r\n    try{\r\n        let json = null;\r\n\r\n        //console.log(\"url = \" + url);\r\n\r\n        // U.S. States Historical Data\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n            json = await response.json();\r\n        }\r\n        else {\r\n            throw Error(response.statusText);\r\n        }\r\n        \r\n        return json;\r\n    }\r\n    catch (error) {\r\n        console.log(\"fetchJsonData() error!\", error);\r\n    }\r\n}\r\n\r\nexport const getTotalsForUSA = (totalsByState) => {\r\n\r\n    let total_cases = 0;\r\n    let total_deaths = 0;\r\n    let inpatient_beds = 0;\r\n    let inpatient_beds_covid = 0;\r\n    let icu_beds = 0;\r\n    let icu_beds_covid = 0;\r\n    let partiallyVaccinated = 0;\r\n    let fullyVaccinated = 0;\r\n\r\n    totalsByState.forEach(data => {\r\n        total_cases += Number(data.total_cases);\r\n        total_deaths += Number(data.total_deaths);\r\n        inpatient_beds += Number(data.inpatient_beds);\r\n        inpatient_beds_covid += Number(data.inpatient_beds_covid);\r\n        icu_beds += Number(data.icu_beds);\r\n        icu_beds_covid += Number(data.icu_beds_covid);\r\n        partiallyVaccinated += Number(data.partiallyVaccinated);\r\n        fullyVaccinated += Number(data.fullyVaccinated);\r\n    })\r\n\r\n    let totals = {\r\n        state:\"USA\", \r\n        total_cases: total_cases, \r\n        total_deaths: total_deaths,\r\n        inpatient_beds: inpatient_beds,\r\n        inpatient_beds_covid: inpatient_beds_covid,\r\n        icu_beds: icu_beds,\r\n        icu_beds_covid: icu_beds_covid,\r\n        partiallyVaccinated: partiallyVaccinated,\r\n        fullyVaccinated: fullyVaccinated\r\n    }\r\n\r\n    return totals;\r\n}\r\n\r\nconst getTotalsByJurisdiction = async(dataCasesDeathsByState, dataHospitalTotals) => {\r\n\r\n    let totalsByState= [];\r\n    let stateKeys = Object.keys(STATE_INFO);\r\n    \r\n    stateKeys.forEach((state) => {\r\n\r\n        let casesDeathsData =dataCasesDeathsByState.find(data => data.state===state);\r\n        let hospitalData = dataHospitalTotals.find(data => data.state===state);\r\n        if (!hospitalData)\r\n            hospitalData = {\r\n                inpatient_beds: 0,\r\n                inpatient_beds_covid: 0,\r\n                icu_beds: 0,\r\n                icu_beds_covid: 0\r\n            }\r\n\r\n        totalsByState.push({\r\n            state: state,\r\n            total_cases: Number(casesDeathsData.total_cases),\r\n            total_deaths: Number(casesDeathsData.total_deaths),\r\n            inpatient_beds: Number(hospitalData.inpatient_beds),\r\n            inpatient_beds_covid: Number(hospitalData.inpatient_beds_covid),\r\n            icu_beds: Number(hospitalData.icu_beds),\r\n            icu_beds_covid: Number(hospitalData.icu_beds_covid)\r\n        });\r\n      \r\n    })\r\n\r\n    return totalsByState;\r\n}\r\n\r\n\r\nconst getTotalsForEachState = (stateHistoryData) => {\r\n    var totals = [];\r\n    stateHistoryData.forEach((record) => {\r\n                \r\n        const new_case = Number(record.new_case);\r\n        const new_death = Number(record.new_death);\r\n        const state = record.state;\r\n\r\n        // Debugging - CDC records have negative values, was affecting totals\r\n        // if (new_case < 0 || new_death < 0)\r\n        //    console.log(\"negative values found: \" + JSON.stringify(record)); \r\n\r\n        const stateTotal = totals.find(data => data.state===state);\r\n\r\n        if (!stateTotal) {\r\n            const newStateTotal = {\r\n                state: state,\r\n                total_cases: new_case,\r\n                total_deaths: new_death\r\n            }\r\n\r\n            totals.push(newStateTotal);\r\n        }\r\n        else {\r\n            stateTotal.total_cases += new_case;\r\n            stateTotal.total_deaths += new_death;\r\n        }\r\n    });\r\n\r\n    return totals;\r\n}\r\n\r\n","/*\r\n This is needed to maintain descending year order.\r\n Using Object.keys() to get keys from YEARS sorts\r\n the years in ascending order.\r\n*/\r\nexport const YEAR_KEYS = [\r\n    \"months-6\",\r\n    \"months-9\",\r\n    \"months-12\",\r\n    \"2021\", \r\n    \"2020\",\r\n    \"0\"\r\n];\r\n\r\nexport const YEARS = {\r\n    \"months-6\": \"Last 6 months\",\r\n    \"months-9\": \"Last 9 months\",\r\n    \"months-12\": \"Last 12 months\",\r\n    \"2021\": \"All 2021\",\r\n    \"2020\": \"All 2020\",\r\n    \"0\": \"All Time\",\r\n}\r\n\r\nexport const YEARS_DEFAULT = \"months-6\";\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    'green',\r\n    'red',\r\n    'blue',\r\n    'orange',\r\n    'pink',\r\n    'lime',\r\n    'black',\r\n    'cyan',\r\n    'purple',\r\n    'brown'\r\n];\r\n\r\nexport const USA_IDENTIFIER = \"USA\";\r\n\r\nexport const US_STATES_DATA = {\r\n    USA:\"United States\",\r\n    AL:\"Alabama\",\r\n    AK:\"Alaska\",\r\n    AR:\"Arkansas\",\r\n    AZ:\"Arizona\",\r\n    CA:\"California\", \r\n    CO:\"Colorado\", \r\n    CT:\"Connecticut\", \r\n    DE:\"Delaware\",\r\n    DC:\"District Of Columbia\", \r\n    FL:\"Florida\", \r\n    GA:\"Georgia\",\r\n    HI:\"Hawaii\", \r\n    ID:\"Idaho\", \r\n    IL:\"Illinois\", \r\n    IA:\"Iowa\", \r\n    IN:\"Indiana\", \r\n    KS:\"Kansas\", \r\n    KY:\"Kentucky\", \r\n    LA:\"Louisiana\",\r\n    ME:\"Maine\",  \r\n    MD:\"Maryland\",\r\n    MA:\"Massachusetts\", \r\n    MI:\"Michigan\",\r\n    MN:\"Minnesota\",\r\n    MS:\"Mississippi\", \r\n    MO:\"Missouri\", \r\n    MT:\"Montana\", \r\n    NC:\"North Carolina\", \r\n    ND:\"North Dakota\", \r\n    NE:\"Nebraska\", \r\n    NV:\"Nevada\",\r\n    NH:\"New Hampshire\", \r\n    NJ:\"New Jersey\", \r\n    NM:\"New Mexico\",  \r\n    NY:\"New York\", \r\n    OH:\"Ohio\", \r\n    OK:\"Oklahoma\", \r\n    OR:\"Oregon\", \r\n    PA:\"Pennsylvania\", \r\n    PR:\"Puerto Rico\", \r\n    RI:\"Rhode Island\",\r\n    SC:\"South Carolina\", \r\n    SD:\"South Dakota\", \r\n    TN:\"Tennessee\", \r\n    TX:\"Texas\", \r\n    UT:\"Utah\", \r\n    VT:\"Vermont\", \r\n    VA:\"Virginia\",\r\n    WA:\"Washington\", \r\n    WI:\"Wisconsin\", \r\n    WV:\"West Virginia\", \r\n    WY:\"Wyoming\"\r\n}\r\n\r\nexport const DATA_FIELD_DISPLAY_NAMES = {   \r\n    new_case: \"New Cases\",\r\n    new_death: \"New Deaths\",\r\n    inpatient_beds_covid: \"Inpatient\",\r\n    icu_beds_covid: \"ICU\",\r\n    ages_0_17:\"0-17\",\r\n    ages_18_29:\"18-29\",\r\n    ages_30_39:\"30-39\",\r\n    ages_40_49:\"40-49\",\r\n    ages_50_64:\"50-64\",\r\n    ages_65_74:\"65-74\",\r\n    ages_75_84:\"75-84\",\r\n    ages_85:\"85+\"\r\n};\r\n\r\n\r\nexport const COUNTY_SORT_FIELDS = {\r\n    SORT_BY_DEATHS : \"deaths\",\r\n    SORT_BY_CASES : \"cases\",\r\n    SORT_BY_COUNTY : \"county\"\r\n};\r\n\r\n\r\nexport const CDC_DATA_FIELDS_DAILY = [\r\n    \"new_case\",\r\n    \"new_death\",\r\n];\r\n\r\nexport const CDC_DATA_FIELDS_TOTALS = [\r\n    \"max_tot_cases\",\r\n    \"max_tot_death\",\r\n];\r\n\r\nexport const CDC_DATA_CHART_FIELD_GROUPS = {\r\n    dailyTotals: [\r\n        \"new_case\",\r\n        \"new_death\"\r\n    ],\r\n    hospitalData: [\r\n        \"inpatient_beds_covid\",\r\n        \"icu_beds_covid\"\r\n    ]\r\n}\r\n\r\nexport const DATA_X_LABELS = [\r\n    \"Jan 2020\",\r\n    \"Feb 2020\",\r\n    \"Mar 2020\",\r\n    \"Apr 2020\",\r\n    \"May 2020\",\r\n    \"Jun 2020\",\r\n    \"Jul 2020\",\r\n    \"Aug 2020\",\r\n    \"Sep 2020\",\r\n    \"Oct 2020\",\r\n    \"Nov 2020\",\r\n    \"Dec 2020\",\r\n    \"Jan 2021\",\r\n    \"Feb 2021\",\r\n    \"Mar 2021\",\r\n    \"Apr 2021\",\r\n    \"May 2021\",\r\n    \"Jun 2021\",\r\n    \"Jul 2021\",\r\n    \"Aug 2021\",\r\n    \"Sep 2021\",\r\n    \"Oct 2021\",\r\n    \"Nov 2021\",\r\n    \"Dec 2021\",\r\n];\r\n\r\n\r\nexport const CDC_AGE_GROUPS = [\"0-17\",\"18-29\",\"30-39\",\"40-49\",\"50-64\",\"65-74\",\"75-84\",\"85+\"];\r\n\r\nexport const AGE_GROUP_DATA_FIELDS = [\r\n    \"ages_0_17\",\r\n    \"ages_18_29\",\r\n    \"ages_30_39\",\r\n    \"ages_40_49\",\r\n    \"ages_50_64\",\r\n    \"ages_65_74\",\r\n    \"ages_75_84\",\r\n    \"ages_85\"]","export const getDisplayNumber = (num) => {\r\n    if (!num)\r\n        num = 0;\r\n    return Intl.NumberFormat('en-US', {useGrouping: true}).format(num);\r\n}\r\n\r\nexport const getPercentage = (partialNum, totalNum) => {\r\n\r\n    if (totalNum===0)\r\n        return \"0\";\r\n\r\n    var percent = ((partialNum / totalNum) * 100).toFixed(2);\r\n    if (percent === \"0.00\")\r\n        percent = \"< 0.01\"\r\n\r\n    return percent + \"%\";\r\n}\r\n\r\nexport const getPercentageText = (partialNum, totalNum) => {\r\n\r\n    if (totalNum===0)\r\n        return partialNum;\r\n\r\n    var percent = ((partialNum / totalNum) * 100).toFixed(2);\r\n    if (percent === \"0.00\")\r\n        percent = \"< 0.01\"\r\n        \r\n    return percent + \"% of \" + getDisplayNumber(totalNum);\r\n}\r\n\r\nexport const getFormattedDateForFiltering = (dateValue) => {\r\n  \r\n    const date = new Date(dateValue);\r\n\r\n    let month = \"\" + (date.getMonth() + 1);\r\n    let day = \"\" + date.getDate();\r\n    let year = \"\" + date.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return Number(year + month + day);\r\n}\r\n\r\nexport const getFormattedDateForQuery = (dateValue) => {\r\n\r\n    const date = new Date(dateValue);\r\n\r\n    let month = \"\" + (date.getMonth() + 1);\r\n    let day = \"\" + date.getDate();\r\n    let year = \"\" + date.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return year + \"-\" + month + \"-\" +  day;\r\n\r\n}","import {DATA_FIELD_COLORS, DATA_FIELD_DISPLAY_NAMES} from './data-fields';\r\nimport {STATE_INFO} from './states-meta-data';\r\nimport {getFormattedDateForFiltering} from './formatting';\r\n\r\nexport const getAgeGroupDataForState = (deathsByAgeGroups, selectedState, selectedYear) => {\r\n\r\n    const stateName = STATE_INFO[selectedState].name;\r\n    let ageGroupData = getCDCAgeGroupDataBySelection(deathsByAgeGroups, stateName, selectedYear);\r\n\r\n    return ageGroupData;\r\n}\r\n\r\nexport const getCDCHistoryDataByAgeGroups = (deathsByAgeGroups, selectedState, selectedYear) => {\r\n\r\n    const ageGroupData = getAgeGroupDataForState(deathsByAgeGroups, selectedState, selectedYear);\r\n\r\n    let newGroupData = [];\r\n\r\n    ageGroupData.forEach((ageGroupDataRec) => {\r\n\r\n        const date = (new Date(ageGroupDataRec.month + \"/01/\" + ageGroupDataRec.year)).toISOString().replace('Z', '').replace('T', '');\r\n        const ageGroup = \"ages_\" + formatAgeGroupName(ageGroupDataRec.age_group).replaceAll(\"-\",\"_\").replaceAll(\"+\",\"\").trim();\r\n        const deaths = Number(ageGroupDataRec.sum_covid_19_deaths);\r\n \r\n        let dateRecord = newGroupData.find(rec => rec.date === date);\r\n\r\n        if(!dateRecord) {\r\n            dateRecord = {\r\n                date: date,\r\n                ages_0_17: ageGroup === \"ages_0_17\" ? deaths : 0,\r\n                ages_18_29:ageGroup === \"ages_18_29\" ? deaths : 0,\r\n                ages_30_39:ageGroup === \"ages_30_39\" ? deaths : 0,\r\n                ages_40_49:ageGroup === \"ages_40_49\" ? deaths : 0,\r\n                ages_50_64:ageGroup === \"ages_50_64\" ? deaths : 0,\r\n                ages_65_74:ageGroup === \"ages_65_74\" ? deaths : 0,\r\n                ages_75_84:ageGroup === \"ages_75_84\" ? deaths : 0,\r\n                ages_85:ageGroup === \"ages_85\" ? deaths : 0\r\n            }\r\n            \r\n            newGroupData.push(dateRecord);\r\n        }\r\n        else {\r\n            dateRecord[ageGroup] = deaths; \r\n        }      \r\n\r\n    });\r\n   \r\n    return newGroupData;\r\n}\r\n\r\nexport const combineAgeGroupValues = (ageGroupData) => {\r\n\r\n    var result = [];\r\n    ageGroupData.reduce(\r\n        function(age_group_sum, value) {\r\n            if (!age_group_sum[value.age_group]) {\r\n                age_group_sum[value.age_group] = {\r\n                    age_group: value.age_group,\r\n                    sum_covid_19_deaths: !Number(value.sum_covid_19_deaths) ? 0 : Number(value.sum_covid_19_deaths),\r\n                    sum_total_deaths: !Number(value.sum_total_deaths) ? 0 : Number(value.sum_total_deaths)\r\n                };\r\n                result.push(age_group_sum[value.age_group])\r\n            }\r\n            else {\r\n                age_group_sum[value.age_group].sum_covid_19_deaths += !Number(value.sum_covid_19_deaths) ? 0 : Number(value.sum_covid_19_deaths);\r\n                age_group_sum[value.age_group].sum_total_deaths += !Number(value.sum_total_deaths) ? 0 : Number(value.sum_total_deaths);\r\n            }\r\n            return age_group_sum;\r\n        }\r\n    , {});\r\n\r\n    return result;\r\n\r\n}\r\n\r\nexport const getCDCHistoryDataBySelection = (cdcHistoryByJurisdiction, selectedState, selectedYear) => {\r\n\r\n    const monthsSelected = selectedYear.search(\"months-\");\r\n\r\n    if (monthsSelected > -1) {\r\n        const monthsBack = selectedYear.substr(monthsSelected+7, selectedYear.lenth); \r\n        const dateRange = getDateRangeValues(monthsBack);\r\n\r\n        const startDate = Number(getFormattedDateForFiltering(dateRange.startDate));\r\n        const endDate = Number(getFormattedDateForFiltering(dateRange.endDate));\r\n\r\n        let dataSet = getCDCDataSetByDateRange(cdcHistoryByJurisdiction, selectedState, startDate, endDate);\r\n        return dataSet; \r\n    }\r\n    else {\r\n\r\n        let dataSet = getCDCDataSetByYear(cdcHistoryByJurisdiction, selectedState, selectedYear);\r\n        return dataSet;\r\n\r\n    }\r\n}\r\n\r\nexport const getCDCDataSetByYear = (cdcHistoryByJurisdiction, selectedState, selectedYear) =>{\r\n    \r\n    let dataSet = [];\r\n\r\n    if(selectedYear === \"0\") {\r\n        dataSet = cdcHistoryByJurisdiction\r\n            .filter(stateData => stateData.state === selectedState);\r\n    }\r\n    else {\r\n        dataSet = cdcHistoryByJurisdiction\r\n            .filter(stateData => stateData.state === selectedState && stateData.date.substr(0,4) === selectedYear);  \r\n    }\r\n\r\n    return dataSet.sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n}\r\n\r\n// The variables startDate and endDate are numerical format yyyymmdd\r\nexport const getCDCDataSetByDateRange = (cdcHistoryByJurisdiction, selectedState, startDate, endDate) =>{\r\n    \r\n    let dataSet = cdcHistoryByJurisdiction\r\n        .filter(function (stateData) {\r\n            const date = Number(stateData.date.substr(0,10).replaceAll('-',''));\r\n            return stateData.state === selectedState \r\n                && date >= startDate \r\n                && date <= endDate;\r\n        })\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n\r\n    return dataSet;\r\n}\r\n\r\nexport const getCDCAgeGroupDataByDateRange = (deathsByAgeGroups, stateName, dateRange) => {\r\n    \r\n    //console.log(\"dateRange.startDate = \" + dateRange.startDate + \" | dateRange.endDate = \" + dateRange.endDate);\r\n\r\n    let temp = deathsByAgeGroups\r\n    .filter(function (stateData) {\r\n        const year = stateData.year;\r\n        const month = stateData.month;\r\n        const calcDate = new Date(month + \"/01/\" + year);\r\n        \r\n        return stateData.state.toLowerCase() === stateName.toLowerCase() \r\n            && calcDate >= dateRange.startDate \r\n            && calcDate <= dateRange.endDate;\r\n    });\r\n\r\n    return temp;\r\n}\r\n\r\nconst getCDCAgeGroupDataBySelection = (deathsByAgeGroups, stateName, selectedYear) => {\r\n    \r\n    let ageGroupDataSet = [];\r\n    const monthsSelected = selectedYear.search(\"months-\");\r\n    \r\n    if (monthsSelected > -1) {\r\n        const monthsBack = Number(selectedYear.substr(monthsSelected+7, selectedYear.lenth));        \r\n        const dateRange = getDateRangeValues(monthsBack)\r\n        ageGroupDataSet = getCDCAgeGroupDataByDateRange(deathsByAgeGroups, stateName, dateRange)\r\n    }\r\n    else { \r\n        if (selectedYear === \"0\"){\r\n            ageGroupDataSet = deathsByAgeGroups\r\n                .filter(data => data.state.toLowerCase() === stateName.toLowerCase())   \r\n        }\r\n        else {\r\n            const startDate = new Date(\"1/1/\" + selectedYear);\r\n            const endDate = new Date(\"12/31/\" + selectedYear);\r\n            const dateRange = {startDate: startDate, endDate: endDate}\r\n            ageGroupDataSet = getCDCAgeGroupDataByDateRange(deathsByAgeGroups, stateName, dateRange)\r\n        }\r\n    }\r\n\r\n    ageGroupDataSet.sort((a,b) => compareAgeGroupValues(a.age_group,b.age_group));\r\n\r\n    return ageGroupDataSet;\r\n}    \r\n\r\nexport const getDateRangeValues = (monthsBack) => {\r\n    \r\n    const startDate = new Date(new Date().setHours(0, 0, 0, 0));\r\n    const endDate = new Date(new Date().setHours(0, 0, 0, 0));\r\n\r\n    startDate.setMonth(startDate.getMonth() - monthsBack);\r\n    startDate.setDate(1);\r\n\r\n    return {startDate: startDate, endDate: endDate} \r\n}\r\n\r\nexport const getAgeGroupForState = (deathsByAgeGroups, stateName, selectedYear) => {\r\n    \r\n    let ageGroupDataSet = [];\r\n\r\n    if (selectedYear === \"0\"){\r\n        const temp = deathsByAgeGroups\r\n        .filter(data => data.state.toLowerCase() === stateName.toLowerCase())   \r\n        ageGroupDataSet = combineAgeGroupValues(temp);    \r\n    }\r\n    else {\r\n        ageGroupDataSet = deathsByAgeGroups\r\n        .filter(data => data.state.toLowerCase() === stateName.toLowerCase() && data.year === selectedYear)    \r\n    }\r\n\r\n    return ageGroupDataSet.sort((a,b) => compareAgeGroupValues(a.age_group,b.age_group));\r\n}    \r\n\r\nexport const formatAgeGroupName = (ageGroupName) => {\r\n    \r\n    const newGroupName = ageGroupName.replace(\"years and over\",\"+\").replace(\"years\",\"\").replace(\"year\",\"\").replace(\"Under\",\"<\"); \r\n\r\n    return newGroupName;\r\n}\r\n\r\nexport const formatAgeGroupNames = (ageGroups) => {\r\n    const shortNames = [];\r\n\r\n    ageGroups.forEach(group => {\r\n        const groupName = formatAgeGroupName(group); \r\n        shortNames.push(groupName);\r\n    });\r\n\r\n    return shortNames;\r\n}\r\n\r\nconst compareAgeGroupValues = (a, b) => {\r\n\r\n    let numA = Number(a.substring(0,2).replace(\"-\",\"\").toLowerCase().replace(\"un\",\"0\"));\r\n    let numB = Number(b.substring(0,2).replace(\"-\",\"\").toLowerCase().replace(\"un\",\"0\"));\r\n\r\n    if (numA > numB) return 1;\r\n    if (numA < numB) return -1;\r\n\r\n    return 0;\r\n}\r\n\r\nexport const getChartDataset = (data, fieldNames) => {\r\n\r\n    const fieldDatasets = [];\r\n\r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        fieldDatasets.push({\r\n            fieldName: fieldName, \r\n            label: DATA_FIELD_DISPLAY_NAMES[fieldName],\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            borderWidth: 1.5,\r\n            dataTotal: 0,\r\n            data: []\r\n            \r\n        })\r\n    })\r\n\r\n    data.forEach(row => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = fieldDatasets.find((data => data.fieldName === fieldName))    \r\n            const data = !row[fieldName] ? 0 : row[fieldName];\r\n            fieldData.dataTotal += Number(data);\r\n            fieldData.data.push(data);\r\n        })\r\n    });\r\n\r\n    return fieldDatasets;\r\n}\r\n\r\nexport const getChartDatasetSummary = () => {\r\n\r\n}\r\n\r\nexport const getAgeGroupChartDataset = (covidDeaths, allDeaths) => {\r\n\r\n    const ageGroupDataSet = [\r\n        {    \r\n            label: \"Covid-19\",\r\n            backgroundColor: \"red\",\r\n            data:covidDeaths \r\n        },\r\n        { \r\n            label: \"All Deaths\",\r\n            backgroundColor: \"blue\",\r\n            data:allDeaths\r\n        }\r\n    ];\r\n\r\n    return ageGroupDataSet;\r\n}\r\n\r\nexport const getDateListFromCDCData = (dataSet) => {\r\n\r\n    const datesList = dataSet.map(item => item.date);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var year = Number(dateString.substring(2,4));\r\n        var month = Number(dateString.substring(5,7));\r\n        var day = Number(dateString.substring(8,10));\r\n        \r\n        newDateList.push(new Date(month + \"/\" + day + \"/\" + year));\r\n    });\r\n\r\n    return newDateList;\r\n}","const ChartConfigTypes = {\r\n    SET_STATE_SELECTION : \"SET_STATE_SELECTION\",\r\n    SET_DATE_RANGE_SELECTION : \"SET_DATE_RANGE_SELECTION\",\r\n    SET_FIELD_SELECTION : \"SET_FIELD_SELECTION\",\r\n    SET_COVID19_DATA : \"SET_COVID19_DATA\",\r\n    SET_STATE_HISTORY_DATA: \"SET_STATE_HISTORY_DATA\",\r\n    SET_YEAR_SELECTION : \"SET_YEAR_SELECTION\"\r\n};\r\n\r\nexport default ChartConfigTypes;","\r\nconst DATASOURCE_LINKS = {\r\n    URL_CDC_CASESDEATHS : \"https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36\",\r\n    URL_CDC_DEATHSBYAGE : \"https://data.cdc.gov/NCHS/Provisional-COVID-19-Death-Counts-by-Sex-Age-and-S/9bhg-hcku\",\r\n    URL_HOSPITALDATA : \"https://healthdata.gov/Hospital/COVID-19-Reported-Patient-Impact-and-Hospital-Capa/g62h-syeh\",\r\n    URL_NYC_HOSPITALDATA : \"https://health.data.ny.gov/Health/New-York-State-Statewide-COVID-19-Hospitalizations/jw46-jpb7/data\"\r\n}\r\n\r\nexport const getDataSourceForAgeGroupData = (state) => {\r\n\r\n    let dataSource = {\r\n        url: DATASOURCE_LINKS.URL_CDC_DEATHSBYAGE,\r\n        label: \"Center for Disease Control\",\r\n        comment: \"Note: This dataset is update weekly.\"\r\n    }\r\n\r\n    return dataSource;\r\n\r\n}\r\n\r\nexport const getDataSourceForCasesDeathsData = (state) =>{\r\n\r\n    let dataSource = {\r\n        url: DATASOURCE_LINKS.URL_CDC_CASESDEATHS,\r\n        label: \"Center for Disease Control\",\r\n        comment: \"\"\r\n    }\r\n\r\n    return dataSource;\r\n\r\n}\r\n\r\nexport const getDataSourceForHospitalData = (state) =>{\r\n\r\n    let dataSource = {\r\n        url: DATASOURCE_LINKS.URL_HOSPITALDATA,\r\n        label: \"HealthData.gov\",\r\n        comment: \"\"\r\n    }\r\n\r\n    if (state===\"NYC\") {\r\n        dataSource.url = DATASOURCE_LINKS.URL_NYC_HOSPITALDATA;\r\n        dataSource.label = \"Health Data NY\";\r\n    }\r\n\r\n    return dataSource;\r\n    \r\n}","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './chart-config.css';\r\nimport {YEARS, YEARS_DEFAULT, YEAR_KEYS} from '../../utilities/data-fields';\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\nimport {setStateSelection, setYearSelection} from '../../redux/chart-config/chart-config.actions';\r\n\r\nconst ChartConfiguration = ({selectedState, selectedYear, setStateSelection, setYearSelection}) => {\r\n\r\n    const statesKeys = Object.keys(STATE_INFO);\r\n    \r\n    const handleStateSelection = (event) => {\r\n        setStateSelection(event.target.value);\r\n    }\r\n\r\n    const handleYearSelection = (event) => {\r\n        setYearSelection(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-configuration\">\r\n            <div className=\"top-section\">\r\n                \r\n                <span className=\"config-section\">\r\n                    <select name=\"stateSelection\" defaultValue={!selectedState ? \"USA\" : selectedState}  onChange={handleStateSelection}>\r\n                        {statesKeys.map ((item) => \r\n                            <option key={item} value={item} >{STATE_INFO[item].name + (STATE_INFO[item].extra != null ? STATE_INFO[item].extra : \"\")}</option>\r\n                        )}\r\n                    </select>\r\n                </span>\r\n                \r\n                <span className=\"config-year\">\r\n                    <select name=\"yearSelection\" defaultValue={!selectedYear ? YEARS_DEFAULT : selectedYear}  onChange={handleYearSelection}>\r\n                        {YEAR_KEYS.map ((item) => \r\n                            <option key={item} value={item} >{YEARS[item]}</option>\r\n                        )}\r\n                    </select>\r\n                </span>\r\n                \r\n            </div>            \r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedYear: state.chartConfig.selectedYear\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setStateSelection: (userSelectedState) => dispatch(setStateSelection(userSelectedState)),\r\n    setYearSelection: (userSelectedYear) => dispatch(setYearSelection(userSelectedYear))\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChartConfiguration);","import ChartConfigTypes from './chart-config.types';\r\n\r\nexport const setStateSelection = (stateSelection) => ({\r\n    type : ChartConfigTypes.SET_STATE_SELECTION,\r\n    payload: stateSelection\r\n});\r\n\r\nexport const setYearSelection = (yearSelection) => ({\r\n    type : ChartConfigTypes.SET_YEAR_SELECTION,\r\n    payload: yearSelection\r\n});\r\n\r\nexport const setCOVID19Data = (data) => ({\r\n    type : ChartConfigTypes.SET_COVID19_DATA,\r\n    payload: data\r\n});\r\n\r\n\r\n\r\n","\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from 'chart.js';\r\nimport './chart-display.css';\r\n\r\n// Necessary to be able to clear previous charts\r\nlet currentLineChart = [];\r\n\r\nconst ChartDisplay = ({chartType, chartOptions, chartLabels, chartDataSet, chartId}) => {\r\n    const chartContainer = useRef(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if (chartContainer && chartContainer.current) {\r\n            const chartConfig = {\r\n                type: chartType,\r\n                options: chartOptions,\r\n                data: {\r\n                    labels: chartLabels,\r\n                    datasets: chartDataSet\r\n                }            \r\n            }\r\n\r\n            // Destroy previous chart if it exists \r\n            if (typeof currentLineChart[chartId] !== \"undefined\") currentLineChart[chartId].destroy();\r\n\r\n            currentLineChart[chartId] = new Chart(chartContainer.current, chartConfig);\r\n            setChartInstance(currentLineChart);\r\n            \r\n        }\r\n    }, [chartContainer, chartType, chartOptions, chartLabels, chartDataSet, chartId]);\r\n    \r\n    return (\r\n        <div className=\"chart-display\">\r\n            <canvas id={!chartInstance ? \"0\" : chartId } ref={chartContainer} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDisplay;\r\n","import React from 'react'\r\n\r\nimport './chart-footer.css';\r\n\r\nconst ChartFooter = ({dataSource}) => {\r\n\r\n    return (\r\n        <div>\r\n            {dataSource != null ?\r\n                <div className=\"data-sources\">Source:&nbsp; \r\n                    <span className=\"site-link\" onClick={()=> window.open(dataSource.url)}>{dataSource.label}</span>\r\n                    <span className=\"footer-comment\"><br/>{dataSource.comment}</span>\r\n                </div>\r\n                :\r\n                <span></span>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default ChartFooter;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './cdc-history-chart.css';\r\n\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nimport {YEARS} from '../../utilities/data-fields';\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\nimport {getDisplayNumber} from '../../utilities/formatting';\r\nimport {getChartDataset, getDateListFromCDCData,} from '../../utilities/chart-data-processing';\r\nimport ChartFooter from '../chart-footer/chart-footer.component';\r\n\r\nconst CDCHistoryChart = ({selectedState, selectedYear, isDataLoaded, \r\n    dataSet, selectedFieldGroup, stateChartTitle, chartId, chartOptions, displaySummary, dataSource}) => {  \r\n    \r\n    const dataFetchedSuccessfully = isDataLoaded && Array.isArray(dataSet) && dataSet.length > 0;\r\n    const chartDataSet = getChartDataset(dataSet, selectedFieldGroup);\r\n    const dateList = getDateListFromCDCData(dataSet);\r\n   \r\n    return (\r\n        <div className=\"dashboard-component state-history-chart\">\r\n            <div className=\"dashboard-component-title\">\r\n                <span>{stateChartTitle}</span>\r\n            </div>\r\n            <div className=\"dashboard-component-subtitle\">\r\n                <span>{STATE_INFO[selectedState].name} | {YEARS[selectedYear]}</span>\r\n            </div>\r\n            {dataFetchedSuccessfully ? \r\n                    <ChartDisplay \r\n                    chartType=\"line\"\r\n                    chartOptions = {chartOptions}\r\n                    chartLabels = {dateList} \r\n                    chartDataSet = {chartDataSet}\r\n                    chartId = {chartId}\r\n                    />\r\n            : \r\n                <div>Problem fetching data from CDC site...</div>\r\n            }\r\n            {displaySummary ?\r\n                <div className='chart-summary'>\r\n                    <div className='summary-title'>Totals for Selection</div>\r\n                    {chartDataSet.map((item) =>\r\n                        <div className='chart-summary-row' key={item.label}> \r\n                            <div className='label'>{item.label}</div>\r\n                            <div className='value'>{getDisplayNumber(item.dataTotal)}</div>\r\n                        </div>    \r\n                    )}\r\n                </div>\r\n            :\r\n                <div></div>\r\n            }\r\n            <div>\r\n                <ChartFooter dataSource = {dataSource}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedYear: state.chartConfig.selectedYear,\r\n    isDataLoaded: state.chartConfig.isDataLoaded\r\n});\r\n\r\nexport default connect(mapStateToProps)(CDCHistoryChart);","import React from 'react';\r\n\r\nimport SpinnerImage from './spinning-blue-circle.gif';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => (\r\n    <div className='spinner-page'>\r\n        <div>\r\n            <div><img className='spinner-image' src={SpinnerImage} alt=\"Loading CDC Data\"/></div>\r\n            <div>Loading CDC Data...</div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Spinner;\r\n\r\n","export const getTimeSeriesChartOptions = (displayMonthFormat) => {\r\n\r\n    return {\r\n        responsive: true,\r\n        aspectRatio: 1,\r\n        maintainAspectRatio: false,\r\n        title: { display: false},\r\n        tooltips: {\r\n            mode: 'index', \r\n            intersect: false,\r\n            bodyAlign: 'left',\r\n            position: 'nearest',\r\n            bodySpacing: 5,\r\n            callbacks: {\r\n                label: function(tooltipItem, data) {\r\n                    var type = data.datasets[tooltipItem.datasetIndex].label;\r\n                    var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n                    return type + \" : \" + parseInt(value).toLocaleString();\r\n                }\r\n            }\r\n        },\r\n        interaction: {\r\n            intersect: false,\r\n            axis: 'x'\r\n        },\r\n        legend: {\r\n            position:'top', \r\n            labels: {\r\n                boxWidth:5, \r\n                fontSize:14,\r\n                usePointStyle:true, \r\n                padding:15\r\n            }\r\n        },\r\n        elements: {\r\n            point:{\r\n                radius: 0\r\n            }\r\n        },\r\n        scales: {\r\n            xAxes: [{\r\n                display: true,\r\n                type: 'time',\r\n                gridLines: {\r\n                    display:true\r\n                },\r\n                time: {\r\n                    minUnit: 'month',\r\n                    tooltipFormat: displayMonthFormat ? \"MMM YYYY\" : 'MM/DD/YYYY'\r\n                },\r\n                scaleLabel: {\r\n                    display: true\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                display: true,\r\n                scaleLabel: {\r\n                    display: false\r\n                },\r\n                ticks: {\r\n                    min: 0,\r\n                    beginAtZero:true,\r\n                    callback: function(label) {\r\n                        return formatYAxisDisplay(label);\r\n                    }                \r\n                }\r\n            }]\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const CHART_OPTIONS_FOR_AGE_GROUPS = {\r\n    aspectRatio: 1,\r\n    maintainAspectRatio: false,\r\n    responsive: true,\r\n    title: { display: false},\r\n    tooltips: {\r\n        mode: 'index', \r\n        intersect: false,\r\n        bodyAlign: 'left',\r\n        footerFontStyle: 'normal',\r\n        bodySpacing: 5,\r\n        titleMarginBottom: 10,\r\n        footerMarginTop: 10,\r\n        callbacks: {\r\n            title: function(tooltipItem) {\r\n                return \"Ages \" + tooltipItem[0].label \r\n            },\r\n\r\n            label: function(tooltipItem, data) {\r\n                var type = data.datasets[tooltipItem.datasetIndex].label;\r\n                var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n                return type + \" : \" + parseInt(value).toLocaleString();\r\n            },\r\n\r\n            footer: function(tooltipItem) {\r\n                const covidDeaths = tooltipItem[0].value;\r\n                const allDeaths = tooltipItem[1].value;\r\n                const percent = parseFloat((covidDeaths/allDeaths) * 100).toFixed(1)+\"%\";\r\n                return [percent + \" of deaths\",\"due to COVID-19\"] ;\r\n            }\r\n\r\n          }\r\n    },\r\n    hover: {mode: 'nearest', intersect: true},\r\n    legend: {position:'top', labels: {boxWidth:5, fontSize:14, usePointStyle:true, padding: 10}},\r\n    elements: {\r\n        point:{\r\n            radius: 0\r\n        }\r\n    },\r\n    \r\n    scales: {\r\n        xAxes:[{\r\n            stacked: true,\r\n            ticks: {\r\n                beginAtZero: true,\r\n            }\r\n        }],\r\n        yAxes:[{\r\n            // stacked:false - places bars in FRONT of each other instead of on TOP of each other\r\n            // if set to true, the two bars are combined into one bar with a aggregate total.\r\n            stacked: false, \r\n            ticks: {\r\n                beginAtZero: true,\r\n                callback: function(label) {\r\n                    return formatYAxisDisplay(label);\r\n                }\r\n              }\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n// Display K for thousands, M for millions\r\n// Instead of 200000 display 200K\r\n// Instead of 1900000 display 1M\r\nconst formatYAxisDisplay = (labelText) => {\r\n\r\n    let label = Number(labelText);\r\n    let newLabel = \"\";\r\n\r\n    if (label >= 1000000) \r\n        newLabel = label / 1000000 + 'M';\r\n    else if (label >= 10000) \r\n        newLabel = label / 1000 + 'K';\r\n    else \r\n        newLabel = label;\r\n\r\n    return newLabel;\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './age-group-summary.css';\r\nimport {getAgeGroupChartDataset, combineAgeGroupValues, getAgeGroupDataForState, formatAgeGroupNames} from '../../utilities/chart-data-processing';\r\nimport {CHART_OPTIONS_FOR_AGE_GROUPS} from '../../utilities/chart-options';\r\nimport {YEARS} from '../../utilities/data-fields';\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\nimport ChartFooter from '../chart-footer/chart-footer.component';\r\nimport {getDataSourceForAgeGroupData} from '../../utilities/urls';\r\n\r\nconst AgeGroupSummary = ({deathsByAgeGroups, selectedState, selectedYear}) => {\r\n\r\n    const dataFetchedSuccessfully = Array.isArray(deathsByAgeGroups) && deathsByAgeGroups.length > 0;\r\n\r\n    const dataSet = combineAgeGroupValues(getAgeGroupDataForState(deathsByAgeGroups, selectedState, selectedYear));\r\n\r\n    const ageLabels = formatAgeGroupNames(dataSet.map(item => item.age_group));\r\n    const covid19Deaths = dataSet.map(item => item.sum_covid_19_deaths == null ? 0 : item.sum_covid_19_deaths);\r\n    const totalDeaths = dataSet.map(item => item.sum_total_deaths == null ? 0 : item.sum_total_deaths);\r\n    const chartDataSet = getAgeGroupChartDataset(covid19Deaths, totalDeaths);\r\n    const dataSource = getDataSourceForAgeGroupData(selectedState);\r\n\r\n    return(\r\n        <div className=\"dashboard-component demographics\">\r\n            <div className=\"dashboard-component-title\">Deaths By Age Group</div> \r\n            <div className=\"dashboard-component-subtitle\">{STATE_INFO[selectedState].name} | {YEARS[selectedYear]}</div>\r\n            <div>\r\n                {dataFetchedSuccessfully ? \r\n                    <div className=\"demographics\">\r\n                        <div>\r\n                            <ChartDisplay \r\n                            chartType=\"bar\"\r\n                            chartOptions = {CHART_OPTIONS_FOR_AGE_GROUPS}\r\n                            chartDataSet = {chartDataSet}\r\n                            chartLabels = {ageLabels}\r\n                            chartId = \"DeathsByAgeGroup\"\r\n                            />\r\n                        </div>    \r\n                    </div>\r\n                : \r\n                    <div>Problem fetching data from CDC site...</div>\r\n                }\r\n            </div>    \r\n            <div>\r\n                <ChartFooter dataSource = {dataSource}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedYear: state.chartConfig.selectedYear,\r\n    deathsByAgeGroups: state.chartConfig.deathsByAgeGroups\r\n});\r\n\r\nexport default connect(mapStateToProps)(AgeGroupSummary);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './data-totals.css';\r\n\r\nimport {getDisplayNumber, getPercentage} from '../../utilities/formatting'\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\n\r\nconst DataTotals = ({selectedState, cdcTotalsByJurisdiction}) => {\r\n\r\n    const dataFetchedSuccessfully = Array.isArray(cdcTotalsByJurisdiction) && cdcTotalsByJurisdiction.length > 0;\r\n\r\n    let stateInfo = STATE_INFO[selectedState];\r\n\r\n    let jurisdictionData = [];        \r\n    \r\n    let percentDeath =  0\r\n    let percentHospitalization = 0;\r\n    let percentICU = 0;\r\n    let percentDeathOfPositive = 0;\r\n\r\n    if (dataFetchedSuccessfully) {\r\n        jurisdictionData = cdcTotalsByJurisdiction.find(data => data.state===selectedState);\r\n\r\n        percentDeath =  getPercentage(jurisdictionData.total_deaths,stateInfo.population);\r\n        percentHospitalization =  getPercentage(jurisdictionData.inpatient_beds_covid,jurisdictionData.inpatient_beds);\r\n        percentICU =  getPercentage(jurisdictionData.icu_beds_covid,jurisdictionData.icu_beds);\r\n        percentDeathOfPositive = getPercentage(jurisdictionData.total_deaths, jurisdictionData.total_cases);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"data-totals-component\">\r\n            {dataFetchedSuccessfully ? \r\n                <div>\r\n                    <div className='data-totals-title'>Current Totals for<br/>{stateInfo.name + (stateInfo.extra != null ? stateInfo.extra : \"\")}</div>\r\n                    <div className=\"data-totals\">\r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Total Cases</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.total_cases)}</div>\r\n                                <div className=\"percent\">Confirmed &amp; Probable Cases</div>\r\n                            </div>\r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Total Deaths</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.total_deaths)}</div>\r\n                                <div className=\"percent\">{percentDeath} of Est. Population** <br/>{percentDeathOfPositive} of Total Cases</div>\r\n                            </div>\r\n                        \r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Currently Hospitalized</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.inpatient_beds_covid)}</div>\r\n                                <div className=\"percent\">{percentHospitalization} of {getDisplayNumber(jurisdictionData.inpatient_beds)}<br/>Inpatient Beds Available</div>\r\n                            </div>\r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Currently in ICU</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.icu_beds_covid)}</div>\r\n                                <div className=\"percent\">{percentICU} of {getDisplayNumber(jurisdictionData.icu_beds)}<br/>ICU Beds Available</div>\r\n                            </div>\r\n                    </div>        \r\n                </div>    \r\n            : \r\n                <div>Problem fetching data from CDC site...</div>\r\n            }\r\n            <div className=\"more-data\">\r\n                <div>** Estimated population of {selectedState}: {getDisplayNumber(stateInfo.population)}</div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    cdcTotalsByJurisdiction: state.chartConfig.cdcTotalsByJurisdiction,\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataTotals);","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport \"./dashboard.css\";\r\n\r\nimport {getFreshData} from '../../utilities/data-fetching';\r\nimport {getCDCHistoryDataBySelection,getCDCHistoryDataByAgeGroups} from '../../utilities/chart-data-processing';\r\nimport {setCOVID19Data} from '../../redux/chart-config/chart-config.actions';\r\nimport {CDC_DATA_CHART_FIELD_GROUPS, AGE_GROUP_DATA_FIELDS} from '../../utilities/data-fields';\r\nimport {getDataSourceForAgeGroupData, getDataSourceForCasesDeathsData, getDataSourceForHospitalData} from '../../utilities/urls';\r\nimport ChartConfiguration from '../chart-config/chart-config.component';\r\nimport CDCHistoryChart from '../cdc-history-chart/cdc-history-chart.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport AgeGroupSummary from '../age-group-summary/age-group-summary.component';\r\nimport {getTimeSeriesChartOptions} from '../../utilities/chart-options';\r\nimport DataTotals from '../data-totals/data-totals.component';\r\n\r\nconst Covid19UsDashboard =({setCOVID19Data, isDataLoaded, selectedState, selectedYear, cdcHistoryByJurisdiction,cdcHospitalDataByJurisdiction,deathsByAgeGroups}) => {  \r\n\r\n    useEffect(() => {\r\n\r\n        //console.log(\"useEffect()...\");\r\n        async function loadData() {\r\n            try {   \r\n                if (!isDataLoaded) {\r\n                    //console.log(\"Refreshing Data from CDC...\" + new Date());\r\n                    const freshData = await getFreshData();\r\n                    setCOVID19Data(freshData);\r\n                    //console.log(\"Data Refreshed.\" +  new Date());\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        loadData();\r\n\r\n    },[setCOVID19Data,isDataLoaded]);\r\n    \r\n    return (   \r\n\r\n        <div className=\"dashboard\">\r\n            <div className=\"page-header\">\r\n                <div className=\"page-title\"><span>COVID-19 Data Charts</span> <span>For United States</span></div>\r\n                <div className=\"page-subtitle\">50 U.S. States, D.C. and Puerto Rico</div>\r\n                <ChartConfiguration />\r\n            </div>\r\n            { !isDataLoaded ? ( \r\n                <Spinner/>\r\n            ) : (\r\n                <div className=\"page-layout\">\r\n                    <DataTotals/>\r\n                    <CDCHistoryChart \r\n                        dataSet={getCDCHistoryDataBySelection(cdcHistoryByJurisdiction, selectedState, selectedYear)} \r\n                        selectedFieldGroup={CDC_DATA_CHART_FIELD_GROUPS.dailyTotals} \r\n                        stateChartTitle=\"New Cases & Deaths\" \r\n                        chartId=\"newCasesDeaths\"\r\n                        chartOptions = {getTimeSeriesChartOptions(false)}\r\n                        displaySummary={true}\r\n                        dataSource={getDataSourceForCasesDeathsData(selectedState)}/>\r\n\r\n                    <CDCHistoryChart \r\n                        dataSet={getCDCHistoryDataBySelection(cdcHospitalDataByJurisdiction, selectedState, selectedYear)} \r\n                        selectedFieldGroup={CDC_DATA_CHART_FIELD_GROUPS.hospitalData} \r\n                        stateChartTitle=\"New Hospital Inpatient & ICU\" \r\n                        chartId=\"hospitalData\"\r\n                        chartOptions = {getTimeSeriesChartOptions(false)}\r\n                        displaySummary={true} \r\n                        dataSource={getDataSourceForHospitalData(selectedState)} />                    \r\n\r\n                    <CDCHistoryChart \r\n                        dataSet={getCDCHistoryDataByAgeGroups(deathsByAgeGroups, selectedState, selectedYear)} \r\n                        selectedFieldGroup={AGE_GROUP_DATA_FIELDS} \r\n                        stateChartTitle=\"Deaths By Age Groups Monthly\" \r\n                        chartId=\"deathsByAgeGroupsOverTime\"\r\n                        chartOptions = {getTimeSeriesChartOptions(true)}\r\n                        footerComment=\"Note: CDC Data Updated Weekly\" \r\n                        dataSource={getDataSourceForAgeGroupData(selectedState)} />\r\n                    \r\n                    <AgeGroupSummary/>\r\n                    \r\n                </div>\r\n            )}\r\n            <div className=\"page-footer\">\r\n                Data Sources:<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://data.cdc.gov\")}>Center For Disease Control</span><br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://healthdata.gov/\")}>Healthdata.gov</span><br/>\r\n                ~ ~ ~<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://tanyamiranda.github.io/\")}>Contact Developer</span><br/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    isDataLoaded: state.chartConfig.isDataLoaded,\r\n    selectedState: state.chartConfig.selectedState, \r\n    selectedYear: state.chartConfig.selectedYear,\r\n    cdcHistoryByJurisdiction: state.chartConfig.cdcHistoryByJurisdiction,\r\n    cdcHospitalDataByJurisdiction: state.chartConfig.cdcHospitalDataByJurisdiction,\r\n    deathsByAgeGroups: state.chartConfig.deathsByAgeGroups\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCOVID19Data: (data) => dispatch(setCOVID19Data(data))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Covid19UsDashboard);","import React from 'react';\r\n\r\nimport Covid19UsDashboard from './components/dashboard/dashboard.component';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Covid19UsDashboard/>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ChartConfigTypes from './chart-config.types';\r\nimport {USA_IDENTIFIER, YEARS_DEFAULT} from '../../utilities/data-fields';\r\n\r\nconst INITIAL_STATE = {\r\n    dataRefreshTimestamp: null,\r\n    isDataLoaded: false,\r\n    selectedState: null,\r\n    selectedYear:null,   \r\n    selectedFields: []    \r\n};\r\n\r\nconst chartConfigReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ChartConfigTypes.SET_COVID19_DATA: \r\n            return {\r\n                selectedState: USA_IDENTIFIER,\r\n                selectedYear: YEARS_DEFAULT,\r\n                deathsByAgeGroups: action.payload.deathsByAgeGroups,\r\n                isDataLoaded: true,\r\n                cdcHistoryByJurisdiction: action.payload.cdcHistoryByJurisdiction,\r\n                cdcTotalsByJurisdiction: action.payload.cdcTotalsByJurisdiction,\r\n                cdcHospitalDataByJurisdiction : action.payload.cdcHospitalDataByJurisdiction\r\n            }\r\n            \r\n        case ChartConfigTypes.SET_STATE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedState: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_YEAR_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedYear: action.payload\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n        \r\n    }\r\n}\r\n\r\nexport default chartConfigReducer;","import {combineReducers} from 'redux';\r\n\r\nimport chartConfigReducer from './chart-config/chart-config.reducer';\r\n\r\nexport default combineReducers({\r\n    chartConfig: chartConfigReducer\r\n});\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewareObjects = [];\r\n\r\n//Only use logger in development environement\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewareObjects.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewareObjects));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}