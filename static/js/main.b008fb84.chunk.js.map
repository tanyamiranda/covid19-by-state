{"version":3,"sources":["serviceWorker.js","utilities/data-fields.js","utilities/formatting.js","utilities/data-processing.js","redux/chart-config/chart-config.types.js","components/config-section/config-section.component.jsx","components/chart-config/chart-config.component.jsx","redux/chart-config/chart-config.actions.js","utilities/chart-options.js","components/chart-display/chart-display.component.jsx","utilities/states-meta-data.js","components/cdc-history-chart/cdc-history-chart.component.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","components/data-totals/data-totals.component.jsx","components/demographics/deaths-by-age.component.jsx","components/demographics/demographics.component.jsx","components/dashboard/dashboard.component.jsx","App.js","redux/chart-config/chart-config.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DATE_RANGES","30","45","60","90","120","150","180","270","365","500","DATA_FIELD_COLORS","US_STATES_DATA","USA","AL","AK","AR","AZ","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IA","IN","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NC","ND","NE","NV","NH","NJ","NM","NY","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VA","WA","WI","WV","WY","DATA_FIELD_DISPLAY_NAMES","new_case","new_death","CDC_DATA_CHART_FIELD_GROUPS","dailyTotals","getDisplayNumber","num","Intl","NumberFormat","useGrouping","format","getFormattedDateForFiltering","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","getPercentage","partialNum","totalNum","percent","toFixed","getAgeGroupForState","deathsByAgeGroups","stateName","filter","data","toLowerCase","age_group","includes","sort","a","b","compareAgeGroupValues","numA","Number","substring","replace","numB","getFreshData","stateCountyInfo","cdcHistoryByJurisdiction","cdcTotalsByJurisdiction","fetchJsonData","dataHistoryByState","dataTotalsByState","dataHistoryUSA","getTotalsForUSA","dataTotalsUSA","concat","url","json","fetch","response","ok","Error","statusText","formatYAxisDisplay","labelText","label","getCDCDataSet","selectedDateRange","selectedState","now","yesterday","setDate","startDate","endDate","stateData","substr","totalCases","totalDeaths","forEach","total_cases","total_deaths","ChartConfigTypes","SET_STATE_SELECTION","SET_DATE_RANGE_SELECTION","SET_FIELD_SELECTION","SET_COVID19_DATA","SET_STATE_HISTORY_DATA","ConfigSection","fieldName","fieldDefaultValue","fieldClickEvent","fieldDataMap","keys","Object","className","name","defaultValue","onChange","map","item","key","value","connect","chartConfig","dispatch","setStateSelection","userSelectedState","type","payload","setDateRangeSelection","userSelectedDateRange","event","target","CHART_OPTIONS_FOR_STATE_HISTORY","responsive","aspectRatio","maintainAspectRatio","title","display","tooltips","mode","intersect","bodyAlign","callbacks","tooltipItem","datasets","datasetIndex","index","parseInt","toLocaleString","hover","legend","position","labels","boxWidth","fontSize","usePointStyle","padding","elements","point","radius","layout","left","right","top","bottom","scales","xAxes","ticks","min","callback","dataLabel","scaleLabel","yAxes","beginAtZero","CHART_OPTIONS_FOR_AGE_GROUPS","stacked","currentLineChart","ChartDisplay","chartType","chartOptions","chartLabels","chartDataSet","chartId","chartContainer","useRef","useState","chartInstance","setChartInstance","useEffect","current","options","destroy","Chart","id","ref","STATE_INFO","population","dataSet","selectedFieldGroup","stateChartTitle","fieldNames","fieldDatasets","push","fill","backgroundColor","borderColor","borderWidth","row","find","getChartDataset","dateList","datesList","self","indexOf","newDateList","dateString","String","getDateListFromCDCData","onClick","open","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","stateInformation","jurisdictionData","stateInfo","percentPositive","percentDeath","tempData","ageGroupSet1","result","reduce","age_group_sum","sum_covid_19_deaths","sum_total_deaths","combineAgeGroupValues","ageLabels","ageGroups","shortNames","group","groupName","formatAgeGroupNames","covid19Deaths","dataFetchedSuccessfully","Array","isArray","dataRefreshedTimestamp","setCOVID19Data","freshData","loadData","App","INITIAL_STATE","statesHistoryData","countryHistoryData","selectedFields","chartConfigReducer","action","combineReducers","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b008fb84.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const DATE_RANGES = {\r\n    30: \"Last 30 days\",\r\n    45: \"Last 45 days\",\r\n    60: \"Last 60 days\",\r\n    90: \"Last 3 months\",\r\n    120: \"Last 4 months\",\r\n    150: \"Last 5 months\",\r\n    180: \"Last 6 months\",\r\n    270: \"Last 9 months\",\r\n    365: \"Last 12 months\",\r\n    500: \"All Time\"\r\n}\r\n\r\nexport const DATE_RANGES_DEFAULT = \"60\";\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    'green',\r\n    'red',\r\n    'blue',\r\n    '#146AD4',\r\n    '#A9D422',\r\n    '#18F8BB',\r\n    '#AFC044',\r\n    '#3B9793',\r\n    '#822611',\r\n    '#FB2E76',\r\n    '#A5CA71',\r\n    '#983538',\r\n    '#082BD9',\r\n    '#2E136A',\r\n    '#05BB78',\r\n    '#44A4AD',\r\n    '#28FD7E',\r\n    '#387862'\r\n];\r\n\r\nexport const USA_IDENTIFIER = \"USA\";\r\n\r\nexport const US_STATES_DATA = {\r\n    USA:\"United States\",\r\n    AL:\"Alabama\",\r\n    AK:\"Alaska\",\r\n    AR:\"Arkansas\",\r\n    AZ:\"Arizona\",\r\n    CA:\"California\", \r\n    CO:\"Colorado\", \r\n    CT:\"Connecticut\", \r\n    DE:\"Delaware\",\r\n    DC:\"District Of Columbia\", \r\n    FL:\"Florida\", \r\n    GA:\"Georgia\",\r\n    HI:\"Hawaii\", \r\n    ID:\"Idaho\", \r\n    IL:\"Illinois\", \r\n    IA:\"Iowa\", \r\n    IN:\"Indiana\", \r\n    KS:\"Kansas\", \r\n    KY:\"Kentucky\", \r\n    LA:\"Louisiana\",\r\n    ME:\"Maine\",  \r\n    MD:\"Maryland\",\r\n    MA:\"Massachusetts\", \r\n    MI:\"Michigan\",\r\n    MN:\"Minnesota\",\r\n    MS:\"Mississippi\", \r\n    MO:\"Missouri\", \r\n    MT:\"Montana\", \r\n    NC:\"North Carolina\", \r\n    ND:\"North Dakota\", \r\n    NE:\"Nebraska\", \r\n    NV:\"Nevada\",\r\n    NH:\"New Hampshire\", \r\n    NJ:\"New Jersey\", \r\n    NM:\"New Mexico\",  \r\n    NY:\"New York\", \r\n    OH:\"Ohio\", \r\n    OK:\"Oklahoma\", \r\n    OR:\"Oregon\", \r\n    PA:\"Pennsylvania\", \r\n    PR:\"Puerto Rico\", \r\n    RI:\"Rhode Island\",\r\n    SC:\"South Carolina\", \r\n    SD:\"South Dakota\", \r\n    TN:\"Tennessee\", \r\n    TX:\"Texas\", \r\n    UT:\"Utah\", \r\n    VT:\"Vermont\", \r\n    VA:\"Virginia\",\r\n    WA:\"Washington\", \r\n    WI:\"Wisconsin\", \r\n    WV:\"West Virginia\", \r\n    WY:\"Wyoming\"\r\n}\r\n\r\nexport const DATA_FIELD_DISPLAY_NAMES = {   \r\n    new_case: \"New Cases\",\r\n    new_death: \"New Deaths\",\r\n};\r\n\r\n\r\nexport const COUNTY_SORT_FIELDS = {\r\n    SORT_BY_DEATHS : \"deaths\",\r\n    SORT_BY_CASES : \"cases\",\r\n    SORT_BY_COUNTY : \"county\"\r\n};\r\n\r\n\r\nexport const CDC_DATA_FIELDS_DAILY = [\r\n    \"new_case\",\r\n    \"new_death\",\r\n];\r\n\r\nexport const CDC_DATA_FIELDS_TOTALS = [\r\n    \"max_tot_cases\",\r\n    \"max_tot_death\",\r\n];\r\n\r\nexport const CDC_DATA_CHART_FIELD_GROUPS = {\r\n    dailyTotals: [\r\n        \"new_case\",\r\n        \"new_death\"\r\n    ]\r\n}","export const getDisplayNumber = (num) => {\r\n    if (!num)\r\n        num = 0;\r\n    return Intl.NumberFormat('en-US', {useGrouping: true}).format(num);\r\n}\r\n\r\nexport const getFormattedDateForFiltering = (date) => {\r\n    var d = new Date(date);\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n    return year + month + day;\r\n}\r\n\r\nexport const getDateDisplayString = (date) => {\r\n    var d = new Date(date);\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    return month + \"/\" + day + \"/\" + year;\r\n}\r\n\r\nexport const getPercentage = (partialNum, totalNum) => {\r\n    var percent = ((partialNum / totalNum) * 100).toFixed(2);\r\n    if (percent === \"0.00\")\r\n        percent = \"< 0.01\"\r\n    return percent + \"%\";\r\n}","import {DATA_FIELD_COLORS, DATA_FIELD_DISPLAY_NAMES} from './data-fields';\r\nimport {getFormattedDateForFiltering} from './formatting';\r\n\r\nconst URL_DEATHS_BY_AGE_DATA = \"https://data.cdc.gov/resource/9bhg-hcku.json?$select=state,age_group,sum(covid_19_deaths),sum(total_deaths) where sex ='All Sexes' and `group`='By Total' and age_group in ('0-17 years', '18-29 years', '30-39 years','40-49 years','50-64 years','65-74 years','75-84 years','85 years and over') group by state,age_group&$order=state, age_group\";\r\nconst URL_COUNTY_LEVEL_DATA = \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/live/us-counties.csv\"\r\n\r\n\r\n/* New Data Sets from CDC */\r\nconst CDC_TOKEN = \"&$limit=50000&$$app_token=fz22RHPlELrzEw1j9vq91YH6N\";\r\nconst URL_CDC_CASES_DEATHS_BY_STATE_TOTAL = \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=state,max(tot_cases) as total_cases,max(tot_death) as total_deaths&$group=state&$order=state\" + CDC_TOKEN;\r\nconst URL_CDC_CASES_DEATHS_BY_STATE_HISTORY= \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=submission_date as date,state,new_case,new_death&$order=submission_date,state\" + CDC_TOKEN;\r\nconst URL_CDC_CASES_DEATHS_USA_HISTORY = \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=submission_date%20as%20date,%27USA%27%20as%20state,sum(new_case)%20as%20new_case,sum(new_death)%20as%20new_death&$group=submission_date&$order=submission_date\" + CDC_TOKEN;\r\n\r\n/*\r\nAs of March 2020, The Covid Tracking project ended its funding, so all datapoints have to\r\nnow be sourced directly from CDC. The link below has all related data links:\r\nhttps://covidtracking.com/about-data/data-summary\r\n\r\nconst URL_STATE_META_DATA = \"https://api.covidtracking.com/v1/states/info.json\";\r\nconst URL_STATE_TOTALS_DATA = \"https://api.covidtracking.com/v1/states/current.json\";\r\nconst URL_STATES_HISTORY_DATA = \"https://api.covidtracking.com/v1/states/daily.json\";\r\nconst URL_COUNTRY_TOTALS_DATA = \"https://api.covidtracking.com/v1/us/current.json\";\r\nconst URL_COUNTRY_HISTORY_DATA = \"https://api.covidtracking.com/v1/us/daily.json\";\r\n\r\n*/\r\n\r\nexport const getDateListFromData = (stateData) => {\r\n\r\n    const datesList = stateData.map(item => item.date)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var month = Number(dateString.substring(4,6));\r\n        var day = Number(dateString.substring(6,8));\r\n\r\n        newDateList.push(month + \"/\" + day);\r\n    });\r\n\r\n    return newDateList;\r\n}\r\n\r\nexport const getAgeGroupForState = (deathsByAgeGroups, stateName) => {\r\n    \r\n    return deathsByAgeGroups\r\n        .filter(data => data.state.toLowerCase() === stateName.toLowerCase() && data.age_group.includes('year'))\r\n        .sort((a,b) => compareAgeGroupValues(a.age_group,b.age_group));\r\n    \r\n}    \r\n\r\nexport const formatAgeGroupNames = (ageGroups) => {\r\n    \r\n    const shortNames = [];\r\n\r\n    ageGroups.forEach(group => {\r\n        const groupName = group.replace(\"years and over\",\"+\").replace(\"years\",\"\").replace(\"year\",\"\").replace(\"Under\",\"<\"); \r\n        shortNames.push(groupName);\r\n    });\r\n\r\n    return shortNames;\r\n}\r\n\r\nconst compareAgeGroupValues = (a, b) => {\r\n\r\n    let numA = Number(a.substring(0,2).replace(\"-\",\"\").toLowerCase().replace(\"un\",\"0\"));\r\n    let numB = Number(b.substring(0,2).replace(\"-\",\"\").toLowerCase().replace(\"un\",\"0\"));\r\n\r\n    if (numA > numB) return 1;\r\n    if (numA < numB) return -1;\r\n\r\n    return 0;\r\n}\r\n\r\nexport const getChartDataset = (data, fieldNames) => {\r\n\r\n    const fieldDatasets = [];\r\n\r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        fieldDatasets.push({\r\n            fieldName: fieldName, \r\n            label: DATA_FIELD_DISPLAY_NAMES[fieldName],\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            borderWidth: 1.5,\r\n            data: []\r\n        })\r\n    })\r\n\r\n    data.forEach(row => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = fieldDatasets.find((data => data.fieldName === fieldName))    \r\n            fieldData.data.push(!row[fieldName] || row[fieldName] < 0 ? 0 : row[fieldName]);\r\n        })\r\n    });\r\n\r\n    return fieldDatasets;\r\n}\r\n\r\nexport const getAgeGroupChartDataset = (covidDeaths, allDeaths) => {\r\n\r\n    const ageGroupDataSet = [\r\n        {    \r\n            label: \"Covid-19\",\r\n            backgroundColor: \"red\",\r\n            data:covidDeaths \r\n        },\r\n        { \r\n            label: \"All Deaths\",\r\n            backgroundColor: \"blue\",\r\n            data:allDeaths\r\n        }\r\n    ];\r\n\r\n    return ageGroupDataSet;\r\n}\r\n\r\nexport const getFreshData = async() => {\r\n    \r\n    let stateCountyInfo = [];\r\n    let deathsByAgeGroups = []\r\n    let cdcHistoryByJurisdiction = [];\r\n    let cdcTotalsByJurisdiction = [];\r\n\r\n    try {\r\n\r\n        let dataHistoryByState = await fetchJsonData(URL_CDC_CASES_DEATHS_BY_STATE_HISTORY);\r\n        let dataTotalsByState = await fetchJsonData(URL_CDC_CASES_DEATHS_BY_STATE_TOTAL);\r\n        let dataHistoryUSA = await fetchJsonData(URL_CDC_CASES_DEATHS_USA_HISTORY);\r\n        let dataTotalsUSA = await getTotalsForUSA(dataTotalsByState);\r\n\r\n        cdcHistoryByJurisdiction = dataHistoryByState.concat(dataHistoryUSA);\r\n        cdcTotalsByJurisdiction = dataTotalsByState.concat(dataTotalsUSA);\r\n        deathsByAgeGroups = await fetchJsonData(URL_DEATHS_BY_AGE_DATA);\r\n\r\n        return {\r\n            stateCountyInfo: stateCountyInfo,\r\n            deathsByAgeGroups: deathsByAgeGroups,\r\n            cdcTotalsByJurisdiction: cdcTotalsByJurisdiction,\r\n            cdcHistoryByJurisdiction: cdcHistoryByJurisdiction\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchJsonData = async(url) => {\r\n    try{\r\n\r\n        let json = null;\r\n\r\n        // U.S. States Historical Data\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n            json = await response.json();\r\n        }\r\n        else {\r\n            throw Error(response.statusText);\r\n        }\r\n        \r\n        return json;\r\n    }\r\n    catch (error) {\r\n        console.log(\"fetchJsonData() error!\", error);\r\n    }\r\n}\r\n\r\nexport const fetchCountyData = async() => {\r\n\r\n    try {\r\n        const url = URL_COUNTY_LEVEL_DATA;\r\n        \r\n        let stateCountyData = [];\r\n\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n            const csvText = await response.text();\r\n            stateCountyData = parseCountyCSVData(csvText);\r\n            stateCountyData.filter(data => data.deaths > 0 || data.cases > 0);\r\n        }\r\n        else {\r\n            throw Error(response.statusText);\r\n        }\r\n\r\n        return stateCountyData;\r\n    }\r\n    catch (error) {\r\n        \r\n    }\r\n}\r\n\r\n//Parsing County Data specific to dataset specs\r\nfunction parseCountyCSVData(csv){\r\n\r\n    var lines=csv.split(\"\\n\");\r\n\r\n    var result = [];\r\n\r\n    for(var i=1;i<lines.length;i++){\r\n\r\n        const currentline=lines[i].split(\",\");\r\n        const county = {};\r\n        county.county = currentline[1];\r\n        county.stateName = currentline[2];\r\n        county.cases = currentline[4]\r\n        county.deaths = currentline[5];\r\n        result.push(county);\r\n    }\r\n\r\n    return result; \r\n}\r\n\r\nexport const formatYAxisDisplay = (labelText) => {\r\n\r\n    const label = Number(labelText);\r\n\r\n    if (label >= 1000000) {\r\n        return label / 1000000 + 'M';\r\n    }\r\n    else if (label >= 10000) {\r\n        return label / 1000 + 'K';\r\n    }\r\n    else {\r\n        return label;\r\n    }\r\n}\r\n\r\n\r\nexport const combineAgeGroupValues = (ageGroupSet1) => {\r\n\r\n    var result = [];\r\n    ageGroupSet1.reduce(\r\n        function(age_group_sum, value) {\r\n            if (!age_group_sum[value.age_group]) {\r\n                age_group_sum[value.age_group] = {\r\n                    age_group: value.age_group,\r\n                    sum_covid_19_deaths: !Number(value.sum_covid_19_deaths) ? 0 : Number(value.sum_covid_19_deaths),\r\n                    sum_total_deaths: !Number(value.sum_total_deaths) ? 0 : Number(value.sum_total_deaths)\r\n                };\r\n                result.push(age_group_sum[value.age_group])\r\n            }\r\n            else {\r\n                age_group_sum[value.age_group].sum_covid_19_deaths += !Number(value.sum_covid_19_deaths) ? 0 : Number(value.sum_covid_19_deaths);\r\n                age_group_sum[value.age_group].sum_total_deaths += !Number(value.sum_total_deaths) ? 0 : Number(value.sum_total_deaths);\r\n            }\r\n            return age_group_sum;\r\n        }\r\n    , {});\r\n\r\n    return result;\r\n\r\n}\r\n\r\nexport const getCDCDataSet = (selectedDateRange, cdcHistoryByJurisdiction, selectedState) =>{\r\n    const now = new Date();\r\n    const yesterday = new Date();\r\n    now.setDate(now.getDate() - Number(selectedDateRange));\r\n    const startDate = getFormattedDateForFiltering(now);\r\n    const endDate = getFormattedDateForFiltering(yesterday);\r\n\r\n    let dataSet = cdcHistoryByJurisdiction\r\n        .filter(stateData => stateData.state === selectedState && stateData.date.substr(0,10).replace('-','') >= startDate && stateData.date.substr(0,10).replace('-','') <= endDate)\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n\r\n    return dataSet;\r\n}\r\n\r\nexport const getDateListFromCDCData = (dataSet) => {\r\n\r\n    const datesList = dataSet.map(item => item.date)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var month = Number(dateString.substring(5,7));\r\n        var day = Number(dateString.substring(8,10));\r\n\r\n        newDateList.push(month + \"/\" + day);\r\n    });\r\n\r\n    return newDateList;\r\n}\r\n\r\nexport const getTotalsForUSA = (cdcTotalsByJurisdiction) => {\r\n\r\n    let totalCases = 0;\r\n    let totalDeaths = 0;\r\n\r\n    cdcTotalsByJurisdiction.forEach(data => {\r\n        totalCases += Number(data.total_cases);\r\n        totalDeaths += Number(data.total_deaths);\r\n    })\r\n\r\n    return {\"state\":\"USA\", \"total_cases\": \"\" + totalCases, \"total_deaths\": \"\" + totalDeaths}\r\n\r\n}","const ChartConfigTypes = {\r\n    SET_STATE_SELECTION : \"SET_STATE_SELECTION\",\r\n    SET_DATE_RANGE_SELECTION : \"SET_DATE_RANGE_SELECTION\",\r\n    SET_FIELD_SELECTION : \"SET_FIELD_SELECTION\",\r\n\r\n    SET_COVID19_DATA : \"SET_COVID19_DATA\",\r\n    SET_STATE_HISTORY_DATA: \"SET_STATE_HISTORY_DATA\" \r\n\r\n};\r\n\r\nexport default ChartConfigTypes;","import React from 'react';\r\n\r\nimport './config-section.css';\r\n\r\nconst ConfigSection = ({fieldName, fieldDefaultValue, fieldClickEvent, fieldDataMap}) => {\r\n\r\n    const keys = Object.keys(fieldDataMap);\r\n\r\n    return (\r\n        <span className=\"config-section\">\r\n            <select name={fieldName} defaultValue={fieldDefaultValue}  onChange={fieldClickEvent}>\r\n                {keys.map ((item) => \r\n                    <option key={item} value={item} >{fieldDataMap[item]}</option>\r\n                )}\r\n            </select>\r\n        </span>\r\n    )\r\n\r\n}\r\n\r\nexport default ConfigSection;","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './chart-config.css';\r\nimport ConfigSection from '../config-section/config-section.component';\r\nimport {DATE_RANGES,US_STATES_DATA,DATE_RANGES_DEFAULT} from '../../utilities/data-fields';\r\nimport {setDateRangeSelection, setStateSelection} from '../../redux/chart-config/chart-config.actions';\r\n\r\nconst ChartConfiguration = ({selectedState, selectedDateRange, setStateSelection, setDateRangeSelection}) => {\r\n\r\n    //console.log(\"ChartConfiguration()...\");\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n\r\n\r\n    const handleStateSelection = (event) => {\r\n        setStateSelection(event.target.value);\r\n    }\r\n    const handleDateRangeSelection = (event) => {\r\n        setDateRangeSelection(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-configuration\">\r\n            <div className=\"top-section\">\r\n                <ConfigSection \r\n                    fieldName=\"stateSelection\"\r\n                    fieldDefaultValue = {selectedState}\r\n                    fieldClickEvent= {handleStateSelection}\r\n                    fieldDataMap={US_STATES_DATA}\r\n                />\r\n                <ConfigSection \r\n                    fieldName=\"dateRangeSelection\"\r\n                    fieldDefaultValue = {!selectedDateRange ? DATE_RANGES_DEFAULT : selectedDateRange}\r\n                    fieldClickEvent= {handleDateRangeSelection}\r\n                    fieldDataMap={DATE_RANGES}\r\n                />\r\n                \r\n            </div>            \r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setStateSelection: (userSelectedState) => dispatch(setStateSelection(userSelectedState)),\r\n    setDateRangeSelection: (userSelectedDateRange) => dispatch(setDateRangeSelection(userSelectedDateRange))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChartConfiguration);","import ChartConfigTypes from './chart-config.types';\r\n\r\nexport const setStateSelection = (stateSelection) => ({\r\n    type : ChartConfigTypes.SET_STATE_SELECTION,\r\n    payload: stateSelection\r\n});\r\n\r\nexport const setDateRangeSelection = (dateRangeSelection) => ({\r\n    type : ChartConfigTypes.SET_DATE_RANGE_SELECTION,\r\n    payload: dateRangeSelection\r\n});\r\n\r\nexport const setCOVID19Data = (data) => ({\r\n    type : ChartConfigTypes.SET_COVID19_DATA,\r\n    payload: data\r\n});\r\n\r\n\r\n\r\n","import {formatYAxisDisplay} from './data-processing';\r\n\r\nexport const CHART_OPTIONS_FOR_STATE_HISTORY = {\r\n    responsive: true,\r\n    aspectRatio: 1,\r\n    maintainAspectRatio: false,\r\n    title: { display: false},\r\n    tooltips: {\r\n            mode: 'index', \r\n            intersect: false,\r\n            bodyAlign: 'left',\r\n            callbacks: {\r\n                label: function(tooltipItem, data) {\r\n                  var type = data.datasets[tooltipItem.datasetIndex].label;\r\n                  var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n                  return type + \" : \" + parseInt(value).toLocaleString();\r\n                }\r\n            }\r\n            \r\n        },\r\n    hover: {mode: 'nearest', intersect: true},\r\n    legend: {position:'top', labels: {boxWidth:5, fontSize:14, usePointStyle:true, padding:15}},\r\n    elements: {\r\n        point:{\r\n            radius: 0\r\n        }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0\r\n        }},\r\n    scales: {\r\n        xAxes: [{\r\n            display: true,\r\n            ticks: {\r\n                min: 0,\r\n                callback: function(dataLabel, index) {\r\n                    // Hide the label of every 2nd dataset. return null to hide the grid line too\r\n                    return index % 3 === 0 ? dataLabel : '';\r\n                }\r\n            },\r\n            scaleLabel: {\r\n                display: true\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            display: true,\r\n            padding:0,\r\n            scaleLabel: {\r\n                display: false\r\n            },\r\n            ticks: {\r\n                min: 0,\r\n                beginAtZero:true,\r\n                callback: function(label) {\r\n                    return formatYAxisDisplay(label);\r\n                }                \r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nexport const CHART_OPTIONS_FOR_AGE_GROUPS = {\r\n    aspectRatio: 1,\r\n    maintainAspectRatio: false,\r\n    responsive: true,\r\n    title: { display: false},\r\n    tooltips: {\r\n        mode: 'index', \r\n        intersect: false,\r\n        bodyAlign: 'left',\r\n        callbacks: {\r\n            label: function(tooltipItem, data) {\r\n              var type = data.datasets[tooltipItem.datasetIndex].label;\r\n              var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n              return type + \" : \" + parseInt(value).toLocaleString();\r\n            }\r\n          }\r\n    },\r\n    hover: {mode: 'nearest', intersect: true},\r\n    legend: {position:'top', labels: {boxWidth:5, fontSize:14, usePointStyle:true, padding: 10}},\r\n    elements: {\r\n        point:{\r\n            radius: 0\r\n        }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0\r\n        }},\r\n    scales: {\r\n        xAxes:[{\r\n            stacked: true,\r\n            ticks: {\r\n                beginAtZero: true,\r\n            }\r\n        }],\r\n        yAxes:[{\r\n            // stacked:false - places bars in FRONT of each other instead of on TOP of each other\r\n            // if set to true, the two bars are combined into one bar with a aggregate total.\r\n            stacked: false, \r\n            ticks: {\r\n                beginAtZero: true,\r\n                callback: function(label) {\r\n                    return formatYAxisDisplay(label);\r\n                }\r\n              }\r\n            }\r\n        ]\r\n    }\r\n}\r\n","\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nimport './chart-display.css';\r\n\r\n// Necessary to be able to clear previous charts\r\nlet currentLineChart = [];\r\n\r\nconst ChartDisplay = ({chartType, chartOptions, chartLabels, chartDataSet, chartId}) => {\r\n    const chartContainer = useRef(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if (chartContainer && chartContainer.current) {\r\n\r\n            //console.log(\"loading chart...\");\r\n\r\n            const chartConfig = {\r\n                type: chartType,\r\n                options: chartOptions,\r\n                data: {\r\n                    labels: chartLabels,\r\n                    datasets: chartDataSet\r\n                }            \r\n            }\r\n\r\n            // Destroy previous chart if it exists \r\n            if (typeof currentLineChart[chartId] !== \"undefined\") currentLineChart[chartId].destroy();\r\n\r\n            currentLineChart[chartId] = new Chart(chartContainer.current, chartConfig);\r\n            setChartInstance(currentLineChart);\r\n            \r\n        }\r\n    }, [chartContainer, chartType, chartOptions, chartLabels, chartDataSet, chartId]);\r\n    \r\n    return (\r\n        <div className=\"chart-display\">\r\n            <canvas id={!chartInstance ? \"0\" : chartId } ref={chartContainer} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDisplay;\r\n","/* \r\nPopulation data taken from US Census estimates for July 2020. \r\nhttps://www2.census.gov/programs-surveys/decennial/2020/data/apportionment/population-change-data-table.pdf\r\n\r\n*/\r\nexport const STATE_INFO= [];\r\nSTATE_INFO[\"AK\"]={name:\"Alaska\", population:733391}\r\nSTATE_INFO[\"AL\"]={name:\"Alabama\", population:5024279}\r\nSTATE_INFO[\"AR\"]={name:\"Arkansas\", population:3011524}\r\nSTATE_INFO[\"AZ\"]={name:\"Arizona\", population:7151502}\r\nSTATE_INFO[\"CA\"]={name:\"California\", population:39538223}\r\nSTATE_INFO[\"CO\"]={name:\"Colorado\", population:5773714}\r\nSTATE_INFO[\"CT\"]={name:\"Connecticut\", population:3605944}\r\nSTATE_INFO[\"DC\"]={name:\"District of Columbia\", population:689545}\r\nSTATE_INFO[\"DE\"]={name:\"Delaware\", population:989948}\r\nSTATE_INFO[\"FL\"]={name:\"Florida\", population:21538187}\r\nSTATE_INFO[\"GA\"]={name:\"Georgia\", population:10711908}\r\nSTATE_INFO[\"HI\"]={name:\"Hawaii\", population:1455271}\r\nSTATE_INFO[\"IA\"]={name:\"Iowa\", population:3190369}\r\nSTATE_INFO[\"ID\"]={name:\"Idaho\", population:1839106}\r\nSTATE_INFO[\"IL\"]={name:\"Illinois\", population:12812508}\r\nSTATE_INFO[\"IN\"]={name:\"Indiana\", population:6785528}\r\nSTATE_INFO[\"KS\"]={name:\"Kansas\", population:2937880}\r\nSTATE_INFO[\"KY\"]={name:\"Kentucky\", population:4505836}\r\nSTATE_INFO[\"LA\"]={name:\"Louisiana\", population:4657757}\r\nSTATE_INFO[\"MA\"]={name:\"Massachusetts\", population:7029917}\r\nSTATE_INFO[\"MD\"]={name:\"Maryland\", population:6177224}\r\nSTATE_INFO[\"ME\"]={name:\"Maine\", population:1362359}\r\nSTATE_INFO[\"MI\"]={name:\"Michigan\", population:10077331}\r\nSTATE_INFO[\"MN\"]={name:\"Minnesota\", population:5706494}\r\nSTATE_INFO[\"MO\"]={name:\"Missouri\", population:6154913}\r\nSTATE_INFO[\"MS\"]={name:\"Mississippi\", population:2961279}\r\nSTATE_INFO[\"MT\"]={name:\"Montana\", population:1084225}\r\nSTATE_INFO[\"NC\"]={name:\"North Carolina\", population:10439388}\r\nSTATE_INFO[\"ND\"]={name:\"North Dakota\", population:779094}\r\nSTATE_INFO[\"NE\"]={name:\"Nebraska\", population:1961504}\r\nSTATE_INFO[\"NH\"]={name:\"New Hampshire\", population:1377529}\r\nSTATE_INFO[\"NJ\"]={name:\"New Jersey\", population:9288994}\r\nSTATE_INFO[\"NM\"]={name:\"New Mexico\", population:2117522}\r\nSTATE_INFO[\"NV\"]={name:\"Nevada\", population:3104614}\r\nSTATE_INFO[\"NY\"]={name:\"New York\", population:20201249}\r\nSTATE_INFO[\"OH\"]={name:\"Ohio\", population:11799448}\r\nSTATE_INFO[\"OK\"]={name:\"Oklahoma\", population:3959353}\r\nSTATE_INFO[\"OR\"]={name:\"Oregon\", population:4237256}\r\nSTATE_INFO[\"PA\"]={name:\"Pennsylvania\", population:13002700}\r\nSTATE_INFO[\"PR\"]={name:\"Puerto Rico\", population:3285874}\r\nSTATE_INFO[\"RI\"]={name:\"Rhode Island\", population:1097379}\r\nSTATE_INFO[\"SC\"]={name:\"South Carolina\", population:5118425}\r\nSTATE_INFO[\"SD\"]={name:\"South Dakota\", population:886667}\r\nSTATE_INFO[\"TN\"]={name:\"Tennessee\", population:6910840}\r\nSTATE_INFO[\"TX\"]={name:\"Texas\", population:29145505}\r\nSTATE_INFO[\"UT\"]={name:\"Utah\", population:3271616}\r\nSTATE_INFO[\"VA\"]={name:\"Virginia\", population:8631393}\r\nSTATE_INFO[\"VT\"]={name:\"Vermont\", population:643077}\r\nSTATE_INFO[\"WA\"]={name:\"Washington\", population:7705281}\r\nSTATE_INFO[\"WI\"]={name:\"Wisconsin\", population:5893718}\r\nSTATE_INFO[\"WV\"]={name:\"West Virginia\", population:1793716}\r\nSTATE_INFO[\"WY\"]={name:\"Wyoming\", population:576851}\r\nSTATE_INFO[\"USA\"]={name:\"United States\", population:331449281}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './cdc-history-chart.css';\r\n\r\nimport {DATE_RANGES} from '../../utilities/data-fields';\r\nimport {CHART_OPTIONS_FOR_STATE_HISTORY} from '../../utilities/chart-options';\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nimport {\r\n    getChartDataset, \r\n    getDateListFromCDCData,\r\n} from '../../utilities/data-processing';\r\n\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\n\r\nconst CDCHistoryChart = ({dataSet, selectedState, selectedDateRange, selectedFieldGroup, stateChartTitle, chartId}) => {  \r\n    \r\n    const chartDataSet = getChartDataset(dataSet, selectedFieldGroup);\r\n    const dateList = getDateListFromCDCData(dataSet);\r\n\r\n    return (\r\n        <div className=\"dashboard-component state-history-chart\">\r\n            <div className=\"dashboard-component-title chart-header\">\r\n                <span>{stateChartTitle}</span> <span>for {STATE_INFO[selectedState].name}</span> <span>{DATE_RANGES[selectedDateRange]}</span>\r\n            </div>\r\n            <ChartDisplay \r\n            chartType=\"line\"\r\n            chartOptions = {CHART_OPTIONS_FOR_STATE_HISTORY}\r\n            chartLabels = {dateList} \r\n            chartDataSet = {chartDataSet}\r\n            chartId = {chartId}\r\n            />\r\n\r\n            <div className=\"data-sources\">Data:&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36\")}>Center For Disease Control</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CDCHistoryChart);","import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport {SpinnerContainer, SpinnerOverlay} from './spinner.styles.jsx';\r\n\r\nconst Spinner = () => (\r\n    <SpinnerOverlay>\r\n        <SpinnerContainer/>\r\n    </SpinnerOverlay>\r\n);\r\n\r\nexport default Spinner;\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './data-totals.css';\r\n\r\nimport {getDisplayNumber, getPercentage} from '../../utilities/formatting'\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\n\r\nconst DataTotals = ({selectedState, cdcTotalsByJurisdiction}) => {\r\n\r\n    let jurisdictionData = cdcTotalsByJurisdiction.find(data => data.state===selectedState);\r\n    let stateInfo = STATE_INFO[selectedState];\r\n        \r\n    const percentPositive =  getPercentage(jurisdictionData.total_cases,stateInfo.population);\r\n    const percentDeath =  getPercentage(jurisdictionData.total_deaths,stateInfo.population);\r\n    \r\n    return (\r\n        <div className=\"dashboard-component overview\">\r\n            <div className=\"dashboard-component-title\">{stateInfo.name} Overview</div>\r\n            <div className=\"overview-data\">\r\n                <div className=\"overview-data-row\">\r\n                    <div className=\"data-label\">Total Population</div>\r\n                    <div className=\"data-number\">{getDisplayNumber(stateInfo.population)}</div>\r\n                </div>\r\n                <div className=\"overview-data-row\">\r\n                    <div className=\"data-label\">Total Cases</div>\r\n                    <div className=\"data-number\">{getDisplayNumber(jurisdictionData.total_cases)}<span className=\"percent\">({percentPositive})</span></div>\r\n                    \r\n                </div>\r\n                <div className=\"overview-data-row\">\r\n                    <div className=\"data-label\">Total Deaths</div>\r\n                    <div className=\"data-number\">{getDisplayNumber(jurisdictionData.total_deaths)}<span className=\"percent\">({percentDeath})</span></div>\r\n\r\n                </div>\r\n                \r\n            </div>            \r\n            <div className=\"data-sources\">Data:&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36\")}>Center For Disease Control</span>,&nbsp; \r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://www.census.gov/programs-surveys/popest.html\")}>U.S. Census Bureau</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    cdcTotalsByJurisdiction: state.chartConfig.cdcTotalsByJurisdiction\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataTotals);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './demographics.css';\r\n\r\nimport {getAgeGroupForState, getAgeGroupChartDataset, formatAgeGroupNames, combineAgeGroupValues} from '../../utilities/data-processing';\r\nimport {CHART_OPTIONS_FOR_AGE_GROUPS} from '../../utilities/chart-options';\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nconst DeathsByAge = ({selectedState, stateInformation, deathsByAgeGroups}) => {\r\n\r\n    let dataSet = getAgeGroupForState(deathsByAgeGroups, STATE_INFO[selectedState].name);\r\n\r\n    /** CDC collects NYC separately from NY State. We are grouping them back into one number under NY state. **/\r\n    if(selectedState === \"NY\") {\r\n        const tempData = dataSet.concat(getAgeGroupForState(deathsByAgeGroups,\"New York City\"));\r\n        dataSet = combineAgeGroupValues(tempData);   \r\n    }\r\n    \r\n    const ageLabels = formatAgeGroupNames(dataSet.map(item => item.age_group));\r\n    const covid19Deaths = dataSet.map(item => item.sum_covid_19_deaths == null ? 0 : item.sum_covid_19_deaths);\r\n    const totalDeaths = dataSet.map(item => item.sum_total_deaths == null ? 0 : item.sum_total_deaths);\r\n    const chartDataSet = getAgeGroupChartDataset(covid19Deaths, totalDeaths);\r\n\r\n    return(\r\n        <div className=\"demographics\">\r\n            <div>\r\n                <ChartDisplay \r\n                chartType=\"bar\"\r\n                chartOptions = {CHART_OPTIONS_FOR_AGE_GROUPS}\r\n                chartDataSet = {chartDataSet}\r\n                chartLabels = {ageLabels}\r\n                chartId = \"DeathsByAgeGroup\"\r\n                />\r\n            </div>    \r\n        </div>\r\n\r\n    )\r\n\r\n}\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    deathsByAgeGroups: state.chartConfig.deathsByAgeGroups\r\n});\r\n\r\nexport default connect(mapStateToProps)(DeathsByAge);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './demographics.css';\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\nimport DeathByAgeGroup from './deaths-by-age.component' ;\r\n\r\nconst Demographics = ({selectedState, deathsByAgeGroups}) => {\r\n\r\n    const dataFetchedSuccessfully = Array.isArray(deathsByAgeGroups) && deathsByAgeGroups.length > 0;\r\n\r\n    return(\r\n        <div className=\"dashboard-component demographics\">\r\n            <div className=\"dashboard-component-title\">All Deaths By Age Group <span>for {STATE_INFO[selectedState].name}</span> <span>Since January 2020</span></div> \r\n            <div>\r\n                {dataFetchedSuccessfully ? \r\n                    <DeathByAgeGroup />\r\n                : \r\n                    <div>Problem fetching data from CDC site...</div>\r\n                }\r\n            </div>    \r\n            <div className=\"data-sources\">\r\n                Data:&nbsp; <span className=\"site-link\" onClick={()=> window.open(\"https://data.cdc.gov/NCHS/Provisional-COVID-19-Death-Counts-by-Sex-Age-and-S/9bhg-hcku\")}>Center For Disease Control</span><br/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    deathsByAgeGroups: state.chartConfig.deathsByAgeGroups\r\n});\r\n\r\nexport default connect(mapStateToProps)(Demographics);","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport \"./dashboard.css\";\r\n\r\nimport {getFreshData,getCDCDataSet} from '../../utilities/data-processing';\r\nimport {setCOVID19Data} from '../../redux/chart-config/chart-config.actions';\r\nimport ChartConfiguration from '../chart-config/chart-config.component';\r\nimport CDCHistoryChart from '../cdc-history-chart/cdc-history-chart.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport DataTotals from '../data-totals/data-totals.component';\r\nimport {CDC_DATA_CHART_FIELD_GROUPS} from '../../utilities/data-fields';\r\nimport Demographics from '../demographics/demographics.component';\r\n\r\nconst Covid19UsDashboard =({setCOVID19Data, dataRefreshedTimestamp, selectedState, selectedDateRange, cdcHistoryByJurisdiction}) => {  \r\n\r\n    useEffect(() => {\r\n\r\n        //console.log(\"useEffect()...\");\r\n        async function loadData() {\r\n            try {   \r\n                if (!dataRefreshedTimestamp) {\r\n                    //console.log(\"retrievingData()...\");\r\n                    const freshData = await getFreshData();\r\n                    setCOVID19Data(freshData);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        loadData();\r\n\r\n    },[setCOVID19Data,dataRefreshedTimestamp]);\r\n    \r\n    //console.log(\"dataRefreshedTimestamp=\",dataRefreshedTimestamp);\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    return (   \r\n\r\n        <div className=\"dashboard\">\r\n            <div className=\"page-header\">\r\n                <div className=\"page-title\"><span>COVID-19 Data Charts</span> <span>For United States</span></div>\r\n                <ChartConfiguration />\r\n            </div>\r\n            { !dataRefreshedTimestamp ? ( \r\n                <Spinner />\r\n            ) : (\r\n                <div className=\"page-layout\">\r\n                    <DataTotals/>                                               \r\n                    <CDCHistoryChart \r\n                        dataSet={getCDCDataSet(selectedDateRange, cdcHistoryByJurisdiction, selectedState)} \r\n                        selectedFieldGroup={CDC_DATA_CHART_FIELD_GROUPS.dailyTotals} \r\n                        stateChartTitle=\"New Cases & Deaths\" \r\n                        chartId=\"newCasesDeaths\"/>\r\n\r\n                    <Demographics/>\r\n                </div>\r\n            )}\r\n            <div className=\"page-footer\">\r\n                Data Sources:<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://www.census.gov/programs-surveys/popest.html\")}>U.S. Census Bureau</span><br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://data.cdc.gov\")}>Center For Disease Control</span><br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://github.com/nytimes/covid-19-data/blob/master/live/us-counties.csv\")}>N.Y. Times</span><br/>\r\n                ~ ~ ~<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://tanyamiranda.github.io/\")}>Contact Developer</span><br/>\r\n            </div>\r\n        </div>\r\n    \r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    dataRefreshedTimestamp: state.chartConfig.dataRefreshedTimestamp,\r\n    selectedState: state.chartConfig.selectedState, \r\n    selectedDateRange: state.chartConfig.selectedDateRange,\r\n    cdcHistoryByJurisdiction: state.chartConfig.cdcHistoryByJurisdiction\r\n\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCOVID19Data: (data) => dispatch(setCOVID19Data(data))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Covid19UsDashboard);","import React from 'react';\n\nimport Covid19UsDashboard from './components/dashboard/dashboard.component';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Covid19UsDashboard/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import ChartConfigTypes from './chart-config.types';\r\nimport {USA_IDENTIFIER, DATE_RANGES_DEFAULT} from '../../utilities/data-fields';\r\n\r\nconst INITIAL_STATE = {\r\n    statesHistoryData: null,\r\n    stateInformation: null,\r\n    countryHistoryData: null,\r\n    stateCountyInfo: null,\r\n    deathsByAgeGroups: null,\r\n    dataRefreshedTimestamp: null,\r\n    selectedState: null,\r\n    selectedDateRange: null,   \r\n    selectedFields: []    \r\n};\r\n\r\nconst chartConfigReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ChartConfigTypes.SET_COVID19_DATA: \r\n            return {\r\n                selectedState: USA_IDENTIFIER,\r\n                selectedDateRange: DATE_RANGES_DEFAULT,    \r\n                stateCountyInfo: action.payload.stateCountyInfo,\r\n                deathsByAgeGroups: action.payload.deathsByAgeGroups,\r\n                dataRefreshedTimestamp: (new Date()).toLocaleString(),\r\n                cdcHistoryByJurisdiction: action.payload.cdcHistoryByJurisdiction,\r\n                cdcTotalsByJurisdiction: action.payload.cdcTotalsByJurisdiction\r\n            }\r\n            \r\n        case ChartConfigTypes.SET_STATE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedState: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_DATE_RANGE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedDateRange: action.payload\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n        \r\n    }\r\n}\r\n\r\nexport default chartConfigReducer;","import {combineReducers} from 'redux';\r\n\r\nimport chartConfigReducer from './chart-config/chart-config.reducer';\r\n\r\nexport default combineReducers({\r\n    chartConfig: chartConfigReducer\r\n});\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewareObjects = [];\r\n\r\n//Only use logger in development environement\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewareObjects.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewareObjects));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}