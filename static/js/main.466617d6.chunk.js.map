{"version":3,"sources":["serviceWorker.js","utilities/states-meta-data.js","utilities/data-fetching.js","utilities/data-fields.js","utilities/formatting.js","utilities/chart-data-processing.js","redux/chart-config/chart-config.types.js","components/chart-config/chart-config.component.jsx","redux/chart-config/chart-config.actions.js","utilities/chart-options.js","components/chart-display/chart-display.component.jsx","components/cdc-history-chart/cdc-history-chart.component.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.component.jsx","components/data-totals/data-totals.component.jsx","components/demographics/deaths-by-age.component.jsx","components/demographics/demographics.component.jsx","components/dashboard/dashboard.component.jsx","utilities/urls.js","App.js","redux/chart-config/chart-config.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","STATE_INFO","name","population","CDC_TOKEN","getFreshData","a","stateCountyInfo","deathsByAgeGroups","cdcHistoryByJurisdiction","cdcTotalsByJurisdiction","cdcHospitalDataByJurisdiction","cdcHospitalDataLastUpdate","fetchJsonData","dataHistoryByState","dataHistoryUSA","concat","dataHospitalByState","dataHospitalUSA","length","date","hospitalTotalsURL","URL_CDC_HOSPITAL_DATA_BY_STATE_TOTALS","dataHospitalTotals","dataCasesDeathsByState","dataVaccinatedAdultsByState","dataReimbursements","getTotalsByJurisdiction","url","json","fetch","response","ok","Error","statusText","getTotalsForUSA","totalsByState","total_cases","total_deaths","inpatient_beds","inpatient_beds_covid","icu_beds","icu_beds_covid","forEach","data","Number","getHealthcareReinbursementByState","statesReinbursements","totalProviders","totalPayments","providers","payments","cleanTextNumber","payment","dataFigure","cleanedText","replaceAll","trim","value","isNaN","totalReimbursements","Object","keys","stateName","toUpperCase","casesDeathsData","find","hospitalData","vaccineData","vaccinated","hesitant","strongly_hesitant","hhsData","push","hhs_providers","hhs_payments","dataTotalsUSA","DATE_RANGES","30","45","60","90","120","150","180","270","365","500","DATA_FIELD_COLORS","DATA_FIELD_DISPLAY_NAMES","new_case","new_death","CDC_DATA_CHART_FIELD_GROUPS","dailyTotals","getDisplayNumber","num","Intl","NumberFormat","useGrouping","format","getFormattedDateForFiltering","d","Date","month","getMonth","day","getDate","year","getFullYear","getPercentage","partialNum","totalNum","percent","toFixed","getCDCDataSet","selectedDateRange","selectedState","now","yesterday","setDate","startDate","endDate","filter","stateData","substr","replace","sort","b","getAgeGroupForState","toLowerCase","age_group","includes","compareAgeGroupValues","numA","substring","numB","ChartConfigTypes","SET_STATE_SELECTION","SET_DATE_RANGE_SELECTION","SET_FIELD_SELECTION","SET_COVID19_DATA","SET_STATE_HISTORY_DATA","connect","chartConfig","dispatch","setStateSelection","userSelectedState","type","payload","setDateRangeSelection","userSelectedDateRange","dateRangeKeys","statesKeys","className","defaultValue","onChange","event","target","map","item","key","CHART_OPTIONS_FOR_STATE_HISTORY","responsive","aspectRatio","maintainAspectRatio","title","display","tooltips","mode","intersect","bodyAlign","callbacks","label","tooltipItem","datasets","datasetIndex","index","parseInt","toLocaleString","hover","legend","position","labels","boxWidth","fontSize","usePointStyle","padding","elements","point","radius","layout","left","right","top","bottom","scales","xAxes","ticks","min","callback","dataLabel","scaleLabel","yAxes","beginAtZero","formatYAxisDisplay","CHART_OPTIONS_FOR_AGE_GROUPS","stacked","labelText","currentLineChart","ChartDisplay","chartType","chartOptions","chartLabels","chartDataSet","chartId","chartContainer","useRef","useState","chartInstance","setChartInstance","useEffect","current","options","destroy","Chart","id","ref","dataSet","selectedFieldGroup","stateChartTitle","dataSourceURL","dataSourceLabel","dataFetchedSuccessfully","Array","isArray","fieldNames","fieldDatasets","fieldName","fill","backgroundColor","borderColor","borderWidth","row","getChartDataset","dateList","datesList","self","indexOf","newDateList","dateString","String","getDateListFromCDCData","onClick","open","SpinnerOverlay","styled","div","SpinnerContainer","Spinner","stateInformation","stateInfo","jurisdictionData","percentPositive","percentDeath","percentHospitalization","percentICU","tempData","ageGroupSet1","result","reduce","age_group_sum","sum_covid_19_deaths","sum_total_deaths","combineAgeGroupValues","ageLabels","ageGroups","shortNames","group","groupName","formatAgeGroupNames","covid19Deaths","totalDeaths","dataRefreshedTimestamp","setCOVID19Data","freshData","loadData","App","INITIAL_STATE","statesHistoryData","countryHistoryData","selectedFields","chartConfigReducer","action","combineReducers","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.466617d6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* \r\nPopulation data taken from US Census estimates for July 2020. \r\nhttps://www2.census.gov/programs-surveys/decennial/2020/data/apportionment/population-change-data-table.pdf\r\n\r\nThis data changes approx every 18 months. No need to scrub every time.\r\n\r\n\"USA\" population = US Total in pdf + PR Total\r\n\r\n*/\r\nexport const STATE_INFO = [];\r\nSTATE_INFO[\"AK\"]={name:\"Alaska\", population:733391}\r\nSTATE_INFO[\"AL\"]={name:\"Alabama\", population:5024279}\r\nSTATE_INFO[\"AR\"]={name:\"Arkansas\", population:3011524}\r\nSTATE_INFO[\"AZ\"]={name:\"Arizona\", population:7151502}\r\nSTATE_INFO[\"CA\"]={name:\"California\", population:39538223}\r\nSTATE_INFO[\"CO\"]={name:\"Colorado\", population:5773714}\r\nSTATE_INFO[\"CT\"]={name:\"Connecticut\", population:3605944}\r\nSTATE_INFO[\"DC\"]={name:\"District of Columbia\", population:689545}\r\nSTATE_INFO[\"DE\"]={name:\"Delaware\", population:989948}\r\nSTATE_INFO[\"FL\"]={name:\"Florida\", population:21538187}\r\nSTATE_INFO[\"GA\"]={name:\"Georgia\", population:10711908}\r\nSTATE_INFO[\"HI\"]={name:\"Hawaii\", population:1455271}\r\nSTATE_INFO[\"IA\"]={name:\"Iowa\", population:3190369}\r\nSTATE_INFO[\"ID\"]={name:\"Idaho\", population:1839106}\r\nSTATE_INFO[\"IL\"]={name:\"Illinois\", population:12812508}\r\nSTATE_INFO[\"IN\"]={name:\"Indiana\", population:6785528}\r\nSTATE_INFO[\"KS\"]={name:\"Kansas\", population:2937880}\r\nSTATE_INFO[\"KY\"]={name:\"Kentucky\", population:4505836}\r\nSTATE_INFO[\"LA\"]={name:\"Louisiana\", population:4657757}\r\nSTATE_INFO[\"MA\"]={name:\"Massachusetts\", population:7029917}\r\nSTATE_INFO[\"MD\"]={name:\"Maryland\", population:6177224}\r\nSTATE_INFO[\"ME\"]={name:\"Maine\", population:1362359}\r\nSTATE_INFO[\"MI\"]={name:\"Michigan\", population:10077331}\r\nSTATE_INFO[\"MN\"]={name:\"Minnesota\", population:5706494}\r\nSTATE_INFO[\"MO\"]={name:\"Missouri\", population:6154913}\r\nSTATE_INFO[\"MS\"]={name:\"Mississippi\", population:2961279}\r\nSTATE_INFO[\"MT\"]={name:\"Montana\", population:1084225}\r\nSTATE_INFO[\"NC\"]={name:\"North Carolina\", population:10439388}\r\nSTATE_INFO[\"ND\"]={name:\"North Dakota\", population:779094}\r\nSTATE_INFO[\"NE\"]={name:\"Nebraska\", population:1961504}\r\nSTATE_INFO[\"NH\"]={name:\"New Hampshire\", population:1377529}\r\nSTATE_INFO[\"NJ\"]={name:\"New Jersey\", population:9288994}\r\nSTATE_INFO[\"NM\"]={name:\"New Mexico\", population:2117522}\r\nSTATE_INFO[\"NV\"]={name:\"Nevada\", population:3104614}\r\nSTATE_INFO[\"NY\"]={name:\"New York\", population:20201249}\r\nSTATE_INFO[\"OH\"]={name:\"Ohio\", population:11799448}\r\nSTATE_INFO[\"OK\"]={name:\"Oklahoma\", population:3959353}\r\nSTATE_INFO[\"OR\"]={name:\"Oregon\", population:4237256}\r\nSTATE_INFO[\"PA\"]={name:\"Pennsylvania\", population:13002700}\r\nSTATE_INFO[\"PR\"]={name:\"Puerto Rico\", population:3285874}\r\nSTATE_INFO[\"RI\"]={name:\"Rhode Island\", population:1097379}\r\nSTATE_INFO[\"SC\"]={name:\"South Carolina\", population:5118425}\r\nSTATE_INFO[\"SD\"]={name:\"South Dakota\", population:886667}\r\nSTATE_INFO[\"TN\"]={name:\"Tennessee\", population:6910840}\r\nSTATE_INFO[\"TX\"]={name:\"Texas\", population:29145505}\r\nSTATE_INFO[\"UT\"]={name:\"Utah\", population:3271616}\r\nSTATE_INFO[\"VA\"]={name:\"Virginia\", population:8631393}\r\nSTATE_INFO[\"VT\"]={name:\"Vermont\", population:643077}\r\nSTATE_INFO[\"WA\"]={name:\"Washington\", population:7705281}\r\nSTATE_INFO[\"WI\"]={name:\"Wisconsin\", population:5893718}\r\nSTATE_INFO[\"WV\"]={name:\"West Virginia\", population:1793716}\r\nSTATE_INFO[\"WY\"]={name:\"Wyoming\", population:576851}\r\nSTATE_INFO[\"USA\"]={name:\"United States\", population:334735155}\r\n","import {STATE_INFO} from './states-meta-data';\r\n\r\nconst URL_DEATHS_BY_AGE_DATA = \"https://data.cdc.gov/resource/9bhg-hcku.json?$select=state,age_group,sum(covid_19_deaths),sum(total_deaths) where sex ='All Sexes' and `group`='By Total' and age_group in ('0-17 years', '18-29 years', '30-39 years','40-49 years','50-64 years','65-74 years','75-84 years','85 years and over') group by state,age_group&$order=state, age_group\";\r\nconst URL_COUNTY_LEVEL_DATA = \"https://raw.githubusercontent.com/nytimes/covid-19-data/master/live/us-counties.csv\"\r\n\r\n/* New Data Sets from CDC */\r\nconst CDC_TOKEN = \"&$limit=500000&$$app_token=fz22RHPlELrzEw1j9vq91YH6N\";\r\nconst URL_CDC_CASES_DEATHS_BY_STATE_TOTAL = \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=state,max(tot_cases) as total_cases,max(tot_death) as total_deaths&$group=state&$order=state\" + CDC_TOKEN;\r\nconst URL_CDC_CASES_DEATHS_BY_STATE_HISTORY= \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=submission_date as date,state,new_case,new_death&$order=submission_date,state\" + CDC_TOKEN;\r\nconst URL_CDC_CASES_DEATHS_USA_HISTORY = \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=submission_date%20as%20date,%27USA%27%20as%20state,sum(new_case)%20as%20new_case,sum(new_death)%20as%20new_death&$group=submission_date&$order=submission_date\" + CDC_TOKEN;\r\n\r\nconst URL_CDC_ADULTS_VACCINATED_BY_STATE = \"https://data.cdc.gov/resource/q9mh-h2tw.json?$select=state,avg(percent_adults_fully)%20as%20vaccinated,%20avg(estimated_hesitant)%20as%20hesitant,avg(estimated_strongly_hesitant)%20as%20strongly_hesitant&$group=state\";\r\n\r\nconst URL_CDC_HOSPITAL_DATA_BY_STATE_HISTORY = \"https://healthdata.gov/resource/g62h-syeh.json?$select=date,state,inpatient_beds,%20inpatient_beds_used_covid%20as%20inpatient_beds_covid,total_staffed_adult_icu_beds%20as%20icu_beds,%20staffed_icu_adult_patients_confirmed_covid%20as%20icu_beds_covid&$order=date,state not in ('AS','FM','GU','MH','MP','PW','VI')\" + CDC_TOKEN;\r\nconst URL_CDC_HOSPITAL_DATA_BY_STATE_TOTALS = \"https://healthdata.gov/resource/g62h-syeh.json?$select=date,state,inpatient_beds,%20inpatient_beds_used_covid%20as%20inpatient_beds_covid,total_staffed_adult_icu_beds%20as%20icu_beds,%20staffed_icu_adult_patients_confirmed_covid%20as%20icu_beds_covid&$where=state not in ('AS','FM','GU','MH','MP','PW','VI') and date=\";\r\nconst URL_CDC_HOSPTIAL_DATA_USA_HISTORY = \"https://healthdata.gov/resource/g62h-syeh.json?$select=date,%22USA%22%20as%20state,sum(inpatient_beds)%20as%20impatient_beds,%20sum(inpatient_beds_used_covid)%20as%20inpatient_beds_covid,%20sum(total_staffed_adult_icu_beds)%20as%20icu_beds,%20sum(staffed_icu_adult_patients_confirmed_covid)%20as%20icu_beds_covid&$group=date&$order=date&$where=state not in ('AS','FM','GU','MH','MP','PW','VI')\" + CDC_TOKEN;\r\n/*\r\nAs of March 2020, The Covid Tracking project ended its funding, so all datapoints have to\r\nnow be sourced directly from CDC. The link below has all related data links:\r\nhttps://covidtracking.com/about-data/data-summary\r\n\r\nconst URL_STATE_META_DATA = \"https://api.covidtracking.com/v1/states/info.json\";\r\nconst URL_STATE_TOTALS_DATA = \"https://api.covidtracking.com/v1/states/current.json\";\r\nconst URL_STATES_HISTORY_DATA = \"https://api.covidtracking.com/v1/states/daily.json\";\r\nconst URL_COUNTRY_TOTALS_DATA = \"https://api.covidtracking.com/v1/us/current.json\";\r\nconst URL_COUNTRY_HISTORY_DATA = \"https://api.covidtracking.com/v1/us/daily.json\";\r\n\r\n*/\r\n\r\nexport const getFreshData = async() => {\r\n    \r\n    let stateCountyInfo = [];\r\n    let deathsByAgeGroups = []\r\n    let cdcHistoryByJurisdiction = [];\r\n    let cdcTotalsByJurisdiction = [];\r\n    let cdcHospitalDataByJurisdiction=[];\r\n    let cdcHospitalDataLastUpdate = \"\";\r\n\r\n    try {\r\n        \r\n        let dataHistoryByState = await fetchJsonData(URL_CDC_CASES_DEATHS_BY_STATE_HISTORY);\r\n        let dataHistoryUSA = await fetchJsonData(URL_CDC_CASES_DEATHS_USA_HISTORY);\r\n        cdcHistoryByJurisdiction = dataHistoryByState.concat(dataHistoryUSA);\r\n\r\n        let dataHospitalByState = await fetchJsonData(URL_CDC_HOSPITAL_DATA_BY_STATE_HISTORY);\r\n        let dataHospitalUSA =await fetchJsonData(URL_CDC_HOSPTIAL_DATA_USA_HISTORY);\r\n        cdcHospitalDataByJurisdiction = dataHospitalByState.concat(dataHospitalUSA);\r\n\r\n        // Get current hospital data per state \r\n        cdcHospitalDataLastUpdate = dataHospitalByState[dataHospitalByState.length -1].date;\r\n        let hospitalTotalsURL = URL_CDC_HOSPITAL_DATA_BY_STATE_TOTALS + \"'\" + cdcHospitalDataLastUpdate + \"'\" + CDC_TOKEN;\r\n\r\n        let dataHospitalTotals = await fetchJsonData(hospitalTotalsURL);\r\n        let dataCasesDeathsByState = await fetchJsonData(URL_CDC_CASES_DEATHS_BY_STATE_TOTAL);\r\n        let dataVaccinatedAdultsByState = await fetchJsonData(URL_CDC_ADULTS_VACCINATED_BY_STATE);\r\n        let dataReimbursements = [];\r\n\r\n        cdcTotalsByJurisdiction = await getTotalsByJurisdiction(dataCasesDeathsByState, dataVaccinatedAdultsByState, dataReimbursements,dataHospitalTotals);\r\n        \r\n        deathsByAgeGroups = await fetchJsonData(URL_DEATHS_BY_AGE_DATA);\r\n\r\n        return {\r\n            stateCountyInfo: stateCountyInfo,\r\n            deathsByAgeGroups: deathsByAgeGroups,\r\n            cdcTotalsByJurisdiction: cdcTotalsByJurisdiction,\r\n            cdcHistoryByJurisdiction: cdcHistoryByJurisdiction,\r\n            cdcHospitalDataByJurisdiction: cdcHospitalDataByJurisdiction\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchJsonData = async(url) => {\r\n    try{\r\n\r\n        let json = null;\r\n\r\n        // U.S. States Historical Data\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n            json = await response.json();\r\n        }\r\n        else {\r\n            throw Error(response.statusText);\r\n        }\r\n        \r\n        return json;\r\n    }\r\n    catch (error) {\r\n        console.log(\"fetchJsonData() error!\", error);\r\n    }\r\n}\r\n\r\nexport const fetchCountyData = async() => {\r\n\r\n    try {\r\n        const url = URL_COUNTY_LEVEL_DATA;\r\n        \r\n        let stateCountyData = [];\r\n\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n            const csvText = await response.text();\r\n            stateCountyData = parseCountyCSVData(csvText);\r\n            stateCountyData.filter(data => data.deaths > 0 || data.cases > 0);\r\n        }\r\n        else {\r\n            throw Error(response.statusText);\r\n        }\r\n\r\n        return stateCountyData;\r\n    }\r\n    catch (error) {\r\n        \r\n    }\r\n}\r\n\r\n//Parsing County Data specific to dataset specs\r\nfunction parseCountyCSVData(csv){\r\n\r\n    var lines=csv.split(\"\\n\");\r\n\r\n    var result = [];\r\n\r\n    for(var i=1;i<lines.length;i++){\r\n\r\n        const currentline=lines[i].split(\",\");\r\n        const county = {};\r\n        county.county = currentline[1];\r\n        county.stateName = currentline[2];\r\n        county.cases = currentline[4]\r\n        county.deaths = currentline[5];\r\n        result.push(county);\r\n    }\r\n\r\n    return result; \r\n}\r\n\r\n\r\nconst getTotalsForUSA = (totalsByState) => {\r\n\r\n    let total_cases = 0;\r\n    let total_deaths = 0;\r\n    let inpatient_beds = 0;\r\n    let inpatient_beds_covid = 0;\r\n    let icu_beds = 0;\r\n    let icu_beds_covid = 0;\r\n\r\n    totalsByState.forEach(data => {\r\n        total_cases += Number(data.total_cases);\r\n        total_deaths += Number(data.total_deaths);\r\n        inpatient_beds += Number(data.inpatient_beds);\r\n        inpatient_beds_covid += Number(data.inpatient_beds_covid);\r\n        icu_beds += Number(data.icu_beds);\r\n        icu_beds_covid += Number(data.icu_beds_covid);\r\n    })\r\n\r\n    let totals = {\r\n        state:\"USA\", \r\n        total_cases: \"\" + total_cases, \r\n        total_deaths: \"\" + total_deaths,\r\n        inpatient_beds: \"\" + inpatient_beds,\r\n        inpatient_beds_covid: \"\" + inpatient_beds_covid,\r\n        icu_beds: \"\" + icu_beds,\r\n        icu_beds_covid: \"\" + icu_beds_covid\r\n    }\r\n\r\n    return totals;\r\n}\r\n\r\n\r\n\r\nconst getHealthcareReinbursementByState = (dataReimbursements) => {\r\n\r\n    let statesReinbursements = [];\r\n    let totalProviders = 0;\r\n    let totalPayments = 0;\r\n\r\n    dataReimbursements.forEach (data => {\r\n        let state = data.state;\r\n\r\n        if (!statesReinbursements[state]) {\r\n            statesReinbursements[state] = {\r\n                providers: 0,\r\n                payments:0\r\n            }\r\n        }\r\n\r\n        const payments = cleanTextNumber(data.payment);\r\n\r\n        statesReinbursements[state].providers += 1;\r\n        statesReinbursements[state].payments += payments;\r\n\r\n        totalProviders += 1;\r\n        totalPayments += payments;\r\n        \r\n    })\r\n\r\n    statesReinbursements[\"USA\"] = {\r\n        providers: totalProviders,\r\n        payments: totalPayments\r\n    };\r\n\r\n    return statesReinbursements;\r\n}\r\n\r\nconst cleanTextNumber = (dataFigure) => {\r\n        \r\n    let cleanedText = dataFigure\r\n        .replaceAll(\"$\",\"\")\r\n        .replaceAll(\"-\",\"\")\r\n        .replaceAll(\",\",\"\")\r\n        .trim();\r\n\r\n    let value = Number (cleanedText);\r\n\r\n    if (isNaN(value)) {\r\n        console.log(\"dataFigure=\"+ dataFigure + \", cleanedText=\" + cleanedText);\r\n        value = 0;\r\n    }\r\n    \r\n    return value;\r\n    \r\n}\r\n\r\nconst getTotalsByJurisdiction = async(dataCasesDeathsByState, dataVaccinatedAdultsByState, dataReimbursements,dataHospitalTotals) => {\r\n\r\n    let totalReimbursements = getHealthcareReinbursementByState(dataReimbursements);\r\n    let totalsByState= [];\r\n    let stateKeys = Object.keys(STATE_INFO);\r\n    \r\n    stateKeys.forEach((state) => {\r\n\r\n        if (state !== \"USA\") {\r\n            let stateName = STATE_INFO[state].name.toUpperCase(); \r\n\r\n            let casesDeathsData =dataCasesDeathsByState.find(data => data.state===state);\r\n            let hospitalData = dataHospitalTotals.find(data => data.state===state);\r\n            if (!hospitalData)\r\n                hospitalData = {\r\n                    inpatient_beds: 0,\r\n                    inpatient_beds_covid: 0,\r\n                    icu_beds: 0,\r\n                    icu_beds_covid: 0\r\n                }\r\n\r\n            let vaccineData = dataVaccinatedAdultsByState.find(data => data.state===stateName);\r\n            if (!vaccineData)\r\n                vaccineData = {\r\n                    vaccinated: 0,\r\n                    hesitant: 0,\r\n                    strongly_hesitant: 0\r\n                }\r\n            \r\n            let hhsData = totalReimbursements[state];\r\n            if (!hhsData) \r\n                hhsData = {\r\n                    providers: 0,\r\n                    payments: 0\r\n                }\r\n\r\n            totalsByState.push({\r\n                state: state,\r\n                total_cases: casesDeathsData.total_cases,\r\n                total_deaths: casesDeathsData.total_deaths,\r\n                inpatient_beds: hospitalData.inpatient_beds,\r\n                inpatient_beds_covid: hospitalData.inpatient_beds_covid,\r\n                icu_beds:hospitalData.icu_beds,\r\n                icu_beds_covid:hospitalData.icu_beds_covid,\r\n\r\n                hhs_providers: !hhsData.providers ? 0 : hhsData.providers,\r\n                hhs_payments: !hhsData.payments ? 0 : hhsData.payments,\r\n                vaccinated: vaccineData.vaccinated,\r\n                hesitant: vaccineData.hesitant,\r\n                strongly_hesitant: vaccineData.strongly_hesitant\r\n            });\r\n        }\r\n    })\r\n\r\n    let dataTotalsUSA = getTotalsForUSA(totalsByState);\r\n    totalsByState.push(dataTotalsUSA);\r\n    \r\n\r\n    return totalsByState;\r\n}","export const DATE_RANGES = {\r\n    30: \"Last 30 days\",\r\n    45: \"Last 45 days\",\r\n    60: \"Last 60 days\",\r\n    90: \"Last 3 months\",\r\n    120: \"Last 4 months\",\r\n    150: \"Last 5 months\",\r\n    180: \"Last 6 months\",\r\n    270: \"Last 9 months\",\r\n    365: \"Last 12 months\",\r\n    500: \"All Time\"\r\n}\r\n\r\nexport const DATE_RANGES_DEFAULT = \"90\";\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    'green',\r\n    'red',\r\n    'blue',\r\n    '#146AD4',\r\n    '#A9D422',\r\n    '#18F8BB',\r\n    '#AFC044',\r\n    '#3B9793',\r\n    '#822611',\r\n    '#FB2E76',\r\n    '#A5CA71',\r\n    '#983538',\r\n    '#082BD9',\r\n    '#2E136A',\r\n    '#05BB78',\r\n    '#44A4AD',\r\n    '#28FD7E',\r\n    '#387862'\r\n];\r\n\r\nexport const USA_IDENTIFIER = \"USA\";\r\n\r\nexport const US_STATES_DATA = {\r\n    USA:\"United States\",\r\n    AL:\"Alabama\",\r\n    AK:\"Alaska\",\r\n    AR:\"Arkansas\",\r\n    AZ:\"Arizona\",\r\n    CA:\"California\", \r\n    CO:\"Colorado\", \r\n    CT:\"Connecticut\", \r\n    DE:\"Delaware\",\r\n    DC:\"District Of Columbia\", \r\n    FL:\"Florida\", \r\n    GA:\"Georgia\",\r\n    HI:\"Hawaii\", \r\n    ID:\"Idaho\", \r\n    IL:\"Illinois\", \r\n    IA:\"Iowa\", \r\n    IN:\"Indiana\", \r\n    KS:\"Kansas\", \r\n    KY:\"Kentucky\", \r\n    LA:\"Louisiana\",\r\n    ME:\"Maine\",  \r\n    MD:\"Maryland\",\r\n    MA:\"Massachusetts\", \r\n    MI:\"Michigan\",\r\n    MN:\"Minnesota\",\r\n    MS:\"Mississippi\", \r\n    MO:\"Missouri\", \r\n    MT:\"Montana\", \r\n    NC:\"North Carolina\", \r\n    ND:\"North Dakota\", \r\n    NE:\"Nebraska\", \r\n    NV:\"Nevada\",\r\n    NH:\"New Hampshire\", \r\n    NJ:\"New Jersey\", \r\n    NM:\"New Mexico\",  \r\n    NY:\"New York\", \r\n    OH:\"Ohio\", \r\n    OK:\"Oklahoma\", \r\n    OR:\"Oregon\", \r\n    PA:\"Pennsylvania\", \r\n    PR:\"Puerto Rico\", \r\n    RI:\"Rhode Island\",\r\n    SC:\"South Carolina\", \r\n    SD:\"South Dakota\", \r\n    TN:\"Tennessee\", \r\n    TX:\"Texas\", \r\n    UT:\"Utah\", \r\n    VT:\"Vermont\", \r\n    VA:\"Virginia\",\r\n    WA:\"Washington\", \r\n    WI:\"Wisconsin\", \r\n    WV:\"West Virginia\", \r\n    WY:\"Wyoming\"\r\n}\r\n\r\nexport const DATA_FIELD_DISPLAY_NAMES = {   \r\n    new_case: \"New Cases\",\r\n    new_death: \"New Deaths\",\r\n    inpatient_beds_covid: \"Inpatient\",\r\n    icu_beds_covid: \"ICU\"\r\n};\r\n\r\n\r\nexport const COUNTY_SORT_FIELDS = {\r\n    SORT_BY_DEATHS : \"deaths\",\r\n    SORT_BY_CASES : \"cases\",\r\n    SORT_BY_COUNTY : \"county\"\r\n};\r\n\r\n\r\nexport const CDC_DATA_FIELDS_DAILY = [\r\n    \"new_case\",\r\n    \"new_death\",\r\n];\r\n\r\nexport const CDC_DATA_FIELDS_TOTALS = [\r\n    \"max_tot_cases\",\r\n    \"max_tot_death\",\r\n];\r\n\r\nexport const CDC_DATA_CHART_FIELD_GROUPS = {\r\n    dailyTotals: [\r\n        \"new_case\",\r\n        \"new_death\"\r\n    ],\r\n    hospitalData: [\r\n        \"inpatient_beds_covid\",\r\n        \"icu_beds_covid\"\r\n    ]\r\n}","export const getDisplayNumber = (num) => {\r\n    if (!num)\r\n        num = 0;\r\n    return Intl.NumberFormat('en-US', {useGrouping: true}).format(num);\r\n}\r\n\r\nexport const getFormattedDateForFiltering = (date) => {\r\n    var d = new Date(date);\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n    return year + month + day;\r\n}\r\n\r\nexport const getDateDisplayString = (date) => {\r\n    var d = new Date(date);\r\n    let month = '' + (d.getMonth() + 1);\r\n    let day = '' + d.getDate();\r\n    let year = d.getFullYear();\r\n\r\n    return month + \"/\" + day + \"/\" + year;\r\n}\r\n\r\nexport const getPercentage = (partialNum, totalNum) => {\r\n    var percent = ((partialNum / totalNum) * 100).toFixed(2);\r\n    if (percent === \"0.00\")\r\n        percent = \"< 0.01\"\r\n    return percent + \"%\";\r\n}","import {DATA_FIELD_COLORS, DATA_FIELD_DISPLAY_NAMES} from './data-fields';\r\nimport {getFormattedDateForFiltering} from './formatting';\r\n\r\nexport const combineAgeGroupValues = (ageGroupSet1) => {\r\n\r\n    var result = [];\r\n    ageGroupSet1.reduce(\r\n        function(age_group_sum, value) {\r\n            if (!age_group_sum[value.age_group]) {\r\n                age_group_sum[value.age_group] = {\r\n                    age_group: value.age_group,\r\n                    sum_covid_19_deaths: !Number(value.sum_covid_19_deaths) ? 0 : Number(value.sum_covid_19_deaths),\r\n                    sum_total_deaths: !Number(value.sum_total_deaths) ? 0 : Number(value.sum_total_deaths)\r\n                };\r\n                result.push(age_group_sum[value.age_group])\r\n            }\r\n            else {\r\n                age_group_sum[value.age_group].sum_covid_19_deaths += !Number(value.sum_covid_19_deaths) ? 0 : Number(value.sum_covid_19_deaths);\r\n                age_group_sum[value.age_group].sum_total_deaths += !Number(value.sum_total_deaths) ? 0 : Number(value.sum_total_deaths);\r\n            }\r\n            return age_group_sum;\r\n        }\r\n    , {});\r\n\r\n    return result;\r\n\r\n}\r\n\r\nexport const getCDCDataSet = (selectedDateRange, cdcHistoryByJurisdiction, selectedState) =>{\r\n    const now = new Date();\r\n    const yesterday = new Date();\r\n    now.setDate(now.getDate() - Number(selectedDateRange));\r\n    const startDate = getFormattedDateForFiltering(now);\r\n    const endDate = getFormattedDateForFiltering(yesterday);\r\n\r\n    let dataSet = cdcHistoryByJurisdiction\r\n        .filter(stateData => stateData.state === selectedState && stateData.date.substr(0,10).replace('-','') >= startDate && stateData.date.substr(0,10).replace('-','') <= endDate)\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n\r\n    return dataSet;\r\n}\r\n\r\n\r\nexport const getDateListFromData = (stateData) => {\r\n\r\n    const datesList = stateData.map(item => item.date)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var month = Number(dateString.substring(4,6));\r\n        var day = Number(dateString.substring(6,8));\r\n\r\n        newDateList.push(month + \"/\" + day);\r\n    });\r\n\r\n    return newDateList;\r\n}\r\n\r\nexport const getAgeGroupForState = (deathsByAgeGroups, stateName) => {\r\n    \r\n    return deathsByAgeGroups\r\n        .filter(data => data.state.toLowerCase() === stateName.toLowerCase() && data.age_group.includes('year'))\r\n        .sort((a,b) => compareAgeGroupValues(a.age_group,b.age_group));\r\n    \r\n}    \r\n\r\nexport const formatAgeGroupNames = (ageGroups) => {\r\n    \r\n    const shortNames = [];\r\n\r\n    ageGroups.forEach(group => {\r\n        const groupName = group.replace(\"years and over\",\"+\").replace(\"years\",\"\").replace(\"year\",\"\").replace(\"Under\",\"<\"); \r\n        shortNames.push(groupName);\r\n    });\r\n\r\n    return shortNames;\r\n}\r\n\r\nconst compareAgeGroupValues = (a, b) => {\r\n\r\n    let numA = Number(a.substring(0,2).replace(\"-\",\"\").toLowerCase().replace(\"un\",\"0\"));\r\n    let numB = Number(b.substring(0,2).replace(\"-\",\"\").toLowerCase().replace(\"un\",\"0\"));\r\n\r\n    if (numA > numB) return 1;\r\n    if (numA < numB) return -1;\r\n\r\n    return 0;\r\n}\r\n\r\nexport const getChartDataset = (data, fieldNames) => {\r\n\r\n    const fieldDatasets = [];\r\n\r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        fieldDatasets.push({\r\n            fieldName: fieldName, \r\n            label: DATA_FIELD_DISPLAY_NAMES[fieldName],\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            borderWidth: 1.5,\r\n            data: []\r\n        })\r\n    })\r\n\r\n    data.forEach(row => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = fieldDatasets.find((data => data.fieldName === fieldName))    \r\n            fieldData.data.push(!row[fieldName] || row[fieldName] < 0 ? 0 : row[fieldName]);\r\n        })\r\n    });\r\n\r\n    return fieldDatasets;\r\n}\r\n\r\nexport const getAgeGroupChartDataset = (covidDeaths, allDeaths) => {\r\n\r\n    const ageGroupDataSet = [\r\n        {    \r\n            label: \"Covid-19\",\r\n            backgroundColor: \"red\",\r\n            data:covidDeaths \r\n        },\r\n        { \r\n            label: \"All Deaths\",\r\n            backgroundColor: \"blue\",\r\n            data:allDeaths\r\n        }\r\n    ];\r\n\r\n    return ageGroupDataSet;\r\n}\r\n\r\nexport const getDateListFromCDCData = (dataSet) => {\r\n\r\n    const datesList = dataSet.map(item => item.date)\r\n        .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const newDateList = [];\r\n\r\n    datesList.forEach(item => {\r\n        var dateString = String(item);\r\n        var month = Number(dateString.substring(5,7));\r\n        var day = Number(dateString.substring(8,10));\r\n\r\n        newDateList.push(month + \"/\" + day);\r\n    });\r\n\r\n    return newDateList;\r\n}","const ChartConfigTypes = {\r\n    SET_STATE_SELECTION : \"SET_STATE_SELECTION\",\r\n    SET_DATE_RANGE_SELECTION : \"SET_DATE_RANGE_SELECTION\",\r\n    SET_FIELD_SELECTION : \"SET_FIELD_SELECTION\",\r\n    SET_COVID19_DATA : \"SET_COVID19_DATA\",\r\n    SET_STATE_HISTORY_DATA: \"SET_STATE_HISTORY_DATA\" \r\n\r\n};\r\n\r\nexport default ChartConfigTypes;","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './chart-config.css';\r\n//import ConfigSection from '../config-section/config-section.component';\r\nimport {DATE_RANGES,DATE_RANGES_DEFAULT} from '../../utilities/data-fields';\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\nimport {setDateRangeSelection, setStateSelection} from '../../redux/chart-config/chart-config.actions';\r\n\r\nconst ChartConfiguration = ({selectedState, selectedDateRange, setStateSelection, setDateRangeSelection}) => {\r\n\r\n    //console.log(\"ChartConfiguration()...\");\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n\r\n    const dateRangeKeys = Object.keys(DATE_RANGES);\r\n    const statesKeys = Object.keys(STATE_INFO);\r\n    \r\n    const handleStateSelection = (event) => {\r\n        setStateSelection(event.target.value);\r\n    }\r\n    const handleDateRangeSelection = (event) => {\r\n        setDateRangeSelection(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-configuration\">\r\n            <div className=\"top-section\">\r\n                <span className=\"config-section\">\r\n                    <select name=\"stateSelection\" defaultValue={!selectedState ? \"USA\" : selectedState}  onChange={handleStateSelection}>\r\n                        {statesKeys.map ((item) => \r\n                            <option key={item} value={item} >{STATE_INFO[item].name}</option>\r\n                        )}\r\n                    </select>\r\n                </span>\r\n                <span className=\"config-section\">\r\n                    <select name=\"dateRangeSelection\" defaultValue={!selectedDateRange ? DATE_RANGES_DEFAULT : selectedDateRange}  onChange={handleDateRangeSelection}>\r\n                        {dateRangeKeys.map ((item) => \r\n                            <option key={item} value={item} >{DATE_RANGES[item]}</option>\r\n                        )}\r\n                    </select>\r\n                </span>\r\n                \r\n            </div>            \r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setStateSelection: (userSelectedState) => dispatch(setStateSelection(userSelectedState)),\r\n    setDateRangeSelection: (userSelectedDateRange) => dispatch(setDateRangeSelection(userSelectedDateRange))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChartConfiguration);","import ChartConfigTypes from './chart-config.types';\r\n\r\nexport const setStateSelection = (stateSelection) => ({\r\n    type : ChartConfigTypes.SET_STATE_SELECTION,\r\n    payload: stateSelection\r\n});\r\n\r\nexport const setDateRangeSelection = (dateRangeSelection) => ({\r\n    type : ChartConfigTypes.SET_DATE_RANGE_SELECTION,\r\n    payload: dateRangeSelection\r\n});\r\n\r\nexport const setCOVID19Data = (data) => ({\r\n    type : ChartConfigTypes.SET_COVID19_DATA,\r\n    payload: data\r\n});\r\n\r\n\r\n\r\n","export const CHART_OPTIONS_FOR_STATE_HISTORY = {\r\n    responsive: true,\r\n    aspectRatio: 1,\r\n    maintainAspectRatio: false,\r\n    title: { display: false},\r\n    tooltips: {\r\n            mode: 'index', \r\n            intersect: false,\r\n            bodyAlign: 'left',\r\n            callbacks: {\r\n                label: function(tooltipItem, data) {\r\n                  var type = data.datasets[tooltipItem.datasetIndex].label;\r\n                  var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n                  return type + \" : \" + parseInt(value).toLocaleString();\r\n                }\r\n            }\r\n            \r\n        },\r\n    hover: {mode: 'nearest', intersect: true},\r\n    legend: {position:'top', labels: {boxWidth:5, fontSize:14, usePointStyle:true, padding:15}},\r\n    elements: {\r\n        point:{\r\n            radius: 0\r\n        }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0\r\n        }},\r\n    scales: {\r\n        xAxes: [{\r\n            display: true,\r\n            ticks: {\r\n                min: 0,\r\n                callback: function(dataLabel, index) {\r\n                    // Hide the label of every 2nd dataset. return null to hide the grid line too\r\n                    return index % 3 === 0 ? dataLabel : '';\r\n                }\r\n            },\r\n            scaleLabel: {\r\n                display: true\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            display: true,\r\n            padding:0,\r\n            scaleLabel: {\r\n                display: false\r\n            },\r\n            ticks: {\r\n                min: 0,\r\n                beginAtZero:true,\r\n                callback: function(label) {\r\n                    return formatYAxisDisplay(label);\r\n                }                \r\n            }\r\n        }]\r\n    }\r\n}\r\n\r\nexport const CHART_OPTIONS_FOR_AGE_GROUPS = {\r\n    aspectRatio: 1,\r\n    maintainAspectRatio: false,\r\n    responsive: true,\r\n    title: { display: false},\r\n    tooltips: {\r\n        mode: 'index', \r\n        intersect: false,\r\n        bodyAlign: 'left',\r\n        callbacks: {\r\n            label: function(tooltipItem, data) {\r\n              var type = data.datasets[tooltipItem.datasetIndex].label;\r\n              var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n              return type + \" : \" + parseInt(value).toLocaleString();\r\n            }\r\n          }\r\n    },\r\n    hover: {mode: 'nearest', intersect: true},\r\n    legend: {position:'top', labels: {boxWidth:5, fontSize:14, usePointStyle:true, padding: 10}},\r\n    elements: {\r\n        point:{\r\n            radius: 0\r\n        }\r\n    },\r\n    layout: {\r\n        padding: {\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0\r\n        }},\r\n    scales: {\r\n        xAxes:[{\r\n            stacked: true,\r\n            ticks: {\r\n                beginAtZero: true,\r\n            }\r\n        }],\r\n        yAxes:[{\r\n            // stacked:false - places bars in FRONT of each other instead of on TOP of each other\r\n            // if set to true, the two bars are combined into one bar with a aggregate total.\r\n            stacked: false, \r\n            ticks: {\r\n                beginAtZero: true,\r\n                callback: function(label) {\r\n                    return formatYAxisDisplay(label);\r\n                }\r\n              }\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nconst formatYAxisDisplay = (labelText) => {\r\n\r\n    const label = Number(labelText);\r\n\r\n    if (label >= 1000000) {\r\n        return label / 1000000 + 'M';\r\n    }\r\n    else if (label >= 10000) {\r\n        return label / 1000 + 'K';\r\n    }\r\n    else {\r\n        return label;\r\n    }\r\n}","\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from \"chart.js\";\r\n\r\nimport './chart-display.css';\r\n\r\n// Necessary to be able to clear previous charts\r\nlet currentLineChart = [];\r\n\r\nconst ChartDisplay = ({chartType, chartOptions, chartLabels, chartDataSet, chartId}) => {\r\n    const chartContainer = useRef(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if (chartContainer && chartContainer.current) {\r\n\r\n            //console.log(\"loading chart...\");\r\n\r\n            const chartConfig = {\r\n                type: chartType,\r\n                options: chartOptions,\r\n                data: {\r\n                    labels: chartLabels,\r\n                    datasets: chartDataSet\r\n                }            \r\n            }\r\n\r\n            // Destroy previous chart if it exists \r\n            if (typeof currentLineChart[chartId] !== \"undefined\") currentLineChart[chartId].destroy();\r\n\r\n            currentLineChart[chartId] = new Chart(chartContainer.current, chartConfig);\r\n            setChartInstance(currentLineChart);\r\n            \r\n        }\r\n    }, [chartContainer, chartType, chartOptions, chartLabels, chartDataSet, chartId]);\r\n    \r\n    return (\r\n        <div className=\"chart-display\">\r\n            <canvas id={!chartInstance ? \"0\" : chartId } ref={chartContainer} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDisplay;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './cdc-history-chart.css';\r\n\r\nimport {DATE_RANGES} from '../../utilities/data-fields';\r\nimport {CHART_OPTIONS_FOR_STATE_HISTORY} from '../../utilities/chart-options';\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nimport {\r\n    getChartDataset, \r\n    getDateListFromCDCData,\r\n} from '../../utilities/chart-data-processing';\r\n\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\n\r\nconst CDCHistoryChart = ({dataSet, selectedState, selectedDateRange, selectedFieldGroup, stateChartTitle, chartId, dataSourceURL, dataSourceLabel}) => {  \r\n    \r\n    const dataFetchedSuccessfully = Array.isArray(dataSet) && dataSet.length > 0;\r\n    const chartDataSet = getChartDataset(dataSet, selectedFieldGroup);\r\n    const dateList = getDateListFromCDCData(dataSet);\r\n\r\n    return (\r\n        <div className=\"dashboard-component state-history-chart\">\r\n            <div className=\"dashboard-component-title chart-header\">\r\n                <span>{stateChartTitle}</span> <span>for {STATE_INFO[selectedState].name}</span> <span>{DATE_RANGES[selectedDateRange]}</span>\r\n            </div>\r\n            {dataFetchedSuccessfully ? \r\n                    <ChartDisplay \r\n                    chartType=\"line\"\r\n                    chartOptions = {CHART_OPTIONS_FOR_STATE_HISTORY}\r\n                    chartLabels = {dateList} \r\n                    chartDataSet = {chartDataSet}\r\n                    chartId = {chartId}\r\n                    />\r\n            : \r\n                <div>Problem fetching data from CDC site...</div>\r\n            }\r\n\r\n            <div className=\"data-sources\">Data:&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open(dataSourceURL)}>{dataSourceLabel}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedDateRange: state.chartConfig.selectedDateRange,\r\n});\r\n\r\nexport default connect(mapStateToProps)(CDCHistoryChart);","import styled from 'styled-components';\r\n\r\nexport const SpinnerOverlay = styled.div`\r\n  height: 60vh;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\n\r\nimport {SpinnerContainer, SpinnerOverlay} from './spinner.styles.jsx';\r\n\r\nconst Spinner = () => (\r\n    <SpinnerOverlay>\r\n        <SpinnerContainer/>\r\n    </SpinnerOverlay>\r\n);\r\n\r\nexport default Spinner;\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './data-totals.css';\r\n\r\nimport {getDisplayNumber, getPercentage} from '../../utilities/formatting'\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\n\r\nconst DataTotals = ({selectedState, cdcTotalsByJurisdiction}) => {\r\n\r\n    const dataFetchedSuccessfully = Array.isArray(cdcTotalsByJurisdiction) && cdcTotalsByJurisdiction.length > 0;\r\n\r\n    let stateInfo = STATE_INFO[selectedState];\r\n\r\n    let jurisdictionData = [];        \r\n    let percentPositive =  0;\r\n    let percentDeath =  0\r\n    let percentHospitalization = 0;\r\n    let percentICU = 0;\r\n\r\n    if (dataFetchedSuccessfully) {\r\n        jurisdictionData = cdcTotalsByJurisdiction.find(data => data.state===selectedState);\r\n        percentPositive =  getPercentage(jurisdictionData.total_cases,stateInfo.population);\r\n        percentDeath =  getPercentage(jurisdictionData.total_deaths,stateInfo.population);\r\n        percentHospitalization =  getPercentage(jurisdictionData.inpatient_beds_covid,jurisdictionData.inpatient_beds);\r\n        percentICU =  getPercentage(jurisdictionData.icu_beds_covid,jurisdictionData.icu_beds);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"dashboard-component overview\">\r\n            <div className=\"dashboard-component-title\">{stateInfo.name} Overview</div>\r\n            {dataFetchedSuccessfully ? \r\n                <div className=\"data-totals\">\r\n                    <div className=\"data-row\">\r\n                        <div className=\"data-label\">Total Cases</div>\r\n                        <div className=\"data-number\">{getDisplayNumber(jurisdictionData.total_cases)}</div>\r\n                        <div className=\"percent\">{percentPositive} of Est. Population**</div>\r\n                    </div>\r\n                    <div className=\"data-row\">\r\n                        <div className=\"data-label\">Total Deaths</div>\r\n                        <div className=\"data-number\">{getDisplayNumber(jurisdictionData.total_deaths)}</div>\r\n                        <div className=\"percent\">{percentDeath} of Est. Population**</div>\r\n                    </div>\r\n                    <div className=\"data-row\">\r\n                        <div className=\"data-label\">Currently in Hospitals</div>\r\n                        <div className=\"data-number\">{getDisplayNumber(jurisdictionData.inpatient_beds_covid)}</div>\r\n                        <div className=\"percent\">{percentHospitalization} of {getDisplayNumber(jurisdictionData.inpatient_beds)}<br/>Total Inpatient Beds Available</div>\r\n                    </div>\r\n                    <div className=\"data-row\">\r\n                        <div className=\"data-label\">Currently in ICU</div>\r\n                        <div className=\"data-number\">{getDisplayNumber(jurisdictionData.icu_beds_covid)}</div>\r\n                        <div className=\"percent\">{percentICU} of {getDisplayNumber(jurisdictionData.icu_beds)}<br/>Total ICU Beds Available</div>\r\n                    </div>\r\n                </div>            \r\n            : \r\n                <div>Problem fetching data from CDC site...</div>\r\n            }\r\n            <div className=\"data-sources\">\r\n                <div>** Estimated population of {selectedState}: {getDisplayNumber(stateInfo.population)}</div>\r\n                Data:&nbsp;\r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36\")}>CDC</span>,&nbsp; \r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://healthdata.gov/Hospital/COVID-19-Reported-Patient-Impact-and-Hospital-Capa/g62h-syeh\")}>Healthdata.gov</span>,&nbsp; \r\n                <span className=\"site-link\" onClick={()=> window.open(\"https://www2.census.gov/programs-surveys/decennial/2020/data/apportionment/population-change-data-table.pdf\")}>U.S. Census Bureau</span>    \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    cdcTotalsByJurisdiction: state.chartConfig.cdcTotalsByJurisdiction,\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataTotals);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './demographics.css';\r\n\r\nimport {getAgeGroupForState, getAgeGroupChartDataset, formatAgeGroupNames, combineAgeGroupValues} from '../../utilities/chart-data-processing';\r\nimport {CHART_OPTIONS_FOR_AGE_GROUPS} from '../../utilities/chart-options';\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nconst DeathsByAge = ({selectedState, stateInformation, deathsByAgeGroups}) => {\r\n\r\n    let dataSet = getAgeGroupForState(deathsByAgeGroups, STATE_INFO[selectedState].name);\r\n\r\n    /** CDC collects NYC separately from NY State. We are grouping them back into one number under NY state. **/\r\n    if(selectedState === \"NY\") {\r\n        const tempData = dataSet.concat(getAgeGroupForState(deathsByAgeGroups,\"New York City\"));\r\n        dataSet = combineAgeGroupValues(tempData);   \r\n    }\r\n    \r\n    const ageLabels = formatAgeGroupNames(dataSet.map(item => item.age_group));\r\n    const covid19Deaths = dataSet.map(item => item.sum_covid_19_deaths == null ? 0 : item.sum_covid_19_deaths);\r\n    const totalDeaths = dataSet.map(item => item.sum_total_deaths == null ? 0 : item.sum_total_deaths);\r\n    const chartDataSet = getAgeGroupChartDataset(covid19Deaths, totalDeaths);\r\n\r\n    return(\r\n        <div className=\"demographics\">\r\n            <div>\r\n                <ChartDisplay \r\n                chartType=\"bar\"\r\n                chartOptions = {CHART_OPTIONS_FOR_AGE_GROUPS}\r\n                chartDataSet = {chartDataSet}\r\n                chartLabels = {ageLabels}\r\n                chartId = \"DeathsByAgeGroup\"\r\n                />\r\n            </div>    \r\n        </div>\r\n\r\n    )\r\n\r\n}\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    deathsByAgeGroups: state.chartConfig.deathsByAgeGroups\r\n});\r\n\r\nexport default connect(mapStateToProps)(DeathsByAge);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './demographics.css';\r\nimport {STATE_INFO} from '../../utilities/states-meta-data';\r\nimport DeathByAgeGroup from './deaths-by-age.component' ;\r\n\r\nconst Demographics = ({selectedState, deathsByAgeGroups}) => {\r\n\r\n    const dataFetchedSuccessfully = Array.isArray(deathsByAgeGroups) && deathsByAgeGroups.length > 0;\r\n\r\n    return(\r\n        <div className=\"dashboard-component demographics\">\r\n            <div className=\"dashboard-component-title\">All Deaths By Age Group <span>for {STATE_INFO[selectedState].name}</span> <span>Since January 2020</span></div> \r\n            <div>\r\n                {dataFetchedSuccessfully ? \r\n                    <DeathByAgeGroup />\r\n                : \r\n                    <div>Problem fetching data from CDC site...</div>\r\n                }\r\n            </div>    \r\n            <div className=\"data-sources\">\r\n                Data:&nbsp; <span className=\"site-link\" onClick={()=> window.open(\"https://data.cdc.gov/NCHS/Provisional-COVID-19-Death-Counts-by-Sex-Age-and-S/9bhg-hcku\")}>Center For Disease Control</span><br/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    deathsByAgeGroups: state.chartConfig.deathsByAgeGroups\r\n});\r\n\r\nexport default connect(mapStateToProps)(Demographics);","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport \"./dashboard.css\";\r\n\r\nimport {getFreshData} from '../../utilities/data-fetching';\r\nimport {getCDCDataSet} from '../../utilities/chart-data-processing';\r\nimport {setCOVID19Data} from '../../redux/chart-config/chart-config.actions';\r\nimport {CDC_DATA_CHART_FIELD_GROUPS} from '../../utilities/data-fields';\r\nimport {URL_CDC_CASESDEATHS, URL_HEALTHDATA_HOSPITALDATA} from '../../utilities/urls';\r\nimport ChartConfiguration from '../chart-config/chart-config.component';\r\nimport CDCHistoryChart from '../cdc-history-chart/cdc-history-chart.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport DataTotals from '../data-totals/data-totals.component';\r\nimport Demographics from '../demographics/demographics.component';\r\n\r\nconst Covid19UsDashboard =({setCOVID19Data, dataRefreshedTimestamp, selectedState, selectedDateRange, cdcHistoryByJurisdiction,cdcHospitalDataByJurisdiction}) => {  \r\n\r\n    useEffect(() => {\r\n\r\n        //console.log(\"useEffect()...\");\r\n        async function loadData() {\r\n            try {   \r\n                if (!dataRefreshedTimestamp) {\r\n                    //console.log(\"retrievingData()...\");\r\n                    const freshData = await getFreshData();\r\n                    setCOVID19Data(freshData);\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        loadData();\r\n\r\n    },[setCOVID19Data,dataRefreshedTimestamp]);\r\n    \r\n    //console.log(\"dataRefreshedTimestamp=\",dataRefreshedTimestamp);\r\n    //console.log(\"selectedState=\",selectedState);\r\n    //console.log(\"selectedFields=\",selectedFields);\r\n    //console.log(\"selectedDateRange=\",selectedDateRange);\r\n\r\n    return (   \r\n\r\n        <div className=\"dashboard\">\r\n            <div className=\"page-header\">\r\n                <div className=\"page-title\"><span>COVID-19 Data Charts</span> <span>For United States</span></div>\r\n                <div className=\"page-subtitle\">50 U.S. States, D.C. and Puerto Rico</div>\r\n                <ChartConfiguration />\r\n            </div>\r\n            { !dataRefreshedTimestamp ? ( \r\n                <Spinner />\r\n            ) : (\r\n                <div className=\"page-layout\">\r\n                    <DataTotals/>                            \r\n                    <CDCHistoryChart \r\n                        dataSet={getCDCDataSet(selectedDateRange, cdcHistoryByJurisdiction, selectedState)} \r\n                        selectedFieldGroup={CDC_DATA_CHART_FIELD_GROUPS.dailyTotals} \r\n                        stateChartTitle=\"New Cases & Deaths\" \r\n                        chartId=\"newCasesDeaths\"\r\n                        dataSourceURL={URL_CDC_CASESDEATHS}\r\n                        dataSourceLabel=\"Center For Disease Control\" />\r\n                    <CDCHistoryChart \r\n                        dataSet={getCDCDataSet(selectedDateRange, cdcHospitalDataByJurisdiction, selectedState)} \r\n                        selectedFieldGroup={CDC_DATA_CHART_FIELD_GROUPS.hospitalData} \r\n                        stateChartTitle=\"Hospital Inpatient & ICU\" \r\n                        chartId=\"hospitalData\"\r\n                        dataSourceURL={URL_HEALTHDATA_HOSPITALDATA}\r\n                        dataSourceLabel=\"Healdata.gov\" />\r\n                    \r\n                    <Demographics/>\r\n                </div>\r\n            )}\r\n            <div className=\"page-footer\">\r\n                Data Sources:<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://www.census.gov/programs-surveys/popest.html\")}>U.S. Census Bureau</span><br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://data.cdc.gov\")}>Center For Disease Control</span><br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://healthdata.gov/\")}>Healthdata.gov</span><br/>\r\n                ~ ~ ~<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://tanyamiranda.github.io/\")}>Contact Developer</span><br/>\r\n            </div>\r\n        </div>\r\n    \r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    dataRefreshedTimestamp: state.chartConfig.dataRefreshedTimestamp,\r\n    selectedState: state.chartConfig.selectedState, \r\n    selectedDateRange: state.chartConfig.selectedDateRange,\r\n    cdcHistoryByJurisdiction: state.chartConfig.cdcHistoryByJurisdiction,\r\n    cdcHospitalDataByJurisdiction: state.chartConfig.cdcHospitalDataByJurisdiction\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCOVID19Data: (data) => dispatch(setCOVID19Data(data))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Covid19UsDashboard);","export const URL_CDC_CASESDEATHS = \"https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36\";\r\nexport const URL_HEALTHDATA_HOSPITALDATA = \"https://healthdata.gov/Hospital/COVID-19-Reported-Patient-Impact-and-Hospital-Capa/g62h-syeh\";\r\nexport const URL_CDC_DEATHSBYAGE=\"https://data.cdc.gov/NCHS/Provisional-COVID-19-Death-Counts-by-Sex-Age-and-S/9bhg-hcku\";\r\n","import React from 'react';\n\nimport Covid19UsDashboard from './components/dashboard/dashboard.component';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Covid19UsDashboard/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import ChartConfigTypes from './chart-config.types';\r\nimport {USA_IDENTIFIER, DATE_RANGES_DEFAULT} from '../../utilities/data-fields';\r\n\r\nconst INITIAL_STATE = {\r\n    statesHistoryData: null,\r\n    stateInformation: null,\r\n    countryHistoryData: null,\r\n    stateCountyInfo: null,\r\n    deathsByAgeGroups: null,\r\n    dataRefreshedTimestamp: null,\r\n    selectedState: null,\r\n    selectedDateRange: null,   \r\n    selectedFields: []    \r\n};\r\n\r\nconst chartConfigReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ChartConfigTypes.SET_COVID19_DATA: \r\n            return {\r\n                selectedState: USA_IDENTIFIER,\r\n                selectedDateRange: DATE_RANGES_DEFAULT,    \r\n                stateCountyInfo: action.payload.stateCountyInfo,\r\n                deathsByAgeGroups: action.payload.deathsByAgeGroups,\r\n                dataRefreshedTimestamp: (new Date()).toLocaleString(),\r\n                cdcHistoryByJurisdiction: action.payload.cdcHistoryByJurisdiction,\r\n                cdcTotalsByJurisdiction: action.payload.cdcTotalsByJurisdiction,\r\n                cdcHospitalDataByJurisdiction : action.payload.cdcHospitalDataByJurisdiction\r\n            }\r\n            \r\n        case ChartConfigTypes.SET_STATE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedState: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_DATE_RANGE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedDateRange: action.payload\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n        \r\n    }\r\n}\r\n\r\nexport default chartConfigReducer;","import {combineReducers} from 'redux';\r\n\r\nimport chartConfigReducer from './chart-config/chart-config.reducer';\r\n\r\nexport default combineReducers({\r\n    chartConfig: chartConfigReducer\r\n});\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewareObjects = [];\r\n\r\n//Only use logger in development environement\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewareObjects.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewareObjects));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}