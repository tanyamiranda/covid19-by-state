{"version":3,"sources":["components/spinner/spinning-blue-circle.gif","serviceWorker.js","components/chart-display/chart-display.component.jsx","utilities/formatting.js","components/chart-footer/chart-footer.component.jsx","utilities/data-fields.js","utilities/chart-options.js","components/cdc-chart/cdc-chart.component.jsx","utilities/data-sources.js","utilities/states-data.js","redux/chart-config/chart-config.types.js","components/chart-config/chart-config.component.jsx","redux/chart-config/chart-config.actions.js","components/spinner/spinner.component.jsx","components/data-totals/data-totals.component.jsx","utilities/data-fetching.js","utilities/chart-data-processing.js","components/dashboard/dashboard.component.jsx","App.js","redux/chart-config/chart-config.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","currentLineChart","ChartDisplay","chartType","chartOptions","chartLabels","chartDataSet","chartId","isTallChart","chartContainer","useRef","useState","chartInstance","setChartInstance","useEffect","current","chartConfig","type","options","data","labels","datasets","destroy","Chart","className","id","ref","getDisplayNumber","num","Intl","NumberFormat","useGrouping","format","getPercentage","partialNum","totalNum","percent","toFixed","getFormattedDateForFiltering","dateValue","date","Date","month","getMonth","day","getDate","year","getFullYear","length","Number","formatISODate","shrinkAgeGroupName","ageGroupName","toLowerCase","replace","replaceAll","formatDateListForChart","dateList","newDateList","Set","map","item","substr","forEach","dateString","substring","fullDate","push","ChartFooter","dataSource","onClick","open","url","label","comment","YEAR_KEYS","YEARS","DATA_FIELD_COLORS","DATA_FIELD_DISPLAY_NAMES","new_case","new_death","inpatient_beds_covid","icu_beds_covid","CHART_IDENTIFIER","CHART_META_DATA","DEATHS_BY_AGE","title","description","isGroupedByAge","VAX_FIRST_DOSE","VAX_COMPLETE_DOSE","EXCESS_DEATHS","EXCESS_DEATHS_PCT","HOSPITAL_DATA","AGE_GROUP_SUMMARY","CASES_DEATHS","CDC_FIELDS_FOR_CHART","CDC_AGE_GROUP_VALUES","CHART_OPTIONS_FOR_AGE_GROUP_SUMMARY","aspectRatio","maintainAspectRatio","responsive","display","tooltips","mode","intersect","bodyAlign","footerFontStyle","bodySpacing","titleMarginBottom","footerMarginTop","callbacks","tooltipItem","datasetIndex","value","index","parseInt","toLocaleString","footer","covidDeaths","allDeaths","parseFloat","hover","legend","position","boxWidth","fontSize","usePointStyle","padding","elements","point","radius","scales","xAxes","stacked","yAxes","ticks","callback","formatYAxisDisplay","labelText","getChartOptions","dateFormatForXAxis","displayMonthsFormatInToolTip","displayPercentValuesOnChart","displayNegativeValuesOnChart","displayMonthFormat","displayPercentageValue","displayNegativeValues","interaction","axis","gridLines","lineWidth","zeroLineWidth","zeroLineColor","color","time","unit","tooltipFormat","displayFormats","week","scaleLabel","min","undefined","text","getTimeSeriesChartOptions","connect","chartObject","displaySummary","isFullWidthChart","dataFetchedSuccessfully","isDataLoaded","isDataAvailable","errorMessage","chartTitle","getDataSource","selectedState","key","dataTotal","STATIC_STATE_DATA","name","population","extra","getStateCodes","output","rec","getStateData","stateCode","find","ChartConfigTypes","SET_STATE_SELECTION","SET_DATE_RANGE_SELECTION","SET_FIELD_SELECTION","SET_COVID19_DATA","SET_STATE_HISTORY_DATA","SET_YEAR_SELECTION","selectedYear","dispatch","setStateSelection","userSelectedState","payload","setYearSelection","userSelectedYear","statesKeys","defaultValue","onChange","event","target","Spinner","src","SpinnerImage","alt","stateInformation","cdcTotalsByJurisdiction","Array","isArray","stateInfo","jurisdictionData","percentDeath","percentHospitalization","percentICU","percentDeathOfPositive","total_deaths","inpatient_beds","icu_beds","total_cases","CDC_QUERY_ACCESS_TOKEN","getFreshData","a","fetchJsonData","dataHistoryByState","dataHistoryUSA","cdcHistoryByJurisdiction","concat","dataCasesDeathsTotals","getTotalsForEachState","dataHospitalByState","dataHospitalUSA","dataHospitalNYCOnly","cdcHospitalDataByJurisdiction","lastDate","reduce","prev","nycLastDate","dataHospitalTotals","filter","getTotalsByJurisdiction","deathsByAgeGroups","cdcVaxByAgeGroup","cdcExcessDeathsByAgeGroups","dataRefreshTimestamp","cdcExcessDeathsByAgeGroup","cdcDeathsByAgeGroup","json","fetch","response","ok","Error","statusText","dataCasesDeathsByState","totalsByState","casesDeathsData","hospitalData","stateHistoryData","totals","record","stateTotal","newStateTotal","getCDCHistoryDataBySelection","monthsSelected","search","monthsBack","lenth","dateRange","getDateRangeValues","startDate","endDate","getCDCDataSetByDateRange","getCDCDataSetByYear","stateData","sort","b","setMonth","setDate","getChartObjectByChartId","cdcDataSet","filteredData","getChartObjectForAgeGroupSummary","getChartObjectForDataGroupedByAge","isDataAvailableByAgeGroup","getChartObjectForData","isDateRangeMoreThanOneMonth","dataHasValues","ageGroupRec","monthsInData","monthCount","monthCountRec","dataSet","ageGroupData","summary","covid_19_deaths","ageGroupSum","age_group","sum_covid_19_deaths","sum_total_deaths","age_group_sum","getDeathsByAgeGroupSummary","backgroundColor","ageGroupNameList","newList","newGroupName","shrinkAgeGroupNameList","ageGroupsInData","fieldName","ageGroupId","dataValues","chartRec","borderColor","borderWidth","fill","chartDateList","fieldNames","row","fieldData","setCOVID19Data","freshData","loadData","App","INITIAL_STATE","selectedFields","chartConfigReducer","action","combineReducers","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dc7ac68d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinning-blue-circle.cbcc3646.gif\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Chart from 'chart.js';\r\nimport './chart-display.css';\r\n\r\n// Necessary to be able to clear previous charts\r\nlet currentLineChart = [];\r\n\r\nconst ChartDisplay = ({chartType, chartOptions, chartLabels, chartDataSet, chartId, isTallChart}) => {\r\n    const chartContainer = useRef(null);\r\n    const [chartInstance, setChartInstance] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        if (chartContainer && chartContainer.current) {\r\n            const chartConfig = {\r\n                type: chartType,\r\n                options: chartOptions,\r\n                data: {\r\n                    labels: chartLabels,\r\n                    datasets: chartDataSet\r\n                }            \r\n            }\r\n\r\n            // Destroy previous chart if it exists \r\n            if (typeof currentLineChart[chartId] !== \"undefined\") currentLineChart[chartId].destroy();\r\n\r\n            currentLineChart[chartId] = new Chart(chartContainer.current, chartConfig);\r\n            setChartInstance(currentLineChart);\r\n            \r\n        }\r\n    }, [chartContainer, chartType, chartOptions, chartLabels, chartDataSet, chartId]);\r\n    \r\n    return (\r\n        <div className={\"chart-display\" + (isTallChart ? \" tall-chart-display\" : \"\") }>\r\n            <canvas id={!chartInstance ? \"0\" : chartId } ref={chartContainer} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartDisplay;\r\n","export const getDisplayNumber = (num) => {\r\n    if (!num)\r\n        num = 0;\r\n    return Intl.NumberFormat('en-US', {useGrouping: true}).format(num);\r\n}\r\n\r\nexport const getPercentage = (partialNum, totalNum) => {\r\n\r\n    if (totalNum===0)\r\n        return \"0\";\r\n\r\n    var percent = ((partialNum / totalNum) * 100).toFixed(2);\r\n    if (percent === \"0.00\")\r\n        percent = \"< 0.01\"\r\n\r\n    return percent + \"%\";\r\n}\r\n\r\nexport const getPercentageText = (partialNum, totalNum) => {\r\n\r\n    if (totalNum===0)\r\n        return partialNum;\r\n\r\n    var percent = ((partialNum / totalNum) * 100).toFixed(2);\r\n    if (percent === \"0.00\")\r\n        percent = \"< 0.01\"\r\n        \r\n    return percent + \"% of \" + getDisplayNumber(totalNum);\r\n}\r\n\r\nexport const getFormattedDateForFiltering = (dateValue) => {\r\n  \r\n    const date = new Date(dateValue);\r\n\r\n    let month = \"\" + (date.getMonth() + 1);\r\n    let day = \"\" + date.getDate();\r\n    let year = \"\" + date.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return Number(year + month + day);\r\n}\r\n\r\nexport const formatISODate = (dateValue) => {\r\n\r\n    const date = new Date(dateValue);\r\n\r\n    let month = \"\" + (date.getMonth() + 1);\r\n    let day = \"\" + date.getDate();\r\n    let year = \"\" + date.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return year + \"-\" + month + \"-\" +  day + \"T00:00:00.000\";\r\n\r\n}\r\n\r\nexport const shrinkAgeGroupName = (ageGroupName) => {\r\n    \r\n    return ageGroupName.toLowerCase()\r\n        .replace(\"years and over\",\"+\")\r\n        .replace(\"years\",\"\")\r\n        .replace(\"year\",\"\")\r\n        .replace(\"Under\",\"<\")\r\n        .replaceAll(\" \",\"\"); \r\n}\r\n\r\nexport const shrinkAgeGroupNameList = (ageGroupNameList) => {\r\n    \r\n    const newList = [];\r\n\r\n    ageGroupNameList.forEach(rec => {\r\n        const newGroupName = shrinkAgeGroupName(rec)\r\n        newList.push(newGroupName);\r\n    });\r\n\r\n    return newList;\r\n}\r\n\r\nexport const formatDateListForChart = (dateList) => {\r\n\r\n    const newDateList = [];\r\n\r\n    const uniqueDates = [...new Set(dateList.map(item => item.substr(0,10)))];\r\n\r\n    uniqueDates.forEach(dateString => {\r\n        const year = Number(dateString.substring(2,4));\r\n        const month = Number(dateString.substring(5,7));\r\n        const day = Number(dateString.substring(8,10));\r\n        const fullDate = new Date(month + \"/\" + day + \"/\" + year)\r\n        newDateList.push(fullDate);\r\n    });\r\n\r\n    return newDateList;\r\n}","import React from 'react'\r\n\r\nimport './chart-footer.css';\r\n\r\nconst ChartFooter = ({dataSource}) => {\r\n\r\n    return (\r\n        <div>\r\n            {dataSource != null ?\r\n                <div className=\"data-sources\">Source:&nbsp; \r\n                    <span className=\"site-link\" onClick={()=> window.open(dataSource.url)}>{dataSource.label}</span>\r\n                    <span className=\"footer-comment\"><br/>{dataSource.comment}</span>\r\n                </div>\r\n                :\r\n                <span></span>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default ChartFooter;","export const YEARS_DEFAULT = \"months-6\";\r\nexport const USA_IDENTIFIER = \"USA\";\r\nexport const NYC_IDENTIFIER = \"NYC\";\r\n\r\n/*\r\n This is needed to maintain descending year order.\r\n Using Object.keys() to get keys from YEARS sorts\r\n the years in ascending order.\r\n*/\r\nexport const YEAR_KEYS = [\r\n    \"months-6\",\r\n    \"months-9\",\r\n    \"months-12\",\r\n    \"2021\", \r\n    \"2020\",\r\n    \"0\"\r\n];\r\n\r\nexport const YEARS = {\r\n    \"months-6\": \"Last 6 months\",\r\n    \"months-9\": \"Last 9 months\",\r\n    \"months-12\": \"Last 12 months\",\r\n    \"2021\": \"All 2021\",\r\n    \"2020\": \"All 2020\",\r\n    \"0\": \"All Time\",\r\n}\r\n\r\nexport const DATA_FIELD_COLORS = [\r\n    'green',\r\n    'red',\r\n    'blue',\r\n    'orange',\r\n    'pink',\r\n    'lime',\r\n    'black',\r\n    'cyan',\r\n    'purple',\r\n    'brown',\r\n    'voilet',\r\n    'chartreuse',\r\n    'CadetBlue',\r\n    'darkgreen',\r\n    'DarkGoldenRod',\r\n    'darkslategray',\r\n    'crimson',\r\n    'Turquoise',\r\n    'steelblue',\r\n    'sand',\r\n    'salmon'\r\n];\r\n\r\n/**\r\n * User-friendly display names for specific fields from CDC\r\n */\r\nexport const DATA_FIELD_DISPLAY_NAMES = {   \r\n    new_case: \"New Cases\",\r\n    new_death: \"New Deaths\",\r\n    inpatient_beds_covid: \"Inpatient\",\r\n    icu_beds_covid: \"ICU\"\r\n};\r\n\r\n/**\r\n * Each Chart has an identifier that is used throught the code\r\n */\r\nexport const CHART_IDENTIFIER = {\r\n    DEATHS_BY_AGE: \"DEATHS_BY_AGE\",\r\n    VAX_FIRST_DOSE: \"VAX_FIRST_DOSE\",\r\n    VAX_COMPLETE_DOSE: \"VAX_COMPLETE_DOSE\",\r\n    EXCESS_DEATHS: \"EXCESS_DEATHS\",\r\n    EXCESS_DEATHS_PCT: \"EXCESS_DEATHS_PCT\",\r\n    HOSPITAL_DATA: \"HOSPITAL_DATA\",\r\n    AGE_GROUP_SUMMARY: \"AGE_GROUP_SUMMARY\",\r\n    CASES_DEATHS: \"CASES_DEATHS\" \r\n}\r\n\r\nexport const CHART_META_DATA = {\r\n    DEATHS_BY_AGE: {\r\n        title: \"Covid Deaths By Age\",\r\n        description: \"Deaths involving Covid-19 by age group.\",\r\n        chartType: \"line\",\r\n        isGroupedByAge: true\r\n    },\r\n    VAX_FIRST_DOSE: {\r\n        title:\"% Vaxed By Age - First Dose\",\r\n        description: \"Percent of people vaccinated with first dosage by age group.\",\r\n        chartType: \"line\",\r\n        isGroupedByAge: true\r\n    },\r\n    VAX_COMPLETE_DOSE: {\r\n        title: \"% Vaxed By Age - Completed\",\r\n        description: \"Percent of people vaccinated with complete dosage by age group.\",\r\n        chartType: \"line\",\r\n        isGroupedByAge: true\r\n    },\r\n    EXCESS_DEATHS: {\r\n        title: \"Excess Deaths By Age - Weighted\",\r\n        description: \"All excess Deaths above or below expected range by age group.\",\r\n        chartType: \"line\",\r\n        isGroupedByAge: true\r\n    },\r\n    EXCESS_DEATHS_PCT: {\r\n        title: \"% Excess Deaths By Age - Weighted\",\r\n        description: \"Weighted percentage of all excess Deaths above or below expected range by age group.\",\r\n        chartType: \"line\",\r\n        isGroupedByAge: true\r\n    },\r\n    HOSPITAL_DATA: {\r\n        title: \"New Hospital Inpatient & ICU\",\r\n        description: \"Patients admitted to inpatient care and ICU to treat Covid-19 symptoms.\",\r\n        chartType: \"line\",\r\n        isGroupedByAge: false\r\n    },\r\n    AGE_GROUP_SUMMARY: {\r\n        title: \"All Deaths by Age Summary\",\r\n        description: \"Summary of all deaths by age group alongside Covid-19 deaths for comparison.\",\r\n        chartType: \"bar\"\r\n    },\r\n    CASES_DEATHS: {\r\n        title:\"New Cases & Deaths\",\r\n        description: \"New confirmed and probable Covid-19 cases and deaths.\",\r\n        chartType: \"line\",\r\n        isGroupedByAge: false\r\n    } \r\n}\r\n\r\n/**\r\n * List of fields used in time series charts.\r\n * Date grouped by age will only show first field per age group.\r\n */\r\nexport const CDC_FIELDS_FOR_CHART = {\r\n    DEATHS_BY_AGE: [\"covid_19_deaths\"],\r\n    VAX_FIRST_DOSE: [\"first_dose_pct\"],\r\n    VAX_COMPLETE_DOSE: [\"completed_pct\"],\r\n    EXCESS_DEATHS: [\"covid19_weighted\"],\r\n    EXCESS_DEATHS_PCT: [\"percent_above_average_weighted\"],\r\n    HOSPITAL_DATA: [\"inpatient_beds_covid\",\"icu_beds_covid\"],\r\n    CASES_DEATHS: [\"new_case\",\"new_death\"],\r\n    AGE_GROUP_SUMMARY: []\r\n}\r\n\r\n/**\r\n * Data grouped by age must have age groups predefined.\r\n * Key matches value from CHART_IDENTIFIER\r\n */\r\nexport const CDC_AGE_GROUP_VALUES = {\r\n    DEATHS_BY_AGE : [\r\n        '0-17 years', \r\n        '18-29 years', \r\n        '30-39 years',\r\n        '40-49 years',\r\n        '50-64 years',\r\n        '65-74 years',\r\n        '75-84 years',\r\n        '85 years and over'],\r\n    AGE_GROUP_SUMMARY : [\r\n        '0-17 years', \r\n        '18-29 years', \r\n        '30-39 years',\r\n        '40-49 years',\r\n        '50-64 years',\r\n        '65-74 years',\r\n        '75-84 years',\r\n        '85 years and over'],\r\n    VAX_FIRST_DOSE: [\r\n        \"5 - 11 Years\",\r\n        \"12 - 17 Years\",\r\n        \"18 - 24 Years\",\r\n        \"25 - 39 Years\",\r\n        \"40 - 49 Years\",\r\n        \"50 - 64 Years\",\r\n        \"65 - 74 Years\",\r\n        \"75+ Years\"\r\n    ],\r\n    VAX_COMPLETE_DOSE: [\r\n        \"5 - 11 Years\",\r\n        \"12 - 17 Years\",\r\n        \"18 - 24 Years\",\r\n        \"25 - 39 Years\",\r\n        \"40 - 49 Years\",\r\n        \"50 - 64 Years\",\r\n        \"65 - 74 Years\",\r\n        \"75+ Years\"\r\n    ],\r\n    EXCESS_DEATHS: [\r\n        \"0-14 Years\",\r\n        \"15-19 Years\",\r\n        \"20-24 Years\",\r\n        \"25-29 Years\",\r\n        \"30-34 Years\",\r\n        \"35-39 Years\",\r\n        \"40-44 Years\",\r\n        \"45-49 Years\",\r\n        \"50-54 Years\",\r\n        \"55-59 Years\",\r\n        \"60-64 Years\",\r\n        \"65-69 Years\",\r\n        \"70-74 Years\",\r\n        \"75-79 Years\",\r\n        \"80-84 Years\",\r\n        \"85+\"\r\n    ],\r\n    EXCESS_DEATHS_PCT: [\r\n        \"0-14 Years\",\r\n        \"15-19 Years\",\r\n        \"20-24 Years\",\r\n        \"25-29 Years\",\r\n        \"30-34 Years\",\r\n        \"35-39 Years\",\r\n        \"40-44 Years\",\r\n        \"45-49 Years\",\r\n        \"50-54 Years\",\r\n        \"55-59 Years\",\r\n        \"60-64 Years\",\r\n        \"65-69 Years\",\r\n        \"70-74 Years\",\r\n        \"75-79 Years\",\r\n        \"80-84 Years\",\r\n        \"85+\"\r\n    ]\r\n};","import { CHART_IDENTIFIER } from \"./data-fields\";\r\n\r\nexport const getTimeSeriesChartOptions = (displayMonthFormat=false, displayPercentageValue=false, displayNegativeValues=false, dateFormatForXAxis) => {\r\n    \r\n    return {\r\n        responsive: true,\r\n        aspectRatio: 1,\r\n        maintainAspectRatio: false,\r\n        title: { display: false},\r\n        tooltips: {\r\n            mode: 'index', \r\n            intersect: false,\r\n            bodyAlign: 'left',\r\n            position: 'nearest',\r\n            bodySpacing: 5,\r\n            callbacks: {\r\n                label: function(tooltipItem, data) {\r\n                    var type = data.datasets[tooltipItem.datasetIndex].label;\r\n                    var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n                    var displayText = \"\"; \r\n                    if (displayPercentageValue)\r\n                        displayText = type + \" : \" + parseFloat(value) + \"%\"\r\n                    else   \r\n                        displayText = type + \" : \" + parseInt(value).toLocaleString()\r\n\r\n                    return displayText;\r\n                }\r\n            }\r\n        },\r\n        interaction: {\r\n            intersect: false,\r\n            axis: 'x'\r\n        },\r\n        legend: {\r\n            position:'top', \r\n            labels: {\r\n                boxWidth:5, \r\n                fontSize:14,\r\n                usePointStyle:true, \r\n                padding:15\r\n            }\r\n        },\r\n        elements: {\r\n            point:{\r\n                radius: 0\r\n            }\r\n        },\r\n        scales: {          \r\n            xAxes: [{\r\n                display: true,\r\n                type: 'time',\r\n                gridLines: {\r\n                    display:true,\r\n                    lineWidth: 1,\r\n                    zeroLineWidth: 1,\r\n                    zeroLineColor: '#e8e8e8',\r\n                    color: '#e8e8e8'\r\n                },\r\n                time: {\r\n                    unit: dateFormatForXAxis ,\r\n                    tooltipFormat: displayMonthFormat ? \"MMM YYYY\" : 'MM/DD/YYYY',\r\n                    displayFormats: {\r\n                        month: 'MMM YYYY',\r\n                        week : 'MM/DD/YYYY'\r\n                    }\r\n                },\r\n                scaleLabel: {\r\n                    display: true\r\n                },\r\n                ticks: {\r\n                    min: 0\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                display: true,\r\n                scaleLabel: {\r\n                    display: false\r\n                },\r\n                ticks: {\r\n                    min: displayNegativeValues ? undefined : 0, \r\n                    callback: function(label) {\r\n\r\n                        let text = label;\r\n                        if (displayPercentageValue)\r\n                            text = text +\"%\"\r\n                        else \r\n                            text = formatYAxisDisplay(label)\r\n\r\n                        return text;\r\n                    }                \r\n                }\r\n            }]\r\n        }\r\n    }\r\n}\r\n\r\nexport const CHART_OPTIONS_FOR_AGE_GROUP_SUMMARY = {\r\n    aspectRatio: 1,\r\n    maintainAspectRatio: false,\r\n    responsive: true,\r\n    title: { display: false},\r\n    tooltips: {\r\n        mode: 'index', \r\n        intersect: false,\r\n        bodyAlign: 'left',\r\n        footerFontStyle: 'normal',\r\n        bodySpacing: 5,\r\n        titleMarginBottom: 10,\r\n        footerMarginTop: 10,\r\n        callbacks: {\r\n            title: function(tooltipItem) {\r\n                return \"Ages \" + tooltipItem[0].label \r\n            },\r\n\r\n            label: function(tooltipItem, data) {\r\n                var type = data.datasets[tooltipItem.datasetIndex].label;\r\n                var value = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\r\n                return type + \" : \" + parseInt(value).toLocaleString();\r\n            },\r\n\r\n            footer: function(tooltipItem) {\r\n                const covidDeaths = tooltipItem[0].value;\r\n                const allDeaths = tooltipItem[1].value;\r\n                const percent = parseFloat((covidDeaths/allDeaths) * 100).toFixed(1)+\"%\";\r\n                return [percent + \" of all deaths\",\"due to COVID-19\"] ;\r\n            }\r\n\r\n          }\r\n    },\r\n    hover: {mode: 'nearest', intersect: true},\r\n    legend: {position:'top', labels: {boxWidth:5, fontSize:14, usePointStyle:true, padding: 10}},\r\n    elements: {\r\n        point:{\r\n            radius: 0\r\n        }\r\n    },\r\n    \r\n    scales: {\r\n        xAxes:[{\r\n            stacked: true\r\n        }],\r\n        yAxes:[{\r\n            // stacked:false - places bars in FRONT of each other instead of on TOP of each other\r\n            // if set to true, the two bars are combined into one bar with a aggregate total.\r\n            stacked: false, \r\n            ticks: {\r\n                callback: function(label) {\r\n                    return formatYAxisDisplay(label);\r\n                }\r\n              }\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n// Display K for thousands, M for millions\r\n// Instead of 200000 display 200K\r\n// Instead of 1900000 display 1M\r\nconst formatYAxisDisplay = (labelText) => {\r\n\r\n    let label = Number(labelText);\r\n    let newLabel = \"\";\r\n\r\n    if (label >= 1000000) \r\n        newLabel = label / 1000000 + 'M';\r\n    else if (label >= 10000) \r\n        newLabel = label / 1000 + 'K';\r\n    else \r\n        newLabel = label;\r\n\r\n    return newLabel;\r\n}\r\n\r\n\r\nexport const getChartOptions = (chartId,dateFormatForXAxis) => {\r\n\r\n    if (chartId === CHART_IDENTIFIER.AGE_GROUP_SUMMARY)\r\n        return CHART_OPTIONS_FOR_AGE_GROUP_SUMMARY;\r\n    else {\r\n\r\n        let displayMonthsFormatInToolTip= false;\r\n        let displayPercentValuesOnChart= false;\r\n        let displayNegativeValuesOnChart= false;\r\n\r\n        if (chartId === CHART_IDENTIFIER.VAX_FIRST_DOSE || chartId===CHART_IDENTIFIER.VAX_COMPLETE_DOSE || chartId === CHART_IDENTIFIER.EXCESS_DEATHS_PCT)\r\n            displayPercentValuesOnChart = true;\r\n        \r\n        if (chartId === CHART_IDENTIFIER.EXCESS_DEATHS_PCT || chartId === CHART_IDENTIFIER.EXCESS_DEATHS)\r\n            displayNegativeValuesOnChart = true;\r\n\r\n        if (chartId === CHART_IDENTIFIER.DEATHS_BY_AGE) \r\n            displayMonthsFormatInToolTip=true;\r\n\r\n        \r\n        const chartOptions = getTimeSeriesChartOptions(displayMonthsFormatInToolTip,displayPercentValuesOnChart,displayNegativeValuesOnChart,dateFormatForXAxis);\r\n\r\n        return chartOptions;\r\n\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './cdc-chart.css';\r\n\r\nimport ChartDisplay from '../chart-display/chart-display.component';\r\n\r\nimport {getDisplayNumber} from '../../utilities/formatting';\r\nimport ChartFooter from '../chart-footer/chart-footer.component';\r\nimport { getChartOptions } from '../../utilities/chart-options';\r\nimport { getDataSource } from '../../utilities/data-sources';\r\nimport { CHART_IDENTIFIER, CHART_META_DATA, NYC_IDENTIFIER } from '../../utilities/data-fields';\r\n\r\nconst CDCChart = ({chartConfig, chartObject, displaySummary=false, isFullWidthChart=false}) => {  \r\n    \r\n    const dataFetchedSuccessfully = chartConfig.isDataLoaded;\r\n    const isDataAvailable = chartObject.isDataAvailable;\r\n    \r\n    let errorMessage = \"\";\r\n\r\n    if (dataFetchedSuccessfully && isDataAvailable) {\r\n        errorMessage = \"Problem fetching data from CDC site.\"\r\n    }\r\n    \r\n    const chartType = CHART_META_DATA[chartObject.chartId].chartType;\r\n    const chartTitle = CHART_META_DATA[chartObject.chartId].title;\r\n    const chartOptions= getChartOptions(chartObject.chartId,chartObject.dateFormatForXAxis);\r\n    const dataSourceId = chartObject.chartId === CHART_IDENTIFIER.HOSPITAL_DATA && chartConfig.selectedState === NYC_IDENTIFIER ? NYC_IDENTIFIER : chartObject.chartId;\r\n    const dataSource = getDataSource(dataSourceId);\r\n\r\n    return (\r\n        <div className={\"dashboard-component state-history-chart\" + (isFullWidthChart ? \" full-width-component\" : \"\") }>\r\n            <div className=\"dashboard-component-title\">\r\n                <span>{chartTitle}</span>\r\n            </div>\r\n            {dataFetchedSuccessfully && isDataAvailable ? \r\n                    <ChartDisplay\r\n                    chartType= {chartType}\r\n                    chartOptions = {chartOptions}\r\n                    chartLabels = {chartObject.chartLabels} \r\n                    chartDataSet = {chartObject.chartDataSet}\r\n                    chartId = {chartObject.chartId}\r\n                    isTallChart = {isFullWidthChart}\r\n                    />\r\n            : \r\n                <div>{errorMessage}</div>\r\n            }\r\n            {displaySummary ?\r\n                <div className='chart-summary'>\r\n                    <div className='summary-title'>Totals for Selection</div>\r\n                    {chartObject.chartDataSet.map((item) =>\r\n                        <div className='chart-summary-row' key={item.label}> \r\n                            <div className='label'>{item.label}</div>\r\n                            <div className='value'>{getDisplayNumber(item.dataTotal)}</div>\r\n                        </div>    \r\n                    )}\r\n                </div>\r\n            :\r\n                <div></div>\r\n            }\r\n            <div>\r\n                <ChartFooter dataSource = {dataSource}/>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    chartConfig: state.chartConfig\r\n});\r\n\r\nexport default connect(mapStateToProps)(CDCChart);","import {CHART_IDENTIFIER} from \"./data-fields\";\r\n\r\nexport const getDataSource = (chartId) => {\r\n\r\n    switch (chartId){\r\n        case CHART_IDENTIFIER.CASES_DEATHS : {\r\n            return {\r\n                url: \"https://data.cdc.gov/Case-Surveillance/United-States-COVID-19-Cases-and-Deaths-by-State-o/9mfq-cb36\",\r\n                label: \"Center for Disease Control\",\r\n                comment: \"\"\r\n            }\r\n        }\r\n\r\n        case CHART_IDENTIFIER.HOSPITAL_DATA : {\r\n            return {\r\n                url: \"https://healthdata.gov/Hospital/COVID-19-Reported-Patient-Impact-and-Hospital-Capa/g62h-syeh\",\r\n                label: \"Center for Disease Control\",\r\n                comment: \"\"\r\n            }\r\n        }\r\n\r\n        case \"NYC\" : {\r\n            return {\r\n                url: \"https://health.data.ny.gov/Health/New-York-State-Statewide-COVID-19-Hospitalizations/jw46-jpb7/data\",\r\n                label: \"Healthdata.gov\",\r\n                comment: \"\"\r\n            }\r\n        }\r\n\r\n        case CHART_IDENTIFIER.DEATHS_BY_AGE:\r\n        case CHART_IDENTIFIER.AGE_GROUP_SUMMARY: {\r\n            return {\r\n                url: \"https://data.cdc.gov/NCHS/Provisional-COVID-19-Death-Counts-by-Sex-Age-and-S/9bhg-hcku\",\r\n                label: \"Center for Disease Control\",\r\n                comment: \"Note: This dataset is updated weekly.\"\r\n            }\r\n        }\r\n\r\n        case CHART_IDENTIFIER.VAX_FIRST_DOSE:\r\n        case CHART_IDENTIFIER.VAX_COMPLETE_DOSE : {\r\n            return {\r\n                url: \"https://data.cdc.gov/Vaccinations/COVID-19-Vaccination-and-Case-Trends-by-Age-Group-/gxj9-t96f\",\r\n                label: \"Center for Disease Control\",\r\n                comment: \"Note: Available at U.S. level only. State level data not available.\"\r\n            }\r\n        }\r\n\r\n        case CHART_IDENTIFIER.EXCESS_DEATHS: \r\n        case CHART_IDENTIFIER.EXCESS_DEATHS_PCT : {\r\n            return {\r\n                url: \"https://data.cdc.gov/NCHS/AH-Excess-Deaths-by-Sex-Age-and-Race-and-Hispanic-/m74n-4hbs\",\r\n                label: \"Center for Disease Control\",\r\n                comment: \"Note: Available at U.S. level only. State level data not available.\"\r\n            }\r\n        }\r\n\r\n        default : return null;\r\n    }\r\n}\r\n","/**\r\n * Population data taken from US Census estimates for July 2020. \r\n * https://www2.census.gov/programs-surveys/decennial/2020/data/apportionment/population-change-data-table.pdf\r\n * \r\n * This data changes approx every 18 months. No need to scrub every time.\r\n * \"USA\" population = US Total in pdf + PR Total\r\n */\r\n\r\nexport const STATIC_STATE_DATA = [\r\n    {state:\"USA\", name:\"United States\", population:334735155},\r\n    {state:\"AK\", name:\"Alaska\", population:733391},\r\n    {state:\"AL\", name:\"Alabama\", population:5024279},\r\n    {state:\"AR\", name:\"Arkansas\", population:3011524},\r\n    {state:\"AZ\", name:\"Arizona\", population:7151502},\r\n    {state:\"CA\", name:\"California\", population:39538223},\r\n    {state:\"CO\", name:\"Colorado\", population:5773714},\r\n    {state:\"CT\", name:\"Connecticut\", population:3605944},\r\n    {state:\"DC\", name:\"District of Columbia\", population:689545},\r\n    {state:\"DE\", name:\"Delaware\", population:989948},\r\n    {state:\"FL\", name:\"Florida\", population:21538187},\r\n    {state:\"GA\", name:\"Georgia\", population:10711908},\r\n    {state:\"HI\", name:\"Hawaii\", population:1455271},\r\n    {state:\"IA\", name:\"Iowa\", population:3190369},\r\n    {state:\"ID\", name:\"Idaho\", population:1839106},\r\n    {state:\"IL\", name:\"Illinois\", population:12812508},\r\n    {state:\"IN\", name:\"Indiana\", population:6785528},\r\n    {state:\"KS\", name:\"Kansas\", population:2937880},\r\n    {state:\"KY\", name:\"Kentucky\", population:4505836},\r\n    {state:\"LA\", name:\"Louisiana\", population:4657757},\r\n    {state:\"MA\", name:\"Massachusetts\", population:7029917},\r\n    {state:\"MD\", name:\"Maryland\", population:6177224},\r\n    {state:\"ME\", name:\"Maine\", population:1362359},\r\n    {state:\"MI\", name:\"Michigan\", population:10077331},\r\n    {state:\"MN\", name:\"Minnesota\", population:5706494},\r\n    {state:\"MO\", name:\"Missouri\", population:6154913},\r\n    {state:\"MS\", name:\"Mississippi\", population:2961279},\r\n    {state:\"MT\", name:\"Montana\", population:1084225},\r\n    {state:\"NC\", name:\"North Carolina\", population:10439388},\r\n    {state:\"ND\", name:\"North Dakota\", population:779094},\r\n    {state:\"NE\", name:\"Nebraska\", population:1961504},\r\n    {state:\"NH\", name:\"New Hampshire\", population:1377529},\r\n    {state:\"NJ\", name:\"New Jersey\", population:9288994},\r\n    {state:\"NM\", name:\"New Mexico\", population:2117522},\r\n    {state:\"NV\", name:\"Nevada\", population:3104614},\r\n    {state:\"NY\", name:\"New York\", population:20201249, extra:\" (Excludes NYC)\"},\r\n    {state:\"NYC\", name:\"New York City\", population:8804190},\r\n    {state:\"OH\", name:\"Ohio\", population:11799448},\r\n    {state:\"OK\", name:\"Oklahoma\", population:3959353},\r\n    {state:\"OR\", name:\"Oregon\", population:4237256},\r\n    {state:\"PA\", name:\"Pennsylvania\", population:13002700},\r\n    {state:\"PR\", name:\"Puerto Rico\", population:3285874},\r\n    {state:\"RI\", name:\"Rhode Island\", population:1097379},\r\n    {state:\"SC\", name:\"South Carolina\", population:5118425},\r\n    {state:\"SD\", name:\"South Dakota\", population:886667},\r\n    {state:\"TN\", name:\"Tennessee\", population:6910840},\r\n    {state:\"TX\", name:\"Texas\", population:29145505},\r\n    {state:\"UT\", name:\"Utah\", population:3271616},\r\n    {state:\"VA\", name:\"Virginia\", population:8631393},\r\n    {state:\"VT\", name:\"Vermont\", population:643077},\r\n    {state:\"WA\", name:\"Washington\", population:7705281},\r\n    {state:\"WI\", name:\"Wisconsin\", population:5893718},\r\n    {state:\"WV\", name:\"West Virginia\", population:1793716},\r\n    {state:\"WY\", name:\"Wyoming\", population:576851}\r\n];\r\n\r\n\r\nexport const getStateCodes = () => {\r\n    var output = [];\r\n    STATIC_STATE_DATA.forEach((rec) => {\r\n        output.push(rec.state);\r\n    });\r\n    return output;\r\n}\r\n\r\nexport const getStateData =(stateCode) => {\r\n    return STATIC_STATE_DATA.find(rec => rec.state === stateCode)\r\n}\r\n","const ChartConfigTypes = {\r\n    SET_STATE_SELECTION : \"SET_STATE_SELECTION\",\r\n    SET_DATE_RANGE_SELECTION : \"SET_DATE_RANGE_SELECTION\",\r\n    SET_FIELD_SELECTION : \"SET_FIELD_SELECTION\",\r\n    SET_COVID19_DATA : \"SET_COVID19_DATA\",\r\n    SET_STATE_HISTORY_DATA: \"SET_STATE_HISTORY_DATA\",\r\n    SET_YEAR_SELECTION : \"SET_YEAR_SELECTION\"\r\n};\r\n\r\nexport default ChartConfigTypes;","import React from 'react'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './chart-config.css';\r\nimport {YEARS, YEARS_DEFAULT, YEAR_KEYS} from '../../utilities/data-fields';\r\nimport {getStateCodes, getStateData } from '../../utilities/states-data';\r\nimport {setStateSelection, setYearSelection} from '../../redux/chart-config/chart-config.actions';\r\n\r\nconst ChartConfiguration = ({selectedState, selectedYear, setStateSelection, setYearSelection}) => {\r\n\r\n    const statesKeys = getStateCodes();\r\n    \r\n    const handleStateSelection = (event) => {\r\n        setStateSelection(event.target.value);\r\n    }\r\n\r\n    const handleYearSelection = (event) => {\r\n        setYearSelection(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-configuration\">\r\n            <div className=\"top-section\">\r\n                \r\n                <span className=\"config-section\">\r\n                    <select name=\"stateSelection\" defaultValue={!selectedState ? \"USA\" : selectedState}  onChange={handleStateSelection}>\r\n                        {statesKeys.map ((item) => \r\n                            <option key={item} value={item} >{getStateData(item).name + (getStateData(item).extra != null ? getStateData(item).extra : \"\")}</option>\r\n                        )}\r\n                    </select>\r\n                </span>\r\n                \r\n                <span className=\"config-year\">\r\n                    <select name=\"yearSelection\" defaultValue={!selectedYear ? YEARS_DEFAULT : selectedYear}  onChange={handleYearSelection}>\r\n                        {YEAR_KEYS.map ((item) => \r\n                            <option key={item} value={item} >{YEARS[item]}</option>\r\n                        )}\r\n                    </select>\r\n                </span>\r\n                \r\n            </div>            \r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    selectedYear: state.chartConfig.selectedYear\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setStateSelection: (userSelectedState) => dispatch(setStateSelection(userSelectedState)),\r\n    setYearSelection: (userSelectedYear) => dispatch(setYearSelection(userSelectedYear))\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ChartConfiguration);","import ChartConfigTypes from './chart-config.types';\r\n\r\nexport const setStateSelection = (stateSelection) => ({\r\n    type : ChartConfigTypes.SET_STATE_SELECTION,\r\n    payload: stateSelection\r\n});\r\n\r\nexport const setYearSelection = (yearSelection) => ({\r\n    type : ChartConfigTypes.SET_YEAR_SELECTION,\r\n    payload: yearSelection\r\n});\r\n\r\nexport const setCOVID19Data = (data) => ({\r\n    type : ChartConfigTypes.SET_COVID19_DATA,\r\n    payload: data\r\n});\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport SpinnerImage from './spinning-blue-circle.gif';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => (\r\n    <div className='spinner-page'>\r\n        <div>\r\n            <div><img className='spinner-image' src={SpinnerImage} alt=\"Loading CDC Data\"/></div>\r\n            <div>Loading CDC Data...</div>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Spinner;\r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport './data-totals.css';\r\n\r\nimport {getDisplayNumber, getPercentage} from '../../utilities/formatting'\r\nimport {getStateData} from '../../utilities/states-data';\r\nconst DataTotals = ({selectedState, cdcTotalsByJurisdiction}) => {\r\n\r\n    const dataFetchedSuccessfully = Array.isArray(cdcTotalsByJurisdiction) && cdcTotalsByJurisdiction.length > 0;\r\n\r\n    let stateInfo = getStateData(selectedState);\r\n\r\n    let jurisdictionData = [];        \r\n    \r\n    let percentDeath =  0\r\n    let percentHospitalization = 0;\r\n    let percentICU = 0;\r\n    let percentDeathOfPositive = 0;\r\n\r\n    if (dataFetchedSuccessfully) {\r\n        jurisdictionData = cdcTotalsByJurisdiction.find(data => data.state===selectedState);\r\n\r\n        percentDeath =  getPercentage(jurisdictionData.total_deaths,stateInfo.population);\r\n        percentHospitalization =  getPercentage(jurisdictionData.inpatient_beds_covid,jurisdictionData.inpatient_beds);\r\n        percentICU =  getPercentage(jurisdictionData.icu_beds_covid,jurisdictionData.icu_beds);\r\n        percentDeathOfPositive = getPercentage(jurisdictionData.total_deaths, jurisdictionData.total_cases);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"data-totals-component\">\r\n            {dataFetchedSuccessfully ? \r\n                <div>\r\n                    <div className='data-totals-title'>Current Totals for <span>{stateInfo.name}</span> <span>{stateInfo.extra != null ? stateInfo.extra : \"\"}</span></div>\r\n                    <div className=\"data-totals\">\r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Total Cases</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.total_cases)}</div>\r\n                                <div className=\"percent\">Confirmed &amp; Probable Cases</div>\r\n                            </div>\r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Total Deaths</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.total_deaths)}</div>\r\n                                <div className=\"percent\">{percentDeath} of Est. Pop** <br/>{percentDeathOfPositive} of Total Cases</div>\r\n                            </div>\r\n                        \r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Now Hospitalized</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.inpatient_beds_covid)}</div>\r\n                                <div className=\"percent\">{percentHospitalization} of {getDisplayNumber(jurisdictionData.inpatient_beds)}<br/>Inpatient Beds Available</div>\r\n                            </div>\r\n                            <div className=\"data-row\">\r\n                                <div className=\"data-label\">Now In ICU</div>\r\n                                <div className=\"data-number\">{getDisplayNumber(jurisdictionData.icu_beds_covid)}</div>\r\n                                <div className=\"percent\">{percentICU} of {getDisplayNumber(jurisdictionData.icu_beds)}<br/>ICU Beds Available</div>\r\n                            </div>\r\n                    </div>        \r\n                </div>    \r\n            : \r\n                <div>Problem fetching data from CDC site...</div>\r\n            }\r\n            <div className=\"more-data\">\r\n                <div>** Estimated population of {selectedState}: {getDisplayNumber(stateInfo.population)}</div>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    selectedState: state.chartConfig.selectedState,\r\n    stateInformation: state.chartConfig.stateInformation,\r\n    cdcTotalsByJurisdiction: state.chartConfig.cdcTotalsByJurisdiction,\r\n});\r\n\r\nexport default connect(mapStateToProps)(DataTotals);","import {getStateCodes} from './states-data';\r\n\r\n// CDC Access Token to be allowed to pull more than 5k worth of records\r\nconst CDC_QUERY_ACCESS_TOKEN = \"&$limit=500000&$$app_token=fz22RHPlELrzEw1j9vq91YH6N\";\r\n\r\n// Cases and Deaths over time\r\nconst URL_CDC_CASES_DEATHS_BY_STATE_HISTORY = \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=submission_date as date,state,new_case,new_death&$order=submission_date, state\";\r\nconst URL_CDC_CASES_DEATHS_USA_HISTORY = \"https://data.cdc.gov/resource/9mfq-cb36.json?$select=submission_date as date,'USA' as state,sum(new_case) as new_case,sum(new_death) as new_death&$group=submission_date&$order=submission_date\";\r\n\r\n// Cases and Deaths by age groups\r\nconst URL_CDC_DEATHS_BY_AGE = \"https://data.cdc.gov/resource/9bhg-hcku.json?$select=start_date as date,state,age_group,covid_19_deaths,total_deaths where sex ='All Sexes' and `group`='By Month' and age_group in ('0-17 years', '18-29 years', '30-39 years','40-49 years','50-64 years','65-74 years','75-84 years','85 years and over') order by start_date,state,age_group\";\r\n\r\n// Hospital Data over time\r\nconst URL_CDC_HOSPITAL_DATA_BY_STATE_HISTORY = \"https://healthdata.gov/resource/g62h-syeh.json?$select=date,state,inpatient_beds,inpatient_beds_used_covid as inpatient_beds_covid,total_staffed_adult_icu_beds as icu_beds, staffed_icu_adult_patients_confirmed_covid as icu_beds_covid&$order=date, state\";\r\nconst URL_CDC_HOSPTIAL_DATA_USA_HISTORY = \"https://healthdata.gov/resource/g62h-syeh.json?$select=date,'USA' as state,sum(inpatient_beds)as inpatient_beds,sum(inpatient_beds_used_covid) as inpatient_beds_covid,sum(total_staffed_adult_icu_beds) as icu_beds,sum(staffed_icu_adult_patients_confirmed_covid) as icu_beds_covid&$group=date&$order=date\";\r\n\r\nconst URL_NYC_HOSPITAL_DATA = \"https://health.data.ny.gov/resource/jw46-jpb7.json?$select=as_of_date as date,'NYC' as state, sum(total_staffed_acute_care) as inpatient_beds, sum(patients_currently) as inpatient_beds_covid, sum(total_staffed_icu_beds_1) as icu_beds, sum(patients_currently_in_icu) as icu_beds_covid where ny_forward_region = 'NEW YORK CITY' group by date, state order by date desc\";\r\n\r\n// Vaccinations over time\r\nconst URL_CDC_VACCINATIONS_BY_AGE = \"https://data.cdc.gov/resource/gxj9-t96f.json?$select=cdc_case_earliest_dt as date,'USA' as state,agegroupvacc as age_group,administered_dose1_pct * 100 as first_dose_pct,series_complete_pop_pct * 100 as completed_pct&$order=cdc_case_earliest_dt\";\r\n\r\n// Excess Deaths by Age Group\r\nconst URL_CDC_EXCESS_DEATHS_BY_AGE = \"https://data.cdc.gov/resource/m74n-4hbs.json?$select=weekending as date, 'USA' as state, agegroup as age_group, percent_above_average_weighted, covid19_weighted where RaceEthnicity='All Race/Ethnicity Groups' and Sex='All Sexes' and agegroup not in ('All Ages', 'Not stated') and MMWRyear in ('2020','2021','2022','2023') order by date\";\r\n\r\nexport const getFreshData = async() => {\r\n    \r\n    try {  \r\n        // Get cases and deaths data history for each state and USA and merge\r\n        const dataHistoryByState = await fetchJsonData(URL_CDC_CASES_DEATHS_BY_STATE_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const dataHistoryUSA = await fetchJsonData(URL_CDC_CASES_DEATHS_USA_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const cdcHistoryByJurisdiction = dataHistoryByState.concat(dataHistoryUSA);\r\n\r\n        // Get cases and deaths TOTALS from history\r\n        //const dataCasesDeathsTotals = getCaseDeathTotalsFromHistoryData(cdcHistoryByJurisdiction);\r\n\r\n        const dataCasesDeathsTotals = getTotalsForEachState(cdcHistoryByJurisdiction);\r\n\r\n        // Get hospital data history for each state, NYC, USA and then merge\r\n        const dataHospitalByState = await fetchJsonData(URL_CDC_HOSPITAL_DATA_BY_STATE_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const dataHospitalUSA =await fetchJsonData(URL_CDC_HOSPTIAL_DATA_USA_HISTORY + CDC_QUERY_ACCESS_TOKEN);\r\n        const dataHospitalNYCOnly = await fetchJsonData(URL_NYC_HOSPITAL_DATA + CDC_QUERY_ACCESS_TOKEN);\r\n        const cdcHospitalDataByJurisdiction = dataHospitalByState.concat(dataHospitalUSA).concat(dataHospitalNYCOnly);\r\n\r\n        // Get last sumbission date to use for getting totals\r\n        const lastDate = (dataHospitalByState.reduce(function(prev, current) {\r\n            return (prev.date > current.date) ? prev : current\r\n        })).date\r\n\r\n        // Get NYC last date\r\n        const nycLastDate = (dataHospitalNYCOnly.reduce(function(prev, current) {\r\n            return (prev.date > current.date) ? prev : current\r\n        })).date\r\n\r\n        // Get hospital data TOTALS from history\r\n        const dataHospitalTotals = cdcHospitalDataByJurisdiction\r\n            .filter(function (data) {\r\n                const date = data.date;\r\n                return (data.state==='NYC' && date===nycLastDate) || date === lastDate;\r\n            });    \r\n        \r\n        // Merge TOTALS for cases and deaths and hospitals into one object \r\n        const cdcTotalsByJurisdiction = await getTotalsByJurisdiction(dataCasesDeathsTotals, dataHospitalTotals);\r\n        \r\n        // Get CDC Monthly Death Totals by Age Groups \r\n        const deathsByAgeGroups = await fetchJsonData(URL_CDC_DEATHS_BY_AGE + CDC_QUERY_ACCESS_TOKEN);\r\n        \r\n        // Get Vaccinations by Age Groups   \r\n        const cdcVaxByAgeGroup = await fetchJsonData(URL_CDC_VACCINATIONS_BY_AGE + CDC_QUERY_ACCESS_TOKEN);\r\n\r\n        // Get CDC Excess Deaths by Age Groups\r\n        const cdcExcessDeathsByAgeGroups = await fetchJsonData(URL_CDC_EXCESS_DEATHS_BY_AGE + CDC_QUERY_ACCESS_TOKEN);\r\n\r\n        return {\r\n            dataRefreshTimestamp: new Date(),\r\n            cdcTotalsByJurisdiction: cdcTotalsByJurisdiction,\r\n            cdcHistoryByJurisdiction: cdcHistoryByJurisdiction,\r\n            cdcHospitalDataByJurisdiction: cdcHospitalDataByJurisdiction,\r\n            cdcVaxByAgeGroup: cdcVaxByAgeGroup,\r\n            cdcExcessDeathsByAgeGroup: cdcExcessDeathsByAgeGroups,\r\n            cdcDeathsByAgeGroup : deathsByAgeGroups\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nexport const fetchJsonData = async(url) => {\r\n    try{\r\n        let json = null;\r\n\r\n        //console.log(\"url = \" + url);\r\n\r\n        // U.S. States Historical Data\r\n        const response = await fetch(url);\r\n        if (response.ok) {\r\n            json = await response.json();\r\n        }\r\n        else {\r\n            throw Error(response.statusText);\r\n        }\r\n        \r\n        return json;\r\n    }\r\n    catch (error) {\r\n        console.log(\"fetchJsonData() error!\", error);\r\n    }\r\n}\r\n\r\nexport const getTotalsForUSA = (totalsByState) => {\r\n\r\n    let total_cases = 0;\r\n    let total_deaths = 0;\r\n    let inpatient_beds = 0;\r\n    let inpatient_beds_covid = 0;\r\n    let icu_beds = 0;\r\n    let icu_beds_covid = 0;\r\n    let partiallyVaccinated = 0;\r\n    let fullyVaccinated = 0;\r\n\r\n    totalsByState.forEach(data => {\r\n        total_cases += Number(data.total_cases);\r\n        total_deaths += Number(data.total_deaths);\r\n        inpatient_beds += Number(data.inpatient_beds);\r\n        inpatient_beds_covid += Number(data.inpatient_beds_covid);\r\n        icu_beds += Number(data.icu_beds);\r\n        icu_beds_covid += Number(data.icu_beds_covid);\r\n        partiallyVaccinated += Number(data.partiallyVaccinated);\r\n        fullyVaccinated += Number(data.fullyVaccinated);\r\n    })\r\n\r\n    let totals = {\r\n        state:\"USA\", \r\n        total_cases: total_cases, \r\n        total_deaths: total_deaths,\r\n        inpatient_beds: inpatient_beds,\r\n        inpatient_beds_covid: inpatient_beds_covid,\r\n        icu_beds: icu_beds,\r\n        icu_beds_covid: icu_beds_covid,\r\n        partiallyVaccinated: partiallyVaccinated,\r\n        fullyVaccinated: fullyVaccinated\r\n    }\r\n\r\n    return totals;\r\n}\r\n\r\nconst getTotalsByJurisdiction = async(dataCasesDeathsByState, dataHospitalTotals) => {\r\n\r\n    let totalsByState= [];\r\n    let stateKeys = getStateCodes();\r\n    \r\n    stateKeys.forEach((state) => {\r\n\r\n        let casesDeathsData =dataCasesDeathsByState.find(data => data.state===state);\r\n        let hospitalData = dataHospitalTotals.find(data => data.state===state);\r\n        if (!hospitalData)\r\n            hospitalData = {\r\n                inpatient_beds: 0,\r\n                inpatient_beds_covid: 0,\r\n                icu_beds: 0,\r\n                icu_beds_covid: 0\r\n            }\r\n\r\n        totalsByState.push({\r\n            state: state,\r\n            total_cases: Number(casesDeathsData.total_cases),\r\n            total_deaths: Number(casesDeathsData.total_deaths),\r\n            inpatient_beds: Number(hospitalData.inpatient_beds),\r\n            inpatient_beds_covid: Number(hospitalData.inpatient_beds_covid),\r\n            icu_beds: Number(hospitalData.icu_beds),\r\n            icu_beds_covid: Number(hospitalData.icu_beds_covid)\r\n        });\r\n      \r\n    })\r\n\r\n    return totalsByState;\r\n}\r\n\r\n\r\nconst getTotalsForEachState = (stateHistoryData) => {\r\n    var totals = [];\r\n    stateHistoryData.forEach((record) => {\r\n                \r\n        const new_case = Number(record.new_case);\r\n        const new_death = Number(record.new_death);\r\n        const state = record.state;\r\n\r\n        // Debugging - CDC records have negative values, was affecting totals\r\n        // if (new_case < 0 || new_death < 0)\r\n        //    console.log(\"negative values found: \" + JSON.stringify(record)); \r\n\r\n        const stateTotal = totals.find(data => data.state===state);\r\n\r\n        if (!stateTotal) {\r\n            const newStateTotal = {\r\n                state: state,\r\n                total_cases: new_case,\r\n                total_deaths: new_death\r\n            }\r\n\r\n            totals.push(newStateTotal);\r\n        }\r\n        else {\r\n            stateTotal.total_cases += new_case;\r\n            stateTotal.total_deaths += new_death;\r\n        }\r\n    });\r\n\r\n    return totals;\r\n}\r\n","import {STATIC_STATE_DATA} from './states-data';\r\n\r\nimport {DATA_FIELD_COLORS, CDC_AGE_GROUP_VALUES, CDC_FIELDS_FOR_CHART, \r\n    CHART_IDENTIFIER, CHART_META_DATA,DATA_FIELD_DISPLAY_NAMES} from './data-fields';\r\n\r\nimport {getFormattedDateForFiltering,formatISODate,shrinkAgeGroupName,\r\n    formatDateListForChart, shrinkAgeGroupNameList} from './formatting';\r\n\r\nexport const getDeathsByAgeGroupSummary = (ageGroupData) => {\r\n\r\n    var summary = [];\r\n\r\n    ageGroupData.forEach(ageGroupRec => {\r\n\r\n        const covid_19_deaths = !Number(ageGroupRec.covid_19_deaths) ? 0 : Number(ageGroupRec.covid_19_deaths);\r\n        const total_deaths = !Number(ageGroupRec.total_deaths) ? 0 : Number(ageGroupRec.total_deaths);\r\n\r\n        const ageGroupSum = summary.find(rec => rec.age_group === ageGroupRec.age_group);\r\n\r\n        if (!ageGroupSum) {\r\n            const age_group_sum = {\r\n                age_group: ageGroupRec.age_group,\r\n                sum_covid_19_deaths: covid_19_deaths,\r\n                sum_total_deaths: total_deaths\r\n            }\r\n            summary.push(age_group_sum);\r\n        }\r\n        else {\r\n            ageGroupSum.sum_covid_19_deaths += covid_19_deaths;\r\n            ageGroupSum.sum_total_deaths += total_deaths;\r\n        }\r\n    });\r\n            \r\n    return summary;\r\n}\r\n\r\nexport const getCDCHistoryDataBySelection = (cdcHistoryByJurisdiction, selectedState, selectedYear) => {\r\n\r\n    const monthsSelected = selectedYear.search(\"months-\");\r\n\r\n    if (monthsSelected > -1) {\r\n        const monthsBack = selectedYear.substr(monthsSelected+7, selectedYear.lenth); \r\n        const dateRange = getDateRangeValues(monthsBack);\r\n\r\n        const startDate = Number(getFormattedDateForFiltering(dateRange.startDate));\r\n        const endDate = Number(getFormattedDateForFiltering(dateRange.endDate));\r\n\r\n        let dataSet = getCDCDataSetByDateRange(cdcHistoryByJurisdiction, selectedState, startDate, endDate);\r\n        return dataSet; \r\n    }\r\n    else {\r\n\r\n        let dataSet = getCDCDataSetByYear(cdcHistoryByJurisdiction, selectedState, selectedYear);\r\n        return dataSet;\r\n\r\n    }\r\n}\r\n\r\nexport const getCDCDataSetByYear = (cdcHistoryByJurisdiction, selectedState, selectedYear) =>{\r\n    \r\n    let dataSet = [];\r\n\r\n    if(selectedYear === \"0\") {\r\n        dataSet = cdcHistoryByJurisdiction\r\n            .filter(stateData => stateData.state === selectedState);\r\n    }\r\n    else {\r\n        dataSet = cdcHistoryByJurisdiction\r\n            .filter(stateData => stateData.state === selectedState && stateData.date.substr(0,4) === selectedYear);  \r\n    }\r\n\r\n    return dataSet.sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n}\r\n\r\n// The variables startDate and endDate are numerical format yyyymmdd\r\nexport const getCDCDataSetByDateRange = (cdcHistoryByJurisdiction, selectedState, startDate, endDate) =>{\r\n    \r\n    let dataSet = cdcHistoryByJurisdiction\r\n        .filter(function (stateData) {\r\n            const date = Number(stateData.date.substr(0,10).replaceAll('-',''));\r\n            return stateData.state === selectedState \r\n                && date >= startDate \r\n                && date <= endDate;\r\n        })\r\n        .sort(function (a, b) {\r\n            return a.date - b.date;\r\n        });\r\n\r\n    return dataSet;\r\n}\r\n\r\nexport const getDateRangeValues = (monthsBack) => {\r\n    \r\n    const startDate = new Date(new Date());\r\n    const endDate = new Date(new Date());\r\n\r\n    startDate.setMonth(startDate.getMonth() - monthsBack);\r\n    startDate.setDate(1);\r\n\r\n    return {startDate: formatISODate(startDate), endDate: formatISODate(endDate)} \r\n}\r\n\r\n\r\nexport const getChartObjectByChartId = (chartId, cdcDataSet, selectedState, selectedYear) => {\r\n\r\n    let filteredData = null;\r\n    let chartObject = null;\r\n\r\n    // Get data filtered by selection\r\n    if (chartId === CHART_IDENTIFIER.AGE_GROUP_SUMMARY || chartId===CHART_IDENTIFIER.DEATHS_BY_AGE) {\r\n        \r\n        // This data set uses state name instead of the 2-digit code.\r\n        const state = STATIC_STATE_DATA.find(rec => rec.state === selectedState);\r\n        filteredData = getCDCHistoryDataBySelection(cdcDataSet, state.name, selectedYear);\r\n    }\r\n    else {\r\n        filteredData = getCDCHistoryDataBySelection(cdcDataSet, selectedState, selectedYear);\r\n    }\r\n\r\n    // Get chartObject based on type of data\r\n    if (chartId === CHART_IDENTIFIER.AGE_GROUP_SUMMARY) {\r\n        chartObject = getChartObjectForAgeGroupSummary(chartId, filteredData);\r\n        chartObject.isDataAvailable = filteredData.length > 0;\r\n    }\r\n    else if (CHART_META_DATA[chartId].isGroupedByAge) {\r\n        chartObject = getChartObjectForDataGroupedByAge(chartId, filteredData);\r\n        chartObject.isDataAvailable = isDataAvailableByAgeGroup(chartObject.chartDataSet)\r\n    }\r\n    else {\r\n        chartObject = getChartObjectForData(chartId, filteredData);\r\n        chartObject.isDataAvailable = filteredData.length > 0;\r\n        \r\n    }\r\n   \r\n    //console.log(\"chartid=\" + chartId);\r\n     \r\n    if (chartId !== CHART_IDENTIFIER.AGE_GROUP_SUMMARY) {\r\n        chartObject.dateFormatForXAxis = isDateRangeMoreThanOneMonth(chartObject.chartLabels) ? \"month\" : \"week\";\r\n    }\r\n    return chartObject;\r\n\r\n}\r\n\r\nconst isDataAvailableByAgeGroup =(chartDataSet) => {\r\n\r\n    let dataHasValues = false;\r\n\r\n    chartDataSet.forEach(ageGroupRec => {\r\n\r\n        const data = ageGroupRec.data;\r\n        data.forEach((rec) => {\r\n            if (!dataHasValues && Number(rec) !== 0)\r\n                dataHasValues = true;\r\n        });\r\n        \r\n    });\r\n    \r\n    return dataHasValues;\r\n\r\n}\r\n\r\nconst isDateRangeMoreThanOneMonth = (chartLabels) => {\r\n\r\n    let monthsInData = 0;\r\n\r\n    // Array of 12 zeros to keep count of months in data\r\n    const monthCount = [0,0,0,0,0,0,0,0,0,0,0,0]\r\n\r\n    chartLabels.forEach(date => {\r\n        const month = date.getMonth();\r\n        monthCount[month] += 1;\r\n    });\r\n\r\n    monthCount.forEach (monthCountRec => {\r\n        if (monthCountRec > 0)\r\n            monthsInData += 1;\r\n    })\r\n\r\n    return monthsInData > 1;\r\n    \r\n}\r\n\r\n/**\r\n * Generates a chartObject SPECIFICALLY for a bar chart for data grouped by age. \r\n * This chartObject is different from the time series line chart.\r\n * Expects data to be grouped by date, age group for example\r\n * \r\n * date         age_group   field1  field2 \r\n * 1/1/2022     0-17        55      33\r\n * 1/1/2022     18-24       55      33\r\n * 1/1/2022     25-34       55      33\r\n * 1/1/2022     35-44       55      33\r\n * \r\n * Sample cdc data with miltiple fields \r\n * [{date: '2020-01-01T00:00:00.000', state: 'Alabama', age_group: '0-17 years', covid_19_deaths: '0', total_deaths: '71}\r\n * {date: '2020-01-01T00:00:00.000',  state: 'Alabama', age_group: '18-29 years', covid_19_deaths: '0', total_deaths: '71}\r\n * {date: '2020-01-01T00:00:00.000',  state: 'Alabama', age_group: '30-39 years', covid_19_deaths: '0', total_deaths: '71}\r\n * {date: '2020-01-01T00:00:00.000',  state: 'Alabama', age_group: '40-49 years', covid_19_deaths: '0', total_deaths: '71}]\r\n */\r\nconst getChartObjectForAgeGroupSummary = (chartId, filteredData) => {\r\n    const dataSet = getDeathsByAgeGroupSummary(filteredData);\r\n    const covid19Deaths = dataSet.map(item => item.sum_covid_19_deaths == null ? 0 : item.sum_covid_19_deaths);\r\n    const totalDeaths = dataSet.map(item => item.sum_total_deaths == null ? 0 : item.sum_total_deaths);\r\n\r\n    const ageGroupsInData = shrinkAgeGroupNameList(CDC_AGE_GROUP_VALUES[chartId]);\r\n    \r\n    const chartDataSet  = [\r\n        {    \r\n            label: \"Covid-19\",\r\n            backgroundColor: \"red\",\r\n            data:covid19Deaths \r\n        },\r\n        { \r\n            label: \"All Deaths\",\r\n            backgroundColor: \"blue\",\r\n            data:totalDeaths\r\n        }\r\n    ];\r\n\r\n    const chartObject = {\r\n        chartId: chartId,\r\n        chartDataSet: chartDataSet,\r\n        chartLabels: ageGroupsInData,\r\n    }\r\n\r\n    return chartObject;\r\n}\r\n\r\n\r\n/**\r\n * Generates a chartObject set for a timeseries line chart for data grouped by age. \r\n * Expects data to be grouped by date, age group for example\r\n * \r\n * date         age_group   field1  field2 \r\n * 1/1/2022     0-17        55      33\r\n * 1/1/2022     18-24       55      33\r\n * 1/1/2022     25-34       55      33\r\n * 1/1/2022     35-44       55      33\r\n * \r\n * Sample cdc data with miltiple fields \r\n * [{date: '2020-01-01T00:00:00.000', state: 'Alabama', age_group: '0-17 years', covid_19_deaths: '0', total_deaths: '71}\r\n * {date: '2020-01-01T00:00:00.000',  state: 'Alabama', age_group: '18-29 years', covid_19_deaths: '0', total_deaths: '71}\r\n * {date: '2020-01-01T00:00:00.000',  state: 'Alabama', age_group: '30-39 years', covid_19_deaths: '0', total_deaths: '71}\r\n * {date: '2020-01-01T00:00:00.000',  state: 'Alabama', age_group: '40-49 years', covid_19_deaths: '0', total_deaths: '71}]\r\n * \r\n */\r\nconst getChartObjectForDataGroupedByAge = (chartId, filteredData) => {\r\n\r\n    const chartDataSet = [];\r\n    \r\n    //To group by Age Groups, we get a predefined list for this data set\r\n    const ageGroupsInData = CDC_AGE_GROUP_VALUES[chartId];\r\n\r\n    //For data grouped by age, you can only use 1 field per age group. \r\n    const fieldName = CDC_FIELDS_FOR_CHART[chartId][0];\r\n    \r\n    // Loop through all the predefined age groups\r\n    ageGroupsInData.forEach((ageGroupId, index) => {\r\n\r\n        // Filter data per specified age group to get 1 record per date\r\n        const ageGroupData = filteredData.filter(rec => rec.age_group === ageGroupId)\r\n\r\n        // Create array of the data of the field\r\n        const dataValues = ageGroupData.map(item => !item[fieldName] ? 0 : item[fieldName]);\r\n        const labelText = shrinkAgeGroupName(ageGroupId);\r\n        const dataTotal = dataValues.reduce((a, b) => Number(a) + Number(b), 0);\r\n\r\n        const chartRec = {\r\n            fieldName: fieldName,\r\n            label: labelText,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            borderWidth: 1.5,\r\n            fill: false,\r\n            dataTotal: dataTotal,\r\n            data: dataValues\r\n        };\r\n\r\n        chartDataSet.push(chartRec);\r\n    });\r\n\r\n    // Get Date List identified in this dataset\r\n    const chartDateList = filteredData.map(item => item.date.substr(0,10));\r\n\r\n    const chartObject = {\r\n        chartId: chartId,\r\n        chartDataSet: chartDataSet,\r\n        chartLabels: formatDateListForChart(chartDateList)\r\n    }\r\n\r\n    return chartObject\r\n}\r\n\r\n/**\r\n * Generates a chartObject set for a timeseries line chart for data by date.\r\n * \r\n * Sample cdc data with miltiple fields \r\n * [{date: '2021-11-18T00:00:00.000', state: 'OH', new_case: '6615.0', new_death: '0.0'}\r\n * {date: '2021-11-18T00:00:00.000', state: 'OK', new_case: '970.0', new_death: '0.0'}\r\n * {date: '2021-11-18T00:00:00.000', state: 'OR', new_case: '1148.0', new_death: '13.0'}\r\n * {date: '2021-11-18T00:00:00.000', state: 'PA', new_case: '6637.0', new_death: '96.0'}]\r\n * \r\n */\r\nconst getChartObjectForData = (chartId, filteredData) => {\r\n\r\n    const chartDataSet = [];\r\n\r\n    const fieldNames = CDC_FIELDS_FOR_CHART[chartId];\r\n    \r\n    // Initialize the datasets for each field.\r\n    fieldNames.forEach ((fieldName, index) => {\r\n        chartDataSet.push({\r\n            fieldName: fieldName, \r\n            label: DATA_FIELD_DISPLAY_NAMES[fieldName],\r\n            fill: false,\r\n            backgroundColor: DATA_FIELD_COLORS[index],\r\n            borderColor: DATA_FIELD_COLORS[index],\r\n            borderWidth: 1.5,\r\n            dataTotal: 0,\r\n            data: []\r\n            \r\n        })\r\n    })\r\n\r\n    filteredData.forEach(row => {\r\n        fieldNames.forEach (fieldName => {\r\n            const fieldData = chartDataSet.find((data => data.fieldName === fieldName))    \r\n            const data = !row[fieldName] ? 0 : row[fieldName];\r\n            fieldData.dataTotal += Number(data);\r\n            fieldData.data.push(data);\r\n        })\r\n    });\r\n\r\n    // Get Date List identified in this dataset\r\n    const chartDateList = filteredData.map(item => item.date.substr(0,10));\r\n\r\n    const chartObject = {\r\n        chartId: chartId,\r\n        chartDataSet: chartDataSet,\r\n        chartLabels: formatDateListForChart(chartDateList)\r\n    }\r\n\r\n    return chartObject\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport \"./dashboard.css\";\r\n\r\nimport CDCChart from '../cdc-chart/cdc-chart.component';\r\nimport ChartConfiguration from '../chart-config/chart-config.component';\r\nimport Spinner from '../spinner/spinner.component';\r\nimport DataTotals from '../data-totals/data-totals.component';\r\n\r\nimport {getFreshData} from '../../utilities/data-fetching';\r\nimport {getChartObjectByChartId} from '../../utilities/chart-data-processing';\r\nimport {setCOVID19Data} from '../../redux/chart-config/chart-config.actions';\r\nimport {CHART_IDENTIFIER} from '../../utilities/data-fields';\r\n\r\nconst Covid19UsDashboard =({setCOVID19Data, isDataLoaded, chartConfig}) => {  \r\n\r\n    useEffect(() => {\r\n\r\n        //console.log(\"useEffect()...\");\r\n        async function loadData() {\r\n            try {   \r\n                if (!isDataLoaded) {\r\n                    //console.log(\"Refreshing Data from CDC...\" + new Date());\r\n                    const freshData = await getFreshData();\r\n                    setCOVID19Data(freshData);\r\n                    //console.log(\"Data Refreshed.\" +  new Date());\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        loadData();\r\n\r\n    },[setCOVID19Data,isDataLoaded]);\r\n    \r\n    return (   \r\n\r\n        <div className=\"dashboard\">\r\n            <div className=\"page-header\">\r\n                <div className=\"page-title\"><span>COVID-19 Data Charts</span> <span>For United States</span></div>\r\n                <div className=\"page-subtitle\">50 U.S. States, D.C. and Puerto Rico</div>\r\n            </div>\r\n            <ChartConfiguration />\r\n            { !isDataLoaded ? ( \r\n                <Spinner/>\r\n            ) : (\r\n                <div className=\"page-layout\">\r\n                    <DataTotals/>\r\n                    \r\n                    <CDCChart chartObject={getChartObjectByChartId(CHART_IDENTIFIER.CASES_DEATHS, chartConfig.cdcHistoryByJurisdiction, chartConfig.selectedState, chartConfig.selectedYear)} displaySummary={true}/>\r\n              \r\n                    <CDCChart chartObject={getChartObjectByChartId(CHART_IDENTIFIER.HOSPITAL_DATA, chartConfig.cdcHospitalDataByJurisdiction, chartConfig.selectedState, chartConfig.selectedYear)} displaySummary={true}/>\r\n              \r\n                    <CDCChart chartObject={getChartObjectByChartId(CHART_IDENTIFIER.DEATHS_BY_AGE, chartConfig.cdcDeathsByAgeGroup, chartConfig.selectedState, chartConfig.selectedYear)} />\r\n              \r\n                    <CDCChart chartObject={getChartObjectByChartId(CHART_IDENTIFIER.AGE_GROUP_SUMMARY, chartConfig.cdcDeathsByAgeGroup, chartConfig.selectedState, chartConfig.selectedYear)} />\r\n                    \r\n                    <CDCChart chartObject={getChartObjectByChartId(CHART_IDENTIFIER.VAX_FIRST_DOSE, chartConfig.cdcVaxByAgeGroup, chartConfig.selectedState, chartConfig.selectedYear)} isFullWidthChart={true}/>\r\n                    \r\n                    <CDCChart chartObject={getChartObjectByChartId(CHART_IDENTIFIER.VAX_COMPLETE_DOSE, chartConfig.cdcVaxByAgeGroup, chartConfig.selectedState, chartConfig.selectedYear)} isFullWidthChart={true}/>\r\n                    \r\n                    <CDCChart chartObject={getChartObjectByChartId(CHART_IDENTIFIER.EXCESS_DEATHS, chartConfig.cdcExcessDeathsByAgeGroup, chartConfig.selectedState, chartConfig.selectedYear)} isFullWidthChart={true}/>\r\n                    \r\n                    <CDCChart chartObject={getChartObjectByChartId(CHART_IDENTIFIER.EXCESS_DEATHS_PCT, chartConfig.cdcExcessDeathsByAgeGroup, chartConfig.selectedState, chartConfig.selectedYear)} isFullWidthChart={true}/>\r\n                    \r\n            \r\n                </div>\r\n            )}\r\n            <div className=\"page-footer\">\r\n                Data Sources:<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://data.cdc.gov\")}>Center For Disease Control</span><br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://healthdata.gov/\")}>Healthdata.gov</span><br/>\r\n                ~ ~ ~<br/>\r\n                <span className=\"footer-site-link\" onClick={()=> window.open(\"https://tanyamiranda.github.io/\")}>Contact Developer</span><br/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    chartConfig: state.chartConfig,\r\n    isDataLoaded: state.chartConfig.isDataLoaded\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCOVID19Data: (data) => dispatch(setCOVID19Data(data))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Covid19UsDashboard);","import React from 'react';\r\n\r\nimport Covid19UsDashboard from './components/dashboard/dashboard.component';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Covid19UsDashboard/>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ChartConfigTypes from './chart-config.types';\r\nimport {USA_IDENTIFIER, YEARS_DEFAULT} from '../../utilities/data-fields';\r\n\r\nconst INITIAL_STATE = {\r\n    dataRefreshTimestamp: null,\r\n    isDataLoaded: false,\r\n    selectedState: null,\r\n    selectedYear:null,   \r\n    selectedFields: []    \r\n};\r\n\r\nconst chartConfigReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case ChartConfigTypes.SET_COVID19_DATA: \r\n            return {\r\n                selectedState: USA_IDENTIFIER,\r\n                selectedYear: YEARS_DEFAULT,\r\n                isDataLoaded: true,\r\n                cdcHistoryByJurisdiction: action.payload.cdcHistoryByJurisdiction,\r\n                cdcTotalsByJurisdiction: action.payload.cdcTotalsByJurisdiction,\r\n                cdcHospitalDataByJurisdiction : action.payload.cdcHospitalDataByJurisdiction,\r\n                cdcVaxByAgeGroup: action.payload.cdcVaxByAgeGroup,\r\n                cdcExcessDeathsByAgeGroup: action.payload.cdcExcessDeathsByAgeGroup,\r\n                cdcDeathsByAgeGroup: action.payload.cdcDeathsByAgeGroup\r\n            }\r\n            \r\n        case ChartConfigTypes.SET_STATE_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedState: action.payload\r\n            }\r\n        \r\n        case ChartConfigTypes.SET_YEAR_SELECTION:\r\n            return {\r\n                ...state,\r\n                selectedYear: action.payload\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n        \r\n    }\r\n}\r\n\r\nexport default chartConfigReducer;","import {combineReducers} from 'redux';\r\n\r\nimport chartConfigReducer from './chart-config/chart-config.reducer';\r\n\r\nexport default combineReducers({\r\n    chartConfig: chartConfigReducer\r\n});\r\n","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewareObjects = [];\r\n\r\n//Only use logger in development environement\r\nif (process.env.NODE_ENV === 'development') {\r\n    middlewareObjects.push(logger);\r\n}\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewareObjects));\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}